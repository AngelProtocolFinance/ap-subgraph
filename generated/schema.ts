// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CharityApproved extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CharityApproved entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CharityApproved must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CharityApproved", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): CharityApproved | null {
    return changetype<CharityApproved | null>(
      store.get_in_block("CharityApproved", id.toHexString())
    );
  }

  static load(id: Bytes): CharityApproved | null {
    return changetype<CharityApproved | null>(
      store.get("CharityApproved", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get proposalId(): BigInt {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set proposalId(value: BigInt) {
    this.set("proposalId", Value.fromBigInt(value));
  }

  get endowmentId(): BigInt {
    let value = this.get("endowmentId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowmentId(value: BigInt) {
    this.set("endowmentId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CharityProposed extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CharityProposed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CharityProposed must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CharityProposed", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): CharityProposed | null {
    return changetype<CharityProposed | null>(
      store.get_in_block("CharityProposed", id.toHexString())
    );
  }

  static load(id: Bytes): CharityProposed | null {
    return changetype<CharityProposed | null>(
      store.get("CharityProposed", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get proposer(): Bytes {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set proposer(value: Bytes) {
    this.set("proposer", Value.fromBytes(value));
  }

  get proposalId(): BigInt {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set proposalId(value: BigInt) {
    this.set("proposalId", Value.fromBigInt(value));
  }

  get meta(): string {
    let value = this.get("meta");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set meta(value: string) {
    this.set("meta", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CharityRejected extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CharityRejected entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CharityRejected must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CharityRejected", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): CharityRejected | null {
    return changetype<CharityRejected | null>(
      store.get_in_block("CharityRejected", id.toHexString())
    );
  }

  static load(id: Bytes): CharityRejected | null {
    return changetype<CharityRejected | null>(
      store.get("CharityRejected", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get proposalId(): BigInt {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set proposalId(value: BigInt) {
    this.set("proposalId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Deposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Deposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(
      store.get_in_block("Deposit", id.toHexString())
    );
  }

  static load(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get action_destinationChain(): string {
    let value = this.get("action_destinationChain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action_destinationChain(value: string) {
    this.set("action_destinationChain", Value.fromString(value));
  }

  get action_strategyId(): Bytes {
    let value = this.get("action_strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_strategyId(value: Bytes) {
    this.set("action_strategyId", Value.fromBytes(value));
  }

  get action_selector(): Bytes {
    let value = this.get("action_selector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_selector(value: Bytes) {
    this.set("action_selector", Value.fromBytes(value));
  }

  get action_accountIds(): Array<BigInt> {
    let value = this.get("action_accountIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set action_accountIds(value: Array<BigInt>) {
    this.set("action_accountIds", Value.fromBigIntArray(value));
  }

  get action_token(): Bytes {
    let value = this.get("action_token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_token(value: Bytes) {
    this.set("action_token", Value.fromBytes(value));
  }

  get action_lockAmt(): BigInt {
    let value = this.get("action_lockAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_lockAmt(value: BigInt) {
    this.set("action_lockAmt", Value.fromBigInt(value));
  }

  get action_liqAmt(): BigInt {
    let value = this.get("action_liqAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_liqAmt(value: BigInt) {
    this.set("action_liqAmt", Value.fromBigInt(value));
  }

  get action_status(): i32 {
    let value = this.get("action_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set action_status(value: i32) {
    this.set("action_status", Value.fromI32(value));
  }
  
  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class GasSent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GasSent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GasSent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GasSent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GasSent | null {
    return changetype<GasSent | null>(
      store.get_in_block("GasSent", id.toHexString())
    );
  }

  static load(id: Bytes): GasSent | null {
    return changetype<GasSent | null>(store.get("GasSent", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get endowmentId(): BigInt {
    let value = this.get("endowmentId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowmentId(value: BigInt) {
    this.set("endowmentId", Value.fromBigInt(value));
  }

  get member(): Bytes {
    let value = this.get("member");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set member(value: Bytes) {
    this.set("member", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class InitilizedCharityApplication extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save InitilizedCharityApplication entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type InitilizedCharityApplication must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "InitilizedCharityApplication",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): InitilizedCharityApplication | null {
    return changetype<InitilizedCharityApplication | null>(
      store.get_in_block("InitilizedCharityApplication", id.toHexString())
    );
  }

  static load(id: Bytes): InitilizedCharityApplication | null {
    return changetype<InitilizedCharityApplication | null>(
      store.get("InitilizedCharityApplication", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get updatedConfig_proposalExpiry(): BigInt {
    let value = this.get("updatedConfig_proposalExpiry");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedConfig_proposalExpiry(value: BigInt) {
    this.set("updatedConfig_proposalExpiry", Value.fromBigInt(value));
  }

  get updatedConfig_applicationMultisig(): Bytes {
    let value = this.get("updatedConfig_applicationMultisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set updatedConfig_applicationMultisig(value: Bytes) {
    this.set("updatedConfig_applicationMultisig", Value.fromBytes(value));
  }

  get updatedConfig_accountsContract(): Bytes {
    let value = this.get("updatedConfig_accountsContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set updatedConfig_accountsContract(value: Bytes) {
    this.set("updatedConfig_accountsContract", Value.fromBytes(value));
  }

  get updatedConfig_seedSplitToLiquid(): BigInt {
    let value = this.get("updatedConfig_seedSplitToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedConfig_seedSplitToLiquid(value: BigInt) {
    this.set("updatedConfig_seedSplitToLiquid", Value.fromBigInt(value));
  }

  get updatedConfig_newEndowGasMoney(): boolean {
    let value = this.get("updatedConfig_newEndowGasMoney");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set updatedConfig_newEndowGasMoney(value: boolean) {
    this.set("updatedConfig_newEndowGasMoney", Value.fromBoolean(value));
  }

  get updatedConfig_gasAmount(): BigInt {
    let value = this.get("updatedConfig_gasAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedConfig_gasAmount(value: BigInt) {
    this.set("updatedConfig_gasAmount", Value.fromBigInt(value));
  }

  get updatedConfig_fundSeedAsset(): boolean {
    let value = this.get("updatedConfig_fundSeedAsset");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set updatedConfig_fundSeedAsset(value: boolean) {
    this.set("updatedConfig_fundSeedAsset", Value.fromBoolean(value));
  }

  get updatedConfig_seedAsset(): Bytes {
    let value = this.get("updatedConfig_seedAsset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set updatedConfig_seedAsset(value: Bytes) {
    this.set("updatedConfig_seedAsset", Value.fromBytes(value));
  }

  get updatedConfig_seedAssetAmount(): BigInt {
    let value = this.get("updatedConfig_seedAssetAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedConfig_seedAssetAmount(value: BigInt) {
    this.set("updatedConfig_seedAssetAmount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SeedAssetSent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SeedAssetSent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SeedAssetSent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SeedAssetSent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SeedAssetSent | null {
    return changetype<SeedAssetSent | null>(
      store.get_in_block("SeedAssetSent", id.toHexString())
    );
  }

  static load(id: Bytes): SeedAssetSent | null {
    return changetype<SeedAssetSent | null>(
      store.get("SeedAssetSent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get endowmentId(): BigInt {
    let value = this.get("endowmentId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowmentId(value: BigInt) {
    this.set("endowmentId", Value.fromBigInt(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ConfigUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ConfigUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ConfigUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ConfigUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ConfigUpdated | null {
    return changetype<ConfigUpdated | null>(
      store.get_in_block("ConfigUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): ConfigUpdated | null {
    return changetype<ConfigUpdated | null>(
      store.get("ConfigUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_fundRotation(): BigInt {
    let value = this.get("config_fundRotation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_fundRotation(value: BigInt) {
    this.set("config_fundRotation", Value.fromBigInt(value));
  }

  get config_fundMemberLimit(): BigInt {
    let value = this.get("config_fundMemberLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_fundMemberLimit(value: BigInt) {
    this.set("config_fundMemberLimit", Value.fromBigInt(value));
  }

  get config_fundingGoal(): BigInt {
    let value = this.get("config_fundingGoal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_fundingGoal(value: BigInt) {
    this.set("config_fundingGoal", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMessagesUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DonationMessagesUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMessagesUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMessagesUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMessagesUpdated | null {
    return changetype<DonationMessagesUpdated | null>(
      store.get_in_block("DonationMessagesUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMessagesUpdated | null {
    return changetype<DonationMessagesUpdated | null>(
      store.get("DonationMessagesUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get messages_member_ids(): Array<BigInt> {
    let value = this.get("messages_member_ids");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set messages_member_ids(value: Array<BigInt>) {
    this.set("messages_member_ids", Value.fromBigIntArray(value));
  }

  get messages_locked_donation_amount(): Array<BigInt> {
    let value = this.get("messages_locked_donation_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set messages_locked_donation_amount(value: Array<BigInt>) {
    this.set("messages_locked_donation_amount", Value.fromBigIntArray(value));
  }

  get messages_liquid_donation_amount(): Array<BigInt> {
    let value = this.get("messages_liquid_donation_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set messages_liquid_donation_amount(value: Array<BigInt>) {
    this.set("messages_liquid_donation_amount", Value.fromBigIntArray(value));
  }

  get messages_lockedSplit(): Array<BigInt> {
    let value = this.get("messages_lockedSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set messages_lockedSplit(value: Array<BigInt>) {
    this.set("messages_lockedSplit", Value.fromBigIntArray(value));
  }

  get messages_liquidSplit(): Array<BigInt> {
    let value = this.get("messages_liquidSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set messages_liquidSplit(value: Array<BigInt>) {
    this.set("messages_liquidSplit", Value.fromBigIntArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class IndexFundCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IndexFundCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type IndexFundCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IndexFundCreated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): IndexFundCreated | null {
    return changetype<IndexFundCreated | null>(
      store.get_in_block("IndexFundCreated", id.toHexString())
    );
  }

  static load(id: Bytes): IndexFundCreated | null {
    return changetype<IndexFundCreated | null>(
      store.get("IndexFundCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get IndexFund_id(): BigInt {
    let value = this.get("IndexFund_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set IndexFund_id(value: BigInt) {
    this.set("IndexFund_id", Value.fromBigInt(value));
  }

  get fund_id(): BigInt {
    let value = this.get("fund_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fund_id(value: BigInt) {
    this.set("fund_id", Value.fromBigInt(value));
  }

  get fund_name(): string {
    let value = this.get("fund_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fund_name(value: string) {
    this.set("fund_name", Value.fromString(value));
  }

  get fund_description(): string {
    let value = this.get("fund_description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set fund_description(value: string) {
    this.set("fund_description", Value.fromString(value));
  }

  get fund_members(): Array<BigInt> {
    let value = this.get("fund_members");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set fund_members(value: Array<BigInt>) {
    this.set("fund_members", Value.fromBigIntArray(value));
  }

  get fund_splitToLiquid(): BigInt {
    let value = this.get("fund_splitToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fund_splitToLiquid(value: BigInt) {
    this.set("fund_splitToLiquid", Value.fromBigInt(value));
  }

  get fund_expiryTime(): BigInt {
    let value = this.get("fund_expiryTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fund_expiryTime(value: BigInt) {
    this.set("fund_expiryTime", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class IndexFundRemoved extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IndexFundRemoved entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type IndexFundRemoved must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IndexFundRemoved", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): IndexFundRemoved | null {
    return changetype<IndexFundRemoved | null>(
      store.get_in_block("IndexFundRemoved", id.toHexString())
    );
  }

  static load(id: Bytes): IndexFundRemoved | null {
    return changetype<IndexFundRemoved | null>(
      store.get("IndexFundRemoved", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get IndexFund_id(): BigInt {
    let value = this.get("IndexFund_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set IndexFund_id(value: BigInt) {
    this.set("IndexFund_id", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Initialized extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Initialized entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Initialized must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Initialized", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Initialized | null {
    return changetype<Initialized | null>(
      store.get_in_block("Initialized", id.toHexString())
    );
  }

  static load(id: Bytes): Initialized | null {
    return changetype<Initialized | null>(
      store.get("Initialized", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get version(): i32 {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class MemberAdded extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MemberAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MemberAdded must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MemberAdded", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MemberAdded | null {
    return changetype<MemberAdded | null>(
      store.get_in_block("MemberAdded", id.toHexString())
    );
  }

  static load(id: Bytes): MemberAdded | null {
    return changetype<MemberAdded | null>(
      store.get("MemberAdded", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get fundId(): BigInt {
    let value = this.get("fundId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundId(value: BigInt) {
    this.set("fundId", Value.fromBigInt(value));
  }

  get memberId(): BigInt {
    let value = this.get("memberId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set memberId(value: BigInt) {
    this.set("memberId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class MemberRemoved extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MemberRemoved entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MemberRemoved must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MemberRemoved", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MemberRemoved | null {
    return changetype<MemberRemoved | null>(
      store.get_in_block("MemberRemoved", id.toHexString())
    );
  }

  static load(id: Bytes): MemberRemoved | null {
    return changetype<MemberRemoved | null>(
      store.get("MemberRemoved", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get fundId(): BigInt {
    let value = this.get("fundId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundId(value: BigInt) {
    this.set("fundId", Value.fromBigInt(value));
  }

  get memberId(): BigInt {
    let value = this.get("memberId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set memberId(value: BigInt) {
    this.set("memberId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnerUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnerUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OwnerUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnerUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OwnerUpdated | null {
    return changetype<OwnerUpdated | null>(
      store.get_in_block("OwnerUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): OwnerUpdated | null {
    return changetype<OwnerUpdated | null>(
      store.get("OwnerUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RegistrarUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RegistrarUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RegistrarUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RegistrarUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RegistrarUpdated | null {
    return changetype<RegistrarUpdated | null>(
      store.get_in_block("RegistrarUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): RegistrarUpdated | null {
    return changetype<RegistrarUpdated | null>(
      store.get("RegistrarUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get newRegistrar(): Bytes {
    let value = this.get("newRegistrar");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newRegistrar(value: Bytes) {
    this.set("newRegistrar", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateActiveFund extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateActiveFund entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateActiveFund must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateActiveFund", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateActiveFund | null {
    return changetype<UpdateActiveFund | null>(
      store.get_in_block("UpdateActiveFund", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateActiveFund | null {
    return changetype<UpdateActiveFund | null>(
      store.get("UpdateActiveFund", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get fundId(): BigInt {
    let value = this.get("fundId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundId(value: BigInt) {
    this.set("fundId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateIndexFundState extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateIndexFundState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateIndexFundState must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateIndexFundState", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateIndexFundState | null {
    return changetype<UpdateIndexFundState | null>(
      store.get_in_block("UpdateIndexFundState", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateIndexFundState | null {
    return changetype<UpdateIndexFundState | null>(
      store.get("UpdateIndexFundState", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get state_totalFunds(): BigInt {
    let value = this.get("state_totalFunds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set state_totalFunds(value: BigInt) {
    this.set("state_totalFunds", Value.fromBigInt(value));
  }

  get state_activeFund(): BigInt {
    let value = this.get("state_activeFund");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set state_activeFund(value: BigInt) {
    this.set("state_activeFund", Value.fromBigInt(value));
  }

  get state_roundDonations(): BigInt {
    let value = this.get("state_roundDonations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set state_roundDonations(value: BigInt) {
    this.set("state_roundDonations", Value.fromBigInt(value));
  }

  get state_nextRotationBlock(): BigInt {
    let value = this.get("state_nextRotationBlock");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set state_nextRotationBlock(value: BigInt) {
    this.set("state_nextRotationBlock", Value.fromBigInt(value));
  }

  get state_nextFundId(): BigInt {
    let value = this.get("state_nextFundId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set state_nextFundId(value: BigInt) {
    this.set("state_nextFundId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Confirmation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Confirmation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Confirmation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Confirmation", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Confirmation | null {
    return changetype<Confirmation | null>(
      store.get_in_block("Confirmation", id.toHexString())
    );
  }

  static load(id: Bytes): Confirmation | null {
    return changetype<Confirmation | null>(
      store.get("Confirmation", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ApplicationsMultiSigDeposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ApplicationsMultiSigDeposit entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ApplicationsMultiSigDeposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ApplicationsMultiSigDeposit",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): ApplicationsMultiSigDeposit | null {
    return changetype<ApplicationsMultiSigDeposit | null>(
      store.get_in_block("ApplicationsMultiSigDeposit", id.toHexString())
    );
  }

  static load(id: Bytes): ApplicationsMultiSigDeposit | null {
    return changetype<ApplicationsMultiSigDeposit | null>(
      store.get("ApplicationsMultiSigDeposit", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Execution extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Execution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Execution must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Execution", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Execution | null {
    return changetype<Execution | null>(
      store.get_in_block("Execution", id.toHexString())
    );
  }

  static load(id: Bytes): Execution | null {
    return changetype<Execution | null>(
      store.get("Execution", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ExecutionFailure extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExecutionFailure entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ExecutionFailure must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecutionFailure", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ExecutionFailure | null {
    return changetype<ExecutionFailure | null>(
      store.get_in_block("ExecutionFailure", id.toHexString())
    );
  }

  static load(id: Bytes): ExecutionFailure | null {
    return changetype<ExecutionFailure | null>(
      store.get("ExecutionFailure", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ExecutionRequiredChange extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ExecutionRequiredChange entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ExecutionRequiredChange must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecutionRequiredChange", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ExecutionRequiredChange | null {
    return changetype<ExecutionRequiredChange | null>(
      store.get_in_block("ExecutionRequiredChange", id.toHexString())
    );
  }

  static load(id: Bytes): ExecutionRequiredChange | null {
    return changetype<ExecutionRequiredChange | null>(
      store.get("ExecutionRequiredChange", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get requireExecution(): boolean {
    let value = this.get("requireExecution");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set requireExecution(value: boolean) {
    this.set("requireExecution", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ApplicationsMultiSigInitialized extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ApplicationsMultiSigInitialized entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ApplicationsMultiSigInitialized must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ApplicationsMultiSigInitialized",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): ApplicationsMultiSigInitialized | null {
    return changetype<ApplicationsMultiSigInitialized | null>(
      store.get_in_block("ApplicationsMultiSigInitialized", id.toHexString())
    );
  }

  static load(id: Bytes): ApplicationsMultiSigInitialized | null {
    return changetype<ApplicationsMultiSigInitialized | null>(
      store.get("ApplicationsMultiSigInitialized", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get version(): i32 {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnerAddition extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnerAddition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OwnerAddition must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnerAddition", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OwnerAddition | null {
    return changetype<OwnerAddition | null>(
      store.get_in_block("OwnerAddition", id.toHexString())
    );
  }

  static load(id: Bytes): OwnerAddition | null {
    return changetype<OwnerAddition | null>(
      store.get("OwnerAddition", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnerRemoval extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnerRemoval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OwnerRemoval must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnerRemoval", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OwnerRemoval | null {
    return changetype<OwnerRemoval | null>(
      store.get_in_block("OwnerRemoval", id.toHexString())
    );
  }

  static load(id: Bytes): OwnerRemoval | null {
    return changetype<OwnerRemoval | null>(
      store.get("OwnerRemoval", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RequirementChange extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RequirementChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RequirementChange must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RequirementChange", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RequirementChange | null {
    return changetype<RequirementChange | null>(
      store.get_in_block("RequirementChange", id.toHexString())
    );
  }

  static load(id: Bytes): RequirementChange | null {
    return changetype<RequirementChange | null>(
      store.get("RequirementChange", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get required(): BigInt {
    let value = this.get("required");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set required(value: BigInt) {
    this.set("required", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Revocation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Revocation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Revocation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Revocation", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Revocation | null {
    return changetype<Revocation | null>(
      store.get_in_block("Revocation", id.toHexString())
    );
  }

  static load(id: Bytes): Revocation | null {
    return changetype<Revocation | null>(
      store.get("Revocation", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Submission extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Submission entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Submission must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Submission", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Submission | null {
    return changetype<Submission | null>(
      store.get_in_block("Submission", id.toHexString())
    );
  }

  static load(id: Bytes): Submission | null {
    return changetype<Submission | null>(
      store.get("Submission", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get transaction_title(): string {
    let value = this.get("transaction_title");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction_title(value: string) {
    this.set("transaction_title", Value.fromString(value));
  }

  get transaction_description(): string {
    let value = this.get("transaction_description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction_description(value: string) {
    this.set("transaction_description", Value.fromString(value));
  }

  get transaction_destination(): Bytes {
    let value = this.get("transaction_destination");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction_destination(value: Bytes) {
    this.set("transaction_destination", Value.fromBytes(value));
  }

  get transaction_value(): BigInt {
    let value = this.get("transaction_value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transaction_value(value: BigInt) {
    this.set("transaction_value", Value.fromBigInt(value));
  }

  get transaction_data(): Bytes {
    let value = this.get("transaction_data");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction_data(value: Bytes) {
    this.set("transaction_data", Value.fromBytes(value));
  }

  get transaction_executed(): boolean {
    let value = this.get("transaction_executed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set transaction_executed(value: boolean) {
    this.set("transaction_executed", Value.fromBoolean(value));
  }

  get transaction_metadata(): Bytes {
    let value = this.get("transaction_metadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction_metadata(value: Bytes) {
    this.set("transaction_metadata", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ContractInstantiation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ContractInstantiation entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ContractInstantiation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContractInstantiation", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ContractInstantiation | null {
    return changetype<ContractInstantiation | null>(
      store.get_in_block("ContractInstantiation", id.toHexString())
    );
  }

  static load(id: Bytes): ContractInstantiation | null {
    return changetype<ContractInstantiation | null>(
      store.get("ContractInstantiation", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get instantiation(): Bytes {
    let value = this.get("instantiation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set instantiation(value: Bytes) {
    this.set("instantiation", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnershipTransferred", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get_in_block("OwnershipTransferred", id.toHexString())
    );
  }

  static load(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentMultiSigConfirmation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentMultiSigConfirmation entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentMultiSigConfirmation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "EndowmentMultiSigConfirmation",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): EndowmentMultiSigConfirmation | null {
    return changetype<EndowmentMultiSigConfirmation | null>(
      store.get_in_block("EndowmentMultiSigConfirmation", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentMultiSigConfirmation | null {
    return changetype<EndowmentMultiSigConfirmation | null>(
      store.get("EndowmentMultiSigConfirmation", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentMultiSigDeposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentMultiSigDeposit entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentMultiSigDeposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentMultiSigDeposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentMultiSigDeposit | null {
    return changetype<EndowmentMultiSigDeposit | null>(
      store.get_in_block("EndowmentMultiSigDeposit", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentMultiSigDeposit | null {
    return changetype<EndowmentMultiSigDeposit | null>(
      store.get("EndowmentMultiSigDeposit", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentMultiSigExecution extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentMultiSigExecution entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentMultiSigExecution must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentMultiSigExecution", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentMultiSigExecution | null {
    return changetype<EndowmentMultiSigExecution | null>(
      store.get_in_block("EndowmentMultiSigExecution", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentMultiSigExecution | null {
    return changetype<EndowmentMultiSigExecution | null>(
      store.get("EndowmentMultiSigExecution", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentMultiSigExecutionFailure extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentMultiSigExecutionFailure entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentMultiSigExecutionFailure must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "EndowmentMultiSigExecutionFailure",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): EndowmentMultiSigExecutionFailure | null {
    return changetype<EndowmentMultiSigExecutionFailure | null>(
      store.get_in_block("EndowmentMultiSigExecutionFailure", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentMultiSigExecutionFailure | null {
    return changetype<EndowmentMultiSigExecutionFailure | null>(
      store.get("EndowmentMultiSigExecutionFailure", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentMultiSigExecutionRequiredChange extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentMultiSigExecutionRequiredChange entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentMultiSigExecutionRequiredChange must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "EndowmentMultiSigExecutionRequiredChange",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(
    id: Bytes
  ): EndowmentMultiSigExecutionRequiredChange | null {
    return changetype<EndowmentMultiSigExecutionRequiredChange | null>(
      store.get_in_block(
        "EndowmentMultiSigExecutionRequiredChange",
        id.toHexString()
      )
    );
  }

  static load(id: Bytes): EndowmentMultiSigExecutionRequiredChange | null {
    return changetype<EndowmentMultiSigExecutionRequiredChange | null>(
      store.get("EndowmentMultiSigExecutionRequiredChange", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get requireExecution(): boolean {
    let value = this.get("requireExecution");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set requireExecution(value: boolean) {
    this.set("requireExecution", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentMultiSigInitialized extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentMultiSigInitialized entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentMultiSigInitialized must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "EndowmentMultiSigInitialized",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): EndowmentMultiSigInitialized | null {
    return changetype<EndowmentMultiSigInitialized | null>(
      store.get_in_block("EndowmentMultiSigInitialized", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentMultiSigInitialized | null {
    return changetype<EndowmentMultiSigInitialized | null>(
      store.get("EndowmentMultiSigInitialized", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get version(): i32 {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentMultiSigOwnerAddition extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentMultiSigOwnerAddition entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentMultiSigOwnerAddition must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "EndowmentMultiSigOwnerAddition",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): EndowmentMultiSigOwnerAddition | null {
    return changetype<EndowmentMultiSigOwnerAddition | null>(
      store.get_in_block("EndowmentMultiSigOwnerAddition", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentMultiSigOwnerAddition | null {
    return changetype<EndowmentMultiSigOwnerAddition | null>(
      store.get("EndowmentMultiSigOwnerAddition", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentMultiSigOwnerRemoval extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentMultiSigOwnerRemoval entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentMultiSigOwnerRemoval must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "EndowmentMultiSigOwnerRemoval",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): EndowmentMultiSigOwnerRemoval | null {
    return changetype<EndowmentMultiSigOwnerRemoval | null>(
      store.get_in_block("EndowmentMultiSigOwnerRemoval", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentMultiSigOwnerRemoval | null {
    return changetype<EndowmentMultiSigOwnerRemoval | null>(
      store.get("EndowmentMultiSigOwnerRemoval", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentMultiSigRequirementChange extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentMultiSigRequirementChange entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentMultiSigRequirementChange must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "EndowmentMultiSigRequirementChange",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): EndowmentMultiSigRequirementChange | null {
    return changetype<EndowmentMultiSigRequirementChange | null>(
      store.get_in_block("EndowmentMultiSigRequirementChange", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentMultiSigRequirementChange | null {
    return changetype<EndowmentMultiSigRequirementChange | null>(
      store.get("EndowmentMultiSigRequirementChange", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get required(): BigInt {
    let value = this.get("required");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set required(value: BigInt) {
    this.set("required", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentMultiSigRevocation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentMultiSigRevocation entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentMultiSigRevocation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "EndowmentMultiSigRevocation",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): EndowmentMultiSigRevocation | null {
    return changetype<EndowmentMultiSigRevocation | null>(
      store.get_in_block("EndowmentMultiSigRevocation", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentMultiSigRevocation | null {
    return changetype<EndowmentMultiSigRevocation | null>(
      store.get("EndowmentMultiSigRevocation", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentMultiSigSubmission extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentMultiSigSubmission entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentMultiSigSubmission must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "EndowmentMultiSigSubmission",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): EndowmentMultiSigSubmission | null {
    return changetype<EndowmentMultiSigSubmission | null>(
      store.get_in_block("EndowmentMultiSigSubmission", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentMultiSigSubmission | null {
    return changetype<EndowmentMultiSigSubmission | null>(
      store.get("EndowmentMultiSigSubmission", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get transaction_title(): string {
    let value = this.get("transaction_title");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction_title(value: string) {
    this.set("transaction_title", Value.fromString(value));
  }

  get transaction_description(): string {
    let value = this.get("transaction_description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction_description(value: string) {
    this.set("transaction_description", Value.fromString(value));
  }

  get transaction_destination(): Bytes {
    let value = this.get("transaction_destination");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction_destination(value: Bytes) {
    this.set("transaction_destination", Value.fromBytes(value));
  }

  get transaction_value(): BigInt {
    let value = this.get("transaction_value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transaction_value(value: BigInt) {
    this.set("transaction_value", Value.fromBigInt(value));
  }

  get transaction_data(): Bytes {
    let value = this.get("transaction_data");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction_data(value: Bytes) {
    this.set("transaction_data", Value.fromBytes(value));
  }

  get transaction_executed(): boolean {
    let value = this.get("transaction_executed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set transaction_executed(value: boolean) {
    this.set("transaction_executed", Value.fromBoolean(value));
  }

  get transaction_metadata(): Bytes {
    let value = this.get("transaction_metadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction_metadata(value: Bytes) {
    this.set("transaction_metadata", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class APTeamMultiSigConfirmation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save APTeamMultiSigConfirmation entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type APTeamMultiSigConfirmation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("APTeamMultiSigConfirmation", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): APTeamMultiSigConfirmation | null {
    return changetype<APTeamMultiSigConfirmation | null>(
      store.get_in_block("APTeamMultiSigConfirmation", id.toHexString())
    );
  }

  static load(id: Bytes): APTeamMultiSigConfirmation | null {
    return changetype<APTeamMultiSigConfirmation | null>(
      store.get("APTeamMultiSigConfirmation", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class APTeamMultiSigDeposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save APTeamMultiSigDeposit entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type APTeamMultiSigDeposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("APTeamMultiSigDeposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): APTeamMultiSigDeposit | null {
    return changetype<APTeamMultiSigDeposit | null>(
      store.get_in_block("APTeamMultiSigDeposit", id.toHexString())
    );
  }

  static load(id: Bytes): APTeamMultiSigDeposit | null {
    return changetype<APTeamMultiSigDeposit | null>(
      store.get("APTeamMultiSigDeposit", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class APTeamMultiSigExecution extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save APTeamMultiSigExecution entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type APTeamMultiSigExecution must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("APTeamMultiSigExecution", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): APTeamMultiSigExecution | null {
    return changetype<APTeamMultiSigExecution | null>(
      store.get_in_block("APTeamMultiSigExecution", id.toHexString())
    );
  }

  static load(id: Bytes): APTeamMultiSigExecution | null {
    return changetype<APTeamMultiSigExecution | null>(
      store.get("APTeamMultiSigExecution", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class APTeamMultiSigExecutionFailure extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save APTeamMultiSigExecutionFailure entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type APTeamMultiSigExecutionFailure must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "APTeamMultiSigExecutionFailure",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): APTeamMultiSigExecutionFailure | null {
    return changetype<APTeamMultiSigExecutionFailure | null>(
      store.get_in_block("APTeamMultiSigExecutionFailure", id.toHexString())
    );
  }

  static load(id: Bytes): APTeamMultiSigExecutionFailure | null {
    return changetype<APTeamMultiSigExecutionFailure | null>(
      store.get("APTeamMultiSigExecutionFailure", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class APTeamMultiSigExecutionRequiredChange extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save APTeamMultiSigExecutionRequiredChange entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type APTeamMultiSigExecutionRequiredChange must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "APTeamMultiSigExecutionRequiredChange",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): APTeamMultiSigExecutionRequiredChange | null {
    return changetype<APTeamMultiSigExecutionRequiredChange | null>(
      store.get_in_block(
        "APTeamMultiSigExecutionRequiredChange",
        id.toHexString()
      )
    );
  }

  static load(id: Bytes): APTeamMultiSigExecutionRequiredChange | null {
    return changetype<APTeamMultiSigExecutionRequiredChange | null>(
      store.get("APTeamMultiSigExecutionRequiredChange", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get requireExecution(): boolean {
    let value = this.get("requireExecution");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set requireExecution(value: boolean) {
    this.set("requireExecution", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class APTeamMultiSigInitialized extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save APTeamMultiSigInitialized entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type APTeamMultiSigInitialized must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("APTeamMultiSigInitialized", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): APTeamMultiSigInitialized | null {
    return changetype<APTeamMultiSigInitialized | null>(
      store.get_in_block("APTeamMultiSigInitialized", id.toHexString())
    );
  }

  static load(id: Bytes): APTeamMultiSigInitialized | null {
    return changetype<APTeamMultiSigInitialized | null>(
      store.get("APTeamMultiSigInitialized", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get version(): i32 {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class APTeamMultiSigOwnerAddition extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save APTeamMultiSigOwnerAddition entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type APTeamMultiSigOwnerAddition must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "APTeamMultiSigOwnerAddition",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): APTeamMultiSigOwnerAddition | null {
    return changetype<APTeamMultiSigOwnerAddition | null>(
      store.get_in_block("APTeamMultiSigOwnerAddition", id.toHexString())
    );
  }

  static load(id: Bytes): APTeamMultiSigOwnerAddition | null {
    return changetype<APTeamMultiSigOwnerAddition | null>(
      store.get("APTeamMultiSigOwnerAddition", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class APTeamMultiSigOwnerRemoval extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save APTeamMultiSigOwnerRemoval entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type APTeamMultiSigOwnerRemoval must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("APTeamMultiSigOwnerRemoval", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): APTeamMultiSigOwnerRemoval | null {
    return changetype<APTeamMultiSigOwnerRemoval | null>(
      store.get_in_block("APTeamMultiSigOwnerRemoval", id.toHexString())
    );
  }

  static load(id: Bytes): APTeamMultiSigOwnerRemoval | null {
    return changetype<APTeamMultiSigOwnerRemoval | null>(
      store.get("APTeamMultiSigOwnerRemoval", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class APTeamMultiSigRequirementChange extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save APTeamMultiSigRequirementChange entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type APTeamMultiSigRequirementChange must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "APTeamMultiSigRequirementChange",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): APTeamMultiSigRequirementChange | null {
    return changetype<APTeamMultiSigRequirementChange | null>(
      store.get_in_block("APTeamMultiSigRequirementChange", id.toHexString())
    );
  }

  static load(id: Bytes): APTeamMultiSigRequirementChange | null {
    return changetype<APTeamMultiSigRequirementChange | null>(
      store.get("APTeamMultiSigRequirementChange", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get required(): BigInt {
    let value = this.get("required");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set required(value: BigInt) {
    this.set("required", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class APTeamMultiSigRevocation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save APTeamMultiSigRevocation entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type APTeamMultiSigRevocation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("APTeamMultiSigRevocation", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): APTeamMultiSigRevocation | null {
    return changetype<APTeamMultiSigRevocation | null>(
      store.get_in_block("APTeamMultiSigRevocation", id.toHexString())
    );
  }

  static load(id: Bytes): APTeamMultiSigRevocation | null {
    return changetype<APTeamMultiSigRevocation | null>(
      store.get("APTeamMultiSigRevocation", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class APTeamMultiSigSubmission extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save APTeamMultiSigSubmission entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type APTeamMultiSigSubmission must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("APTeamMultiSigSubmission", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): APTeamMultiSigSubmission | null {
    return changetype<APTeamMultiSigSubmission | null>(
      store.get_in_block("APTeamMultiSigSubmission", id.toHexString())
    );
  }

  static load(id: Bytes): APTeamMultiSigSubmission | null {
    return changetype<APTeamMultiSigSubmission | null>(
      store.get("APTeamMultiSigSubmission", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get transactionId(): BigInt {
    let value = this.get("transactionId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transactionId(value: BigInt) {
    this.set("transactionId", Value.fromBigInt(value));
  }

  get transaction_title(): string {
    let value = this.get("transaction_title");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction_title(value: string) {
    this.set("transaction_title", Value.fromString(value));
  }

  get transaction_description(): string {
    let value = this.get("transaction_description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transaction_description(value: string) {
    this.set("transaction_description", Value.fromString(value));
  }

  get transaction_destination(): Bytes {
    let value = this.get("transaction_destination");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction_destination(value: Bytes) {
    this.set("transaction_destination", Value.fromBytes(value));
  }

  get transaction_value(): BigInt {
    let value = this.get("transaction_value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transaction_value(value: BigInt) {
    this.set("transaction_value", Value.fromBigInt(value));
  }

  get transaction_data(): Bytes {
    let value = this.get("transaction_data");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction_data(value: Bytes) {
    this.set("transaction_data", Value.fromBytes(value));
  }

  get transaction_executed(): boolean {
    let value = this.get("transaction_executed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set transaction_executed(value: boolean) {
    this.set("transaction_executed", Value.fromBoolean(value));
  }

  get transaction_metadata(): Bytes {
    let value = this.get("transaction_metadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction_metadata(value: Bytes) {
    this.set("transaction_metadata", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AccountsContractStorageChanged extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AccountsContractStorageChanged entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AccountsContractStorageChanged must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "AccountsContractStorageChanged",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): AccountsContractStorageChanged | null {
    return changetype<AccountsContractStorageChanged | null>(
      store.get_in_block("AccountsContractStorageChanged", id.toHexString())
    );
  }

  static load(id: Bytes): AccountsContractStorageChanged | null {
    return changetype<AccountsContractStorageChanged | null>(
      store.get("AccountsContractStorageChanged", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _chainName(): string {
    let value = this.get("_chainName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set _chainName(value: string) {
    this.set("_chainName", Value.fromString(value));
  }

  get _accountsContractAddress(): string {
    let value = this.get("_accountsContractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set _accountsContractAddress(value: string) {
    this.set("_accountsContractAddress", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AngelProtocolParamsChanged extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AngelProtocolParamsChanged entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AngelProtocolParamsChanged must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AngelProtocolParamsChanged", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AngelProtocolParamsChanged | null {
    return changetype<AngelProtocolParamsChanged | null>(
      store.get_in_block("AngelProtocolParamsChanged", id.toHexString())
    );
  }

  static load(id: Bytes): AngelProtocolParamsChanged | null {
    return changetype<AngelProtocolParamsChanged | null>(
      store.get("AngelProtocolParamsChanged", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _newAngelProtocolParams_routerAddr(): Bytes {
    let value = this.get("_newAngelProtocolParams_routerAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _newAngelProtocolParams_routerAddr(value: Bytes) {
    this.set("_newAngelProtocolParams_routerAddr", Value.fromBytes(value));
  }

  get _newAngelProtocolParams_refundAddr(): Bytes {
    let value = this.get("_newAngelProtocolParams_refundAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _newAngelProtocolParams_refundAddr(value: Bytes) {
    this.set("_newAngelProtocolParams_refundAddr", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DeleteNetworkConnection extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DeleteNetworkConnection entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DeleteNetworkConnection must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DeleteNetworkConnection", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DeleteNetworkConnection | null {
    return changetype<DeleteNetworkConnection | null>(
      store.get_in_block("DeleteNetworkConnection", id.toHexString())
    );
  }

  static load(id: Bytes): DeleteNetworkConnection | null {
    return changetype<DeleteNetworkConnection | null>(
      store.get("DeleteNetworkConnection", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FeeUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FeeUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): FeeUpdated | null {
    return changetype<FeeUpdated | null>(
      store.get_in_block("FeeUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): FeeUpdated | null {
    return changetype<FeeUpdated | null>(
      store.get("FeeUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _fee(): i32 {
    let value = this.get("_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set _fee(value: i32) {
    this.set("_fee", Value.fromI32(value));
  }

  get _rate(): BigInt {
    let value = this.get("_rate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _rate(value: BigInt) {
    this.set("_rate", Value.fromBigInt(value));
  }

  get _payout(): Bytes {
    let value = this.get("_payout");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _payout(value: Bytes) {
    this.set("_payout", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class GasFeeUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GasFeeUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GasFeeUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GasFeeUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GasFeeUpdated | null {
    return changetype<GasFeeUpdated | null>(
      store.get_in_block("GasFeeUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): GasFeeUpdated | null {
    return changetype<GasFeeUpdated | null>(
      store.get("GasFeeUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _tokenAddr(): Bytes {
    let value = this.get("_tokenAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _tokenAddr(value: Bytes) {
    this.set("_tokenAddr", Value.fromBytes(value));
  }

  get _gasFee(): BigInt {
    let value = this.get("_gasFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _gasFee(value: BigInt) {
    this.set("_gasFee", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RegistrarInitialized extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RegistrarInitialized entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RegistrarInitialized must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RegistrarInitialized", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RegistrarInitialized | null {
    return changetype<RegistrarInitialized | null>(
      store.get_in_block("RegistrarInitialized", id.toHexString())
    );
  }

  static load(id: Bytes): RegistrarInitialized | null {
    return changetype<RegistrarInitialized | null>(
      store.get("RegistrarInitialized", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get version(): i32 {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RegistrarOwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RegistrarOwnershipTransferred entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RegistrarOwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "RegistrarOwnershipTransferred",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static loadInBlock(id: Bytes): RegistrarOwnershipTransferred | null {
    return changetype<RegistrarOwnershipTransferred | null>(
      store.get_in_block("RegistrarOwnershipTransferred", id.toHexString())
    );
  }

  static load(id: Bytes): RegistrarOwnershipTransferred | null {
    return changetype<RegistrarOwnershipTransferred | null>(
      store.get("RegistrarOwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class PostNetworkConnection extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save PostNetworkConnection entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PostNetworkConnection must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PostNetworkConnection", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PostNetworkConnection | null {
    return changetype<PostNetworkConnection | null>(
      store.get_in_block("PostNetworkConnection", id.toHexString())
    );
  }

  static load(id: Bytes): PostNetworkConnection | null {
    return changetype<PostNetworkConnection | null>(
      store.get("PostNetworkConnection", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }

  get networkInfo_name(): string {
    let value = this.get("networkInfo_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set networkInfo_name(value: string) {
    this.set("networkInfo_name", Value.fromString(value));
  }

  get networkInfo_chainId(): BigInt {
    let value = this.get("networkInfo_chainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set networkInfo_chainId(value: BigInt) {
    this.set("networkInfo_chainId", Value.fromBigInt(value));
  }

  get networkInfo_router(): Bytes {
    let value = this.get("networkInfo_router");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set networkInfo_router(value: Bytes) {
    this.set("networkInfo_router", Value.fromBytes(value));
  }

  get networkInfo_axelarGateway(): Bytes {
    let value = this.get("networkInfo_axelarGateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set networkInfo_axelarGateway(value: Bytes) {
    this.set("networkInfo_axelarGateway", Value.fromBytes(value));
  }

  get networkInfo_ibcChannel(): string {
    let value = this.get("networkInfo_ibcChannel");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set networkInfo_ibcChannel(value: string) {
    this.set("networkInfo_ibcChannel", Value.fromString(value));
  }

  get networkInfo_transferChannel(): string {
    let value = this.get("networkInfo_transferChannel");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set networkInfo_transferChannel(value: string) {
    this.set("networkInfo_transferChannel", Value.fromString(value));
  }

  get networkInfo_gasReceiver(): Bytes {
    let value = this.get("networkInfo_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set networkInfo_gasReceiver(value: Bytes) {
    this.set("networkInfo_gasReceiver", Value.fromBytes(value));
  }

  get networkInfo_gasLimit(): BigInt {
    let value = this.get("networkInfo_gasLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set networkInfo_gasLimit(value: BigInt) {
    this.set("networkInfo_gasLimit", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RebalanceParamsChanged extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RebalanceParamsChanged entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RebalanceParamsChanged must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RebalanceParamsChanged", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RebalanceParamsChanged | null {
    return changetype<RebalanceParamsChanged | null>(
      store.get_in_block("RebalanceParamsChanged", id.toHexString())
    );
  }

  static load(id: Bytes): RebalanceParamsChanged | null {
    return changetype<RebalanceParamsChanged | null>(
      store.get("RebalanceParamsChanged", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _newRebalanceParams_rebalanceLiquidProfits(): boolean {
    let value = this.get("_newRebalanceParams_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set _newRebalanceParams_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "_newRebalanceParams_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get _newRebalanceParams_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("_newRebalanceParams_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _newRebalanceParams_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "_newRebalanceParams_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get _newRebalanceParams_interestDistribution(): BigInt {
    let value = this.get("_newRebalanceParams_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _newRebalanceParams_interestDistribution(value: BigInt) {
    this.set(
      "_newRebalanceParams_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get _newRebalanceParams_lockedPrincipleToLiquid(): boolean {
    let value = this.get("_newRebalanceParams_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set _newRebalanceParams_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "_newRebalanceParams_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get _newRebalanceParams_principleDistribution(): BigInt {
    let value = this.get("_newRebalanceParams_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _newRebalanceParams_principleDistribution(value: BigInt) {
    this.set(
      "_newRebalanceParams_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get _newRebalanceParams_basis(): BigInt {
    let value = this.get("_newRebalanceParams_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _newRebalanceParams_basis(value: BigInt) {
    this.set("_newRebalanceParams_basis", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class StrategyApprovalChanged extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save StrategyApprovalChanged entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type StrategyApprovalChanged must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StrategyApprovalChanged", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): StrategyApprovalChanged | null {
    return changetype<StrategyApprovalChanged | null>(
      store.get_in_block("StrategyApprovalChanged", id.toHexString())
    );
  }

  static load(id: Bytes): StrategyApprovalChanged | null {
    return changetype<StrategyApprovalChanged | null>(
      store.get("StrategyApprovalChanged", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _strategyId(): Bytes {
    let value = this.get("_strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _strategyId(value: Bytes) {
    this.set("_strategyId", Value.fromBytes(value));
  }

  get _approvalState(): i32 {
    let value = this.get("_approvalState");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set _approvalState(value: i32) {
    this.set("_approvalState", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class StrategyParamsChanged extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save StrategyParamsChanged entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type StrategyParamsChanged must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StrategyParamsChanged", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): StrategyParamsChanged | null {
    return changetype<StrategyParamsChanged | null>(
      store.get_in_block("StrategyParamsChanged", id.toHexString())
    );
  }

  static load(id: Bytes): StrategyParamsChanged | null {
    return changetype<StrategyParamsChanged | null>(
      store.get("StrategyParamsChanged", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _strategyId(): Bytes {
    let value = this.get("_strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _strategyId(value: Bytes) {
    this.set("_strategyId", Value.fromBytes(value));
  }

  get _lockAddr(): Bytes {
    let value = this.get("_lockAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _lockAddr(value: Bytes) {
    this.set("_lockAddr", Value.fromBytes(value));
  }

  get _liqAddr(): Bytes {
    let value = this.get("_liqAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _liqAddr(value: Bytes) {
    this.set("_liqAddr", Value.fromBytes(value));
  }

  get _approvalState(): i32 {
    let value = this.get("_approvalState");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set _approvalState(value: i32) {
    this.set("_approvalState", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TokenAcceptanceChanged extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save TokenAcceptanceChanged entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenAcceptanceChanged must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenAcceptanceChanged", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TokenAcceptanceChanged | null {
    return changetype<TokenAcceptanceChanged | null>(
      store.get_in_block("TokenAcceptanceChanged", id.toHexString())
    );
  }

  static load(id: Bytes): TokenAcceptanceChanged | null {
    return changetype<TokenAcceptanceChanged | null>(
      store.get("TokenAcceptanceChanged", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _tokenAddr(): Bytes {
    let value = this.get("_tokenAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set _tokenAddr(value: Bytes) {
    this.set("_tokenAddr", Value.fromBytes(value));
  }

  get _isAccepted(): boolean {
    let value = this.get("_isAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set _isAccepted(value: boolean) {
    this.set("_isAccepted", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateRegistrarConfig extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UpdateRegistrarConfig entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateRegistrarConfig must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateRegistrarConfig", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateRegistrarConfig | null {
    return changetype<UpdateRegistrarConfig | null>(
      store.get_in_block("UpdateRegistrarConfig", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateRegistrarConfig | null {
    return changetype<UpdateRegistrarConfig | null>(
      store.get("UpdateRegistrarConfig", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get details_applicationsReview(): Bytes {
    let value = this.get("details_applicationsReview");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_applicationsReview(value: Bytes) {
    this.set("details_applicationsReview", Value.fromBytes(value));
  }

  get details_indexFundContract(): Bytes {
    let value = this.get("details_indexFundContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_indexFundContract(value: Bytes) {
    this.set("details_indexFundContract", Value.fromBytes(value));
  }

  get details_accountsContract(): Bytes {
    let value = this.get("details_accountsContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_accountsContract(value: Bytes) {
    this.set("details_accountsContract", Value.fromBytes(value));
  }

  get details_treasury(): Bytes {
    let value = this.get("details_treasury");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_treasury(value: Bytes) {
    this.set("details_treasury", Value.fromBytes(value));
  }

  get details_subdaoGovContract(): Bytes {
    let value = this.get("details_subdaoGovContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_subdaoGovContract(value: Bytes) {
    this.set("details_subdaoGovContract", Value.fromBytes(value));
  }

  get details_subdaoTokenContract(): Bytes {
    let value = this.get("details_subdaoTokenContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_subdaoTokenContract(value: Bytes) {
    this.set("details_subdaoTokenContract", Value.fromBytes(value));
  }

  get details_subdaoBondingTokenContract(): Bytes {
    let value = this.get("details_subdaoBondingTokenContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_subdaoBondingTokenContract(value: Bytes) {
    this.set("details_subdaoBondingTokenContract", Value.fromBytes(value));
  }

  get details_subdaoCw900Contract(): Bytes {
    let value = this.get("details_subdaoCw900Contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_subdaoCw900Contract(value: Bytes) {
    this.set("details_subdaoCw900Contract", Value.fromBytes(value));
  }

  get details_subdaoDistributorContract(): Bytes {
    let value = this.get("details_subdaoDistributorContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_subdaoDistributorContract(value: Bytes) {
    this.set("details_subdaoDistributorContract", Value.fromBytes(value));
  }

  get details_subdaoEmitter(): Bytes {
    let value = this.get("details_subdaoEmitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_subdaoEmitter(value: Bytes) {
    this.set("details_subdaoEmitter", Value.fromBytes(value));
  }

  get details_donationMatchContract(): Bytes {
    let value = this.get("details_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_donationMatchContract(value: Bytes) {
    this.set("details_donationMatchContract", Value.fromBytes(value));
  }

  get details_donationMatchCharitesContract(): Bytes {
    let value = this.get("details_donationMatchCharitesContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_donationMatchCharitesContract(value: Bytes) {
    this.set("details_donationMatchCharitesContract", Value.fromBytes(value));
  }

  get details_donationMatchEmitter(): Bytes {
    let value = this.get("details_donationMatchEmitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_donationMatchEmitter(value: Bytes) {
    this.set("details_donationMatchEmitter", Value.fromBytes(value));
  }

  get details_splitToLiquid_max(): BigInt {
    let value = this.get("details_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set details_splitToLiquid_max(value: BigInt) {
    this.set("details_splitToLiquid_max", Value.fromBigInt(value));
  }

  get details_splitToLiquid_min(): BigInt {
    let value = this.get("details_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set details_splitToLiquid_min(value: BigInt) {
    this.set("details_splitToLiquid_min", Value.fromBigInt(value));
  }

  get details_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("details_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set details_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("details_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get details_haloToken(): Bytes {
    let value = this.get("details_haloToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_haloToken(value: Bytes) {
    this.set("details_haloToken", Value.fromBytes(value));
  }

  get details_haloTokenLpContract(): Bytes {
    let value = this.get("details_haloTokenLpContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_haloTokenLpContract(value: Bytes) {
    this.set("details_haloTokenLpContract", Value.fromBytes(value));
  }

  get details_govContract(): Bytes {
    let value = this.get("details_govContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_govContract(value: Bytes) {
    this.set("details_govContract", Value.fromBytes(value));
  }

  get details_collectorShare(): BigInt {
    let value = this.get("details_collectorShare");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set details_collectorShare(value: BigInt) {
    this.set("details_collectorShare", Value.fromBigInt(value));
  }

  get details_charitySharesContract(): Bytes {
    let value = this.get("details_charitySharesContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_charitySharesContract(value: Bytes) {
    this.set("details_charitySharesContract", Value.fromBytes(value));
  }

  get details_fundraisingContract(): Bytes {
    let value = this.get("details_fundraisingContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_fundraisingContract(value: Bytes) {
    this.set("details_fundraisingContract", Value.fromBytes(value));
  }

  get details_uniswapSwapRouter(): Bytes {
    let value = this.get("details_uniswapSwapRouter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_uniswapSwapRouter(value: Bytes) {
    this.set("details_uniswapSwapRouter", Value.fromBytes(value));
  }

  get details_multisigFactory(): Bytes {
    let value = this.get("details_multisigFactory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_multisigFactory(value: Bytes) {
    this.set("details_multisigFactory", Value.fromBytes(value));
  }

  get details_multisigEmitter(): Bytes {
    let value = this.get("details_multisigEmitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_multisigEmitter(value: Bytes) {
    this.set("details_multisigEmitter", Value.fromBytes(value));
  }

  get details_charityProposal(): Bytes {
    let value = this.get("details_charityProposal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_charityProposal(value: Bytes) {
    this.set("details_charityProposal", Value.fromBytes(value));
  }

  get details_lockedWithdrawal(): Bytes {
    let value = this.get("details_lockedWithdrawal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_lockedWithdrawal(value: Bytes) {
    this.set("details_lockedWithdrawal", Value.fromBytes(value));
  }

  get details_proxyAdmin(): Bytes {
    let value = this.get("details_proxyAdmin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_proxyAdmin(value: Bytes) {
    this.set("details_proxyAdmin", Value.fromBytes(value));
  }

  get details_usdcAddress(): Bytes {
    let value = this.get("details_usdcAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_usdcAddress(value: Bytes) {
    this.set("details_usdcAddress", Value.fromBytes(value));
  }

  get details_wMaticAddress(): Bytes {
    let value = this.get("details_wMaticAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_wMaticAddress(value: Bytes) {
    this.set("details_wMaticAddress", Value.fromBytes(value));
  }

  get details_cw900lvAddress(): Bytes {
    let value = this.get("details_cw900lvAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set details_cw900lvAddress(value: Bytes) {
    this.set("details_cw900lvAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RouterDeposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RouterDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RouterDeposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RouterDeposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RouterDeposit | null {
    return changetype<RouterDeposit | null>(
      store.get_in_block("RouterDeposit", id.toHexString())
    );
  }

  static load(id: Bytes): RouterDeposit | null {
    return changetype<RouterDeposit | null>(
      store.get("RouterDeposit", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get action_destinationChain(): string {
    let value = this.get("action_destinationChain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action_destinationChain(value: string) {
    this.set("action_destinationChain", Value.fromString(value));
  }

  get action_strategyId(): Bytes {
    let value = this.get("action_strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_strategyId(value: Bytes) {
    this.set("action_strategyId", Value.fromBytes(value));
  }

  get action_selector(): Bytes {
    let value = this.get("action_selector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_selector(value: Bytes) {
    this.set("action_selector", Value.fromBytes(value));
  }

  get action_accountIds(): Array<BigInt> {
    let value = this.get("action_accountIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set action_accountIds(value: Array<BigInt>) {
    this.set("action_accountIds", Value.fromBigIntArray(value));
  }

  get action_token(): Bytes {
    let value = this.get("action_token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_token(value: Bytes) {
    this.set("action_token", Value.fromBytes(value));
  }

  get action_lockAmt(): BigInt {
    let value = this.get("action_lockAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_lockAmt(value: BigInt) {
    this.set("action_lockAmt", Value.fromBigInt(value));
  }

  get action_liqAmt(): BigInt {
    let value = this.get("action_liqAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_liqAmt(value: BigInt) {
    this.set("action_liqAmt", Value.fromBigInt(value));
  }

  get action_status(): i32 {
    let value = this.get("action_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set action_status(value: i32) {
    this.set("action_status", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FallbackRefund extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FallbackRefund entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FallbackRefund must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FallbackRefund", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): FallbackRefund | null {
    return changetype<FallbackRefund | null>(
      store.get_in_block("FallbackRefund", id.toHexString())
    );
  }

  static load(id: Bytes): FallbackRefund | null {
    return changetype<FallbackRefund | null>(
      store.get("FallbackRefund", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get action_destinationChain(): string {
    let value = this.get("action_destinationChain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action_destinationChain(value: string) {
    this.set("action_destinationChain", Value.fromString(value));
  }

  get action_strategyId(): Bytes {
    let value = this.get("action_strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_strategyId(value: Bytes) {
    this.set("action_strategyId", Value.fromBytes(value));
  }

  get action_selector(): Bytes {
    let value = this.get("action_selector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_selector(value: Bytes) {
    this.set("action_selector", Value.fromBytes(value));
  }

  get action_accountIds(): Array<BigInt> {
    let value = this.get("action_accountIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set action_accountIds(value: Array<BigInt>) {
    this.set("action_accountIds", Value.fromBigIntArray(value));
  }

  get action_token(): Bytes {
    let value = this.get("action_token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_token(value: Bytes) {
    this.set("action_token", Value.fromBytes(value));
  }

  get action_lockAmt(): BigInt {
    let value = this.get("action_lockAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_lockAmt(value: BigInt) {
    this.set("action_lockAmt", Value.fromBigInt(value));
  }

  get action_liqAmt(): BigInt {
    let value = this.get("action_liqAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_liqAmt(value: BigInt) {
    this.set("action_liqAmt", Value.fromBigInt(value));
  }

  get action_status(): i32 {
    let value = this.get("action_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set action_status(value: i32) {
    this.set("action_status", Value.fromI32(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Harvest extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Harvest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Harvest must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Harvest", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Harvest | null {
    return changetype<Harvest | null>(
      store.get_in_block("Harvest", id.toHexString())
    );
  }

  static load(id: Bytes): Harvest | null {
    return changetype<Harvest | null>(store.get("Harvest", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get action_destinationChain(): string {
    let value = this.get("action_destinationChain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action_destinationChain(value: string) {
    this.set("action_destinationChain", Value.fromString(value));
  }

  get action_strategyId(): Bytes {
    let value = this.get("action_strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_strategyId(value: Bytes) {
    this.set("action_strategyId", Value.fromBytes(value));
  }

  get action_selector(): Bytes {
    let value = this.get("action_selector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_selector(value: Bytes) {
    this.set("action_selector", Value.fromBytes(value));
  }

  get action_accountIds(): Array<BigInt> {
    let value = this.get("action_accountIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set action_accountIds(value: Array<BigInt>) {
    this.set("action_accountIds", Value.fromBigIntArray(value));
  }

  get action_token(): Bytes {
    let value = this.get("action_token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_token(value: Bytes) {
    this.set("action_token", Value.fromBytes(value));
  }

  get action_lockAmt(): BigInt {
    let value = this.get("action_lockAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_lockAmt(value: BigInt) {
    this.set("action_lockAmt", Value.fromBigInt(value));
  }

  get action_liqAmt(): BigInt {
    let value = this.get("action_liqAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_liqAmt(value: BigInt) {
    this.set("action_liqAmt", Value.fromBigInt(value));
  }

  get action_status(): i32 {
    let value = this.get("action_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set action_status(value: i32) {
    this.set("action_status", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RouterInitialized extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RouterInitialized entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RouterInitialized must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RouterInitialized", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RouterInitialized | null {
    return changetype<RouterInitialized | null>(
      store.get_in_block("RouterInitialized", id.toHexString())
    );
  }

  static load(id: Bytes): RouterInitialized | null {
    return changetype<RouterInitialized | null>(
      store.get("RouterInitialized", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get version(): i32 {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class LogError extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LogError entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LogError must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LogError", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): LogError | null {
    return changetype<LogError | null>(
      store.get_in_block("LogError", id.toHexString())
    );
  }

  static load(id: Bytes): LogError | null {
    return changetype<LogError | null>(store.get("LogError", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get action_destinationChain(): string {
    let value = this.get("action_destinationChain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action_destinationChain(value: string) {
    this.set("action_destinationChain", Value.fromString(value));
  }

  get action_strategyId(): Bytes {
    let value = this.get("action_strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_strategyId(value: Bytes) {
    this.set("action_strategyId", Value.fromBytes(value));
  }

  get action_selector(): Bytes {
    let value = this.get("action_selector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_selector(value: Bytes) {
    this.set("action_selector", Value.fromBytes(value));
  }

  get action_accountIds(): Array<BigInt> {
    let value = this.get("action_accountIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set action_accountIds(value: Array<BigInt>) {
    this.set("action_accountIds", Value.fromBigIntArray(value));
  }

  get action_token(): Bytes {
    let value = this.get("action_token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_token(value: Bytes) {
    this.set("action_token", Value.fromBytes(value));
  }

  get action_lockAmt(): BigInt {
    let value = this.get("action_lockAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_lockAmt(value: BigInt) {
    this.set("action_lockAmt", Value.fromBigInt(value));
  }

  get action_liqAmt(): BigInt {
    let value = this.get("action_liqAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_liqAmt(value: BigInt) {
    this.set("action_liqAmt", Value.fromBigInt(value));
  }

  get action_status(): i32 {
    let value = this.get("action_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set action_status(value: i32) {
    this.set("action_status", Value.fromI32(value));
  }

  get message(): string {
    let value = this.get("message");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set message(value: string) {
    this.set("message", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class LogErrorBytes extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LogErrorBytes entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type LogErrorBytes must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LogErrorBytes", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): LogErrorBytes | null {
    return changetype<LogErrorBytes | null>(
      store.get_in_block("LogErrorBytes", id.toHexString())
    );
  }

  static load(id: Bytes): LogErrorBytes | null {
    return changetype<LogErrorBytes | null>(
      store.get("LogErrorBytes", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get action_destinationChain(): string {
    let value = this.get("action_destinationChain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action_destinationChain(value: string) {
    this.set("action_destinationChain", Value.fromString(value));
  }

  get action_strategyId(): Bytes {
    let value = this.get("action_strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_strategyId(value: Bytes) {
    this.set("action_strategyId", Value.fromBytes(value));
  }

  get action_selector(): Bytes {
    let value = this.get("action_selector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_selector(value: Bytes) {
    this.set("action_selector", Value.fromBytes(value));
  }

  get action_accountIds(): Array<BigInt> {
    let value = this.get("action_accountIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set action_accountIds(value: Array<BigInt>) {
    this.set("action_accountIds", Value.fromBigIntArray(value));
  }

  get action_token(): Bytes {
    let value = this.get("action_token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_token(value: Bytes) {
    this.set("action_token", Value.fromBytes(value));
  }

  get action_lockAmt(): BigInt {
    let value = this.get("action_lockAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_lockAmt(value: BigInt) {
    this.set("action_lockAmt", Value.fromBigInt(value));
  }

  get action_liqAmt(): BigInt {
    let value = this.get("action_liqAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_liqAmt(value: BigInt) {
    this.set("action_liqAmt", Value.fromBigInt(value));
  }

  get action_status(): i32 {
    let value = this.get("action_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set action_status(value: i32) {
    this.set("action_status", Value.fromI32(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RouterOwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RouterOwnershipTransferred entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RouterOwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RouterOwnershipTransferred", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RouterOwnershipTransferred | null {
    return changetype<RouterOwnershipTransferred | null>(
      store.get_in_block("RouterOwnershipTransferred", id.toHexString())
    );
  }

  static load(id: Bytes): RouterOwnershipTransferred | null {
    return changetype<RouterOwnershipTransferred | null>(
      store.get("RouterOwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Redemption extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Redemption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Redemption must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Redemption", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Redemption | null {
    return changetype<Redemption | null>(
      store.get_in_block("Redemption", id.toHexString())
    );
  }

  static load(id: Bytes): Redemption | null {
    return changetype<Redemption | null>(
      store.get("Redemption", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get action_destinationChain(): string {
    let value = this.get("action_destinationChain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action_destinationChain(value: string) {
    this.set("action_destinationChain", Value.fromString(value));
  }

  get action_strategyId(): Bytes {
    let value = this.get("action_strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_strategyId(value: Bytes) {
    this.set("action_strategyId", Value.fromBytes(value));
  }

  get action_selector(): Bytes {
    let value = this.get("action_selector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_selector(value: Bytes) {
    this.set("action_selector", Value.fromBytes(value));
  }

  get action_accountIds(): Array<BigInt> {
    let value = this.get("action_accountIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set action_accountIds(value: Array<BigInt>) {
    this.set("action_accountIds", Value.fromBigIntArray(value));
  }

  get action_token(): Bytes {
    let value = this.get("action_token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_token(value: Bytes) {
    this.set("action_token", Value.fromBytes(value));
  }

  get action_lockAmt(): BigInt {
    let value = this.get("action_lockAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_lockAmt(value: BigInt) {
    this.set("action_lockAmt", Value.fromBigInt(value));
  }

  get action_liqAmt(): BigInt {
    let value = this.get("action_liqAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_liqAmt(value: BigInt) {
    this.set("action_liqAmt", Value.fromBigInt(value));
  }

  get action_status(): i32 {
    let value = this.get("action_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set action_status(value: i32) {
    this.set("action_status", Value.fromI32(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TokensSent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokensSent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokensSent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokensSent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): TokensSent | null {
    return changetype<TokensSent | null>(
      store.get_in_block("TokensSent", id.toHexString())
    );
  }

  static load(id: Bytes): TokensSent | null {
    return changetype<TokensSent | null>(
      store.get("TokensSent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get action_destinationChain(): string {
    let value = this.get("action_destinationChain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set action_destinationChain(value: string) {
    this.set("action_destinationChain", Value.fromString(value));
  }

  get action_strategyId(): Bytes {
    let value = this.get("action_strategyId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_strategyId(value: Bytes) {
    this.set("action_strategyId", Value.fromBytes(value));
  }

  get action_selector(): Bytes {
    let value = this.get("action_selector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_selector(value: Bytes) {
    this.set("action_selector", Value.fromBytes(value));
  }

  get action_accountIds(): Array<BigInt> {
    let value = this.get("action_accountIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set action_accountIds(value: Array<BigInt>) {
    this.set("action_accountIds", Value.fromBigIntArray(value));
  }

  get action_token(): Bytes {
    let value = this.get("action_token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set action_token(value: Bytes) {
    this.set("action_token", Value.fromBytes(value));
  }

  get action_lockAmt(): BigInt {
    let value = this.get("action_lockAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_lockAmt(value: BigInt) {
    this.set("action_lockAmt", Value.fromBigInt(value));
  }

  get action_liqAmt(): BigInt {
    let value = this.get("action_liqAmt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set action_liqAmt(value: BigInt) {
    this.set("action_liqAmt", Value.fromBigInt(value));
  }

  get action_status(): i32 {
    let value = this.get("action_status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set action_status(value: i32) {
    this.set("action_status", Value.fromI32(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo | null {
    return changetype<AllowanceStateUpdatedTo | null>(
      store.get_in_block("AllowanceStateUpdatedTo", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo | null {
    return changetype<AllowanceStateUpdatedTo | null>(
      store.get("AllowanceStateUpdatedTo", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated | null {
    return changetype<DaoContractCreated | null>(
      store.get_in_block("DaoContractCreated", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated | null {
    return changetype<DaoContractCreated | null>(
      store.get("DaoContractCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited | null {
    return changetype<DonationDeposited | null>(
      store.get_in_block("DonationDeposited", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited | null {
    return changetype<DonationDeposited | null>(
      store.get("DonationDeposited", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup | null {
    return changetype<DonationMatchSetup | null>(
      store.get_in_block("DonationMatchSetup", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup | null {
    return changetype<DonationMatchSetup | null>(
      store.get("DonationMatchSetup", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn | null {
    return changetype<DonationWithdrawn | null>(
      store.get_in_block("DonationWithdrawn", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn | null {
    return changetype<DonationWithdrawn | null>(
      store.get("DonationWithdrawn", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated | null {
    return changetype<EndowmentCreated | null>(
      store.get_in_block("EndowmentCreated", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated | null {
    return changetype<EndowmentCreated | null>(
      store.get("EndowmentCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated | null {
    return changetype<EndowmentSettingUpdated | null>(
      store.get_in_block("EndowmentSettingUpdated", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated | null {
    return changetype<EndowmentSettingUpdated | null>(
      store.get("EndowmentSettingUpdated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance | null {
    return changetype<RemoveAllowance | null>(
      store.get_in_block("RemoveAllowance", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance | null {
    return changetype<RemoveAllowance | null>(
      store.get("RemoveAllowance", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken | null {
    return changetype<SwapToken | null>(
      store.get_in_block("SwapToken", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken | null {
    return changetype<SwapToken | null>(
      store.get("SwapToken", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig | null {
    return changetype<UpdateConfig | null>(
      store.get_in_block("UpdateConfig", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig | null {
    return changetype<UpdateConfig | null>(
      store.get("UpdateConfig", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment | null {
    return changetype<UpdateEndowment | null>(
      store.get_in_block("UpdateEndowment", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment | null {
    return changetype<UpdateEndowment | null>(
      store.get("UpdateEndowment", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo1 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo1 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo1 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo1", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo1 | null {
    return changetype<AllowanceStateUpdatedTo1 | null>(
      store.get_in_block("AllowanceStateUpdatedTo1", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo1 | null {
    return changetype<AllowanceStateUpdatedTo1 | null>(
      store.get("AllowanceStateUpdatedTo1", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated1 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated1 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated1 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated1", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated1 | null {
    return changetype<DaoContractCreated1 | null>(
      store.get_in_block("DaoContractCreated1", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated1 | null {
    return changetype<DaoContractCreated1 | null>(
      store.get("DaoContractCreated1", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited1 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited1 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited1 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited1", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited1 | null {
    return changetype<DonationDeposited1 | null>(
      store.get_in_block("DonationDeposited1", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited1 | null {
    return changetype<DonationDeposited1 | null>(
      store.get("DonationDeposited1", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup1 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup1 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup1 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup1", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup1 | null {
    return changetype<DonationMatchSetup1 | null>(
      store.get_in_block("DonationMatchSetup1", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup1 | null {
    return changetype<DonationMatchSetup1 | null>(
      store.get("DonationMatchSetup1", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn1 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn1 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn1 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn1", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn1 | null {
    return changetype<DonationWithdrawn1 | null>(
      store.get_in_block("DonationWithdrawn1", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn1 | null {
    return changetype<DonationWithdrawn1 | null>(
      store.get("DonationWithdrawn1", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated1 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated1 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated1 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated1", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated1 | null {
    return changetype<EndowmentCreated1 | null>(
      store.get_in_block("EndowmentCreated1", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated1 | null {
    return changetype<EndowmentCreated1 | null>(
      store.get("EndowmentCreated1", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated1 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated1 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated1 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated1", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated1 | null {
    return changetype<EndowmentSettingUpdated1 | null>(
      store.get_in_block("EndowmentSettingUpdated1", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated1 | null {
    return changetype<EndowmentSettingUpdated1 | null>(
      store.get("EndowmentSettingUpdated1", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance1 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance1 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance1 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance1", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance1 | null {
    return changetype<RemoveAllowance1 | null>(
      store.get_in_block("RemoveAllowance1", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance1 | null {
    return changetype<RemoveAllowance1 | null>(
      store.get("RemoveAllowance1", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken1 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken1 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken1 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken1", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken1 | null {
    return changetype<SwapToken1 | null>(
      store.get_in_block("SwapToken1", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken1 | null {
    return changetype<SwapToken1 | null>(
      store.get("SwapToken1", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig1 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig1 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig1 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig1", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig1 | null {
    return changetype<UpdateConfig1 | null>(
      store.get_in_block("UpdateConfig1", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig1 | null {
    return changetype<UpdateConfig1 | null>(
      store.get("UpdateConfig1", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment1 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment1 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment1 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment1", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment1 | null {
    return changetype<UpdateEndowment1 | null>(
      store.get_in_block("UpdateEndowment1", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment1 | null {
    return changetype<UpdateEndowment1 | null>(
      store.get("UpdateEndowment1", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo2 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo2 | null {
    return changetype<AllowanceStateUpdatedTo2 | null>(
      store.get_in_block("AllowanceStateUpdatedTo2", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo2 | null {
    return changetype<AllowanceStateUpdatedTo2 | null>(
      store.get("AllowanceStateUpdatedTo2", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated2 | null {
    return changetype<DaoContractCreated2 | null>(
      store.get_in_block("DaoContractCreated2", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated2 | null {
    return changetype<DaoContractCreated2 | null>(
      store.get("DaoContractCreated2", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited2 | null {
    return changetype<DonationDeposited2 | null>(
      store.get_in_block("DonationDeposited2", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited2 | null {
    return changetype<DonationDeposited2 | null>(
      store.get("DonationDeposited2", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup2 | null {
    return changetype<DonationMatchSetup2 | null>(
      store.get_in_block("DonationMatchSetup2", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup2 | null {
    return changetype<DonationMatchSetup2 | null>(
      store.get("DonationMatchSetup2", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn2 | null {
    return changetype<DonationWithdrawn2 | null>(
      store.get_in_block("DonationWithdrawn2", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn2 | null {
    return changetype<DonationWithdrawn2 | null>(
      store.get("DonationWithdrawn2", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated2 | null {
    return changetype<EndowmentCreated2 | null>(
      store.get_in_block("EndowmentCreated2", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated2 | null {
    return changetype<EndowmentCreated2 | null>(
      store.get("EndowmentCreated2", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated2 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated2 | null {
    return changetype<EndowmentSettingUpdated2 | null>(
      store.get_in_block("EndowmentSettingUpdated2", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated2 | null {
    return changetype<EndowmentSettingUpdated2 | null>(
      store.get("EndowmentSettingUpdated2", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance2 | null {
    return changetype<RemoveAllowance2 | null>(
      store.get_in_block("RemoveAllowance2", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance2 | null {
    return changetype<RemoveAllowance2 | null>(
      store.get("RemoveAllowance2", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken2 | null {
    return changetype<SwapToken2 | null>(
      store.get_in_block("SwapToken2", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken2 | null {
    return changetype<SwapToken2 | null>(
      store.get("SwapToken2", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig2 | null {
    return changetype<UpdateConfig2 | null>(
      store.get_in_block("UpdateConfig2", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig2 | null {
    return changetype<UpdateConfig2 | null>(
      store.get("UpdateConfig2", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment2 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment2 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment2 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment2", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment2 | null {
    return changetype<UpdateEndowment2 | null>(
      store.get_in_block("UpdateEndowment2", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment2 | null {
    return changetype<UpdateEndowment2 | null>(
      store.get("UpdateEndowment2", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo3 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo3 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo3 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo3", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo3 | null {
    return changetype<AllowanceStateUpdatedTo3 | null>(
      store.get_in_block("AllowanceStateUpdatedTo3", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo3 | null {
    return changetype<AllowanceStateUpdatedTo3 | null>(
      store.get("AllowanceStateUpdatedTo3", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated3 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated3 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated3 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated3", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated3 | null {
    return changetype<DaoContractCreated3 | null>(
      store.get_in_block("DaoContractCreated3", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated3 | null {
    return changetype<DaoContractCreated3 | null>(
      store.get("DaoContractCreated3", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited3 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited3 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited3 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited3", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited3 | null {
    return changetype<DonationDeposited3 | null>(
      store.get_in_block("DonationDeposited3", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited3 | null {
    return changetype<DonationDeposited3 | null>(
      store.get("DonationDeposited3", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup3 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup3 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup3 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup3", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup3 | null {
    return changetype<DonationMatchSetup3 | null>(
      store.get_in_block("DonationMatchSetup3", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup3 | null {
    return changetype<DonationMatchSetup3 | null>(
      store.get("DonationMatchSetup3", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn3 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn3 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn3 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn3", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn3 | null {
    return changetype<DonationWithdrawn3 | null>(
      store.get_in_block("DonationWithdrawn3", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn3 | null {
    return changetype<DonationWithdrawn3 | null>(
      store.get("DonationWithdrawn3", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated3 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated3 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated3 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated3", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated3 | null {
    return changetype<EndowmentCreated3 | null>(
      store.get_in_block("EndowmentCreated3", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated3 | null {
    return changetype<EndowmentCreated3 | null>(
      store.get("EndowmentCreated3", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated3 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated3 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated3 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated3", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated3 | null {
    return changetype<EndowmentSettingUpdated3 | null>(
      store.get_in_block("EndowmentSettingUpdated3", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated3 | null {
    return changetype<EndowmentSettingUpdated3 | null>(
      store.get("EndowmentSettingUpdated3", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance3 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance3 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance3 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance3", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance3 | null {
    return changetype<RemoveAllowance3 | null>(
      store.get_in_block("RemoveAllowance3", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance3 | null {
    return changetype<RemoveAllowance3 | null>(
      store.get("RemoveAllowance3", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken3 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken3 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken3 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken3", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken3 | null {
    return changetype<SwapToken3 | null>(
      store.get_in_block("SwapToken3", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken3 | null {
    return changetype<SwapToken3 | null>(
      store.get("SwapToken3", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig3 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig3 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig3 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig3", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig3 | null {
    return changetype<UpdateConfig3 | null>(
      store.get_in_block("UpdateConfig3", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig3 | null {
    return changetype<UpdateConfig3 | null>(
      store.get("UpdateConfig3", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment3 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment3 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment3 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment3", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment3 | null {
    return changetype<UpdateEndowment3 | null>(
      store.get_in_block("UpdateEndowment3", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment3 | null {
    return changetype<UpdateEndowment3 | null>(
      store.get("UpdateEndowment3", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo4 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo4 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo4 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo4", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo4 | null {
    return changetype<AllowanceStateUpdatedTo4 | null>(
      store.get_in_block("AllowanceStateUpdatedTo4", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo4 | null {
    return changetype<AllowanceStateUpdatedTo4 | null>(
      store.get("AllowanceStateUpdatedTo4", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated4 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated4 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated4 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated4", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated4 | null {
    return changetype<DaoContractCreated4 | null>(
      store.get_in_block("DaoContractCreated4", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated4 | null {
    return changetype<DaoContractCreated4 | null>(
      store.get("DaoContractCreated4", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited4 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited4 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited4 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited4", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited4 | null {
    return changetype<DonationDeposited4 | null>(
      store.get_in_block("DonationDeposited4", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited4 | null {
    return changetype<DonationDeposited4 | null>(
      store.get("DonationDeposited4", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup4 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup4 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup4 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup4", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup4 | null {
    return changetype<DonationMatchSetup4 | null>(
      store.get_in_block("DonationMatchSetup4", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup4 | null {
    return changetype<DonationMatchSetup4 | null>(
      store.get("DonationMatchSetup4", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn4 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn4 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn4 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn4", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn4 | null {
    return changetype<DonationWithdrawn4 | null>(
      store.get_in_block("DonationWithdrawn4", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn4 | null {
    return changetype<DonationWithdrawn4 | null>(
      store.get("DonationWithdrawn4", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated4 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated4 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated4 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated4", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated4 | null {
    return changetype<EndowmentCreated4 | null>(
      store.get_in_block("EndowmentCreated4", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated4 | null {
    return changetype<EndowmentCreated4 | null>(
      store.get("EndowmentCreated4", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated4 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated4 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated4 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated4", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated4 | null {
    return changetype<EndowmentSettingUpdated4 | null>(
      store.get_in_block("EndowmentSettingUpdated4", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated4 | null {
    return changetype<EndowmentSettingUpdated4 | null>(
      store.get("EndowmentSettingUpdated4", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance4 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance4 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance4 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance4", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance4 | null {
    return changetype<RemoveAllowance4 | null>(
      store.get_in_block("RemoveAllowance4", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance4 | null {
    return changetype<RemoveAllowance4 | null>(
      store.get("RemoveAllowance4", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken4 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken4 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken4 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken4", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken4 | null {
    return changetype<SwapToken4 | null>(
      store.get_in_block("SwapToken4", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken4 | null {
    return changetype<SwapToken4 | null>(
      store.get("SwapToken4", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwappedToken extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwappedToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwappedToken must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwappedToken", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwappedToken | null {
    return changetype<SwappedToken | null>(
      store.get_in_block("SwappedToken", id.toHexString())
    );
  }

  static load(id: Bytes): SwappedToken | null {
    return changetype<SwappedToken | null>(
      store.get("SwappedToken", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig4 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig4 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig4 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig4", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig4 | null {
    return changetype<UpdateConfig4 | null>(
      store.get_in_block("UpdateConfig4", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig4 | null {
    return changetype<UpdateConfig4 | null>(
      store.get("UpdateConfig4", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment4 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment4 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment4 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment4", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment4 | null {
    return changetype<UpdateEndowment4 | null>(
      store.get_in_block("UpdateEndowment4", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment4 | null {
    return changetype<UpdateEndowment4 | null>(
      store.get("UpdateEndowment4", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo5 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo5 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo5 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo5", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo5 | null {
    return changetype<AllowanceStateUpdatedTo5 | null>(
      store.get_in_block("AllowanceStateUpdatedTo5", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo5 | null {
    return changetype<AllowanceStateUpdatedTo5 | null>(
      store.get("AllowanceStateUpdatedTo5", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated5 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated5 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated5 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated5", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated5 | null {
    return changetype<DaoContractCreated5 | null>(
      store.get_in_block("DaoContractCreated5", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated5 | null {
    return changetype<DaoContractCreated5 | null>(
      store.get("DaoContractCreated5", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited5 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited5 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited5 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited5", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited5 | null {
    return changetype<DonationDeposited5 | null>(
      store.get_in_block("DonationDeposited5", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited5 | null {
    return changetype<DonationDeposited5 | null>(
      store.get("DonationDeposited5", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup5 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup5 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup5 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup5", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup5 | null {
    return changetype<DonationMatchSetup5 | null>(
      store.get_in_block("DonationMatchSetup5", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup5 | null {
    return changetype<DonationMatchSetup5 | null>(
      store.get("DonationMatchSetup5", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn5 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn5 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn5 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn5", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn5 | null {
    return changetype<DonationWithdrawn5 | null>(
      store.get_in_block("DonationWithdrawn5", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn5 | null {
    return changetype<DonationWithdrawn5 | null>(
      store.get("DonationWithdrawn5", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated5 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated5 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated5 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated5", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated5 | null {
    return changetype<EndowmentCreated5 | null>(
      store.get_in_block("EndowmentCreated5", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated5 | null {
    return changetype<EndowmentCreated5 | null>(
      store.get("EndowmentCreated5", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated5 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated5 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated5 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated5", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated5 | null {
    return changetype<EndowmentSettingUpdated5 | null>(
      store.get_in_block("EndowmentSettingUpdated5", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated5 | null {
    return changetype<EndowmentSettingUpdated5 | null>(
      store.get("EndowmentSettingUpdated5", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance5 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance5 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance5 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance5", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance5 | null {
    return changetype<RemoveAllowance5 | null>(
      store.get_in_block("RemoveAllowance5", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance5 | null {
    return changetype<RemoveAllowance5 | null>(
      store.get("RemoveAllowance5", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken5 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken5 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken5 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken5", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken5 | null {
    return changetype<SwapToken5 | null>(
      store.get_in_block("SwapToken5", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken5 | null {
    return changetype<SwapToken5 | null>(
      store.get("SwapToken5", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig5 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig5 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig5 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig5", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig5 | null {
    return changetype<UpdateConfig5 | null>(
      store.get_in_block("UpdateConfig5", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig5 | null {
    return changetype<UpdateConfig5 | null>(
      store.get("UpdateConfig5", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment5 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment5 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment5 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment5", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment5 | null {
    return changetype<UpdateEndowment5 | null>(
      store.get_in_block("UpdateEndowment5", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment5 | null {
    return changetype<UpdateEndowment5 | null>(
      store.get("UpdateEndowment5", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo6 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo6 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo6 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo6", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo6 | null {
    return changetype<AllowanceStateUpdatedTo6 | null>(
      store.get_in_block("AllowanceStateUpdatedTo6", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo6 | null {
    return changetype<AllowanceStateUpdatedTo6 | null>(
      store.get("AllowanceStateUpdatedTo6", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated6 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated6 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated6 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated6", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated6 | null {
    return changetype<DaoContractCreated6 | null>(
      store.get_in_block("DaoContractCreated6", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated6 | null {
    return changetype<DaoContractCreated6 | null>(
      store.get("DaoContractCreated6", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited6 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited6 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited6 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited6", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited6 | null {
    return changetype<DonationDeposited6 | null>(
      store.get_in_block("DonationDeposited6", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited6 | null {
    return changetype<DonationDeposited6 | null>(
      store.get("DonationDeposited6", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup6 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup6 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup6 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup6", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup6 | null {
    return changetype<DonationMatchSetup6 | null>(
      store.get_in_block("DonationMatchSetup6", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup6 | null {
    return changetype<DonationMatchSetup6 | null>(
      store.get("DonationMatchSetup6", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn6 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn6 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn6 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn6", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn6 | null {
    return changetype<DonationWithdrawn6 | null>(
      store.get_in_block("DonationWithdrawn6", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn6 | null {
    return changetype<DonationWithdrawn6 | null>(
      store.get("DonationWithdrawn6", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated6 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated6 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated6 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated6", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated6 | null {
    return changetype<EndowmentCreated6 | null>(
      store.get_in_block("EndowmentCreated6", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated6 | null {
    return changetype<EndowmentCreated6 | null>(
      store.get("EndowmentCreated6", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated6 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated6 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated6 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated6", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated6 | null {
    return changetype<EndowmentSettingUpdated6 | null>(
      store.get_in_block("EndowmentSettingUpdated6", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated6 | null {
    return changetype<EndowmentSettingUpdated6 | null>(
      store.get("EndowmentSettingUpdated6", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance6 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance6 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance6 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance6", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance6 | null {
    return changetype<RemoveAllowance6 | null>(
      store.get_in_block("RemoveAllowance6", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance6 | null {
    return changetype<RemoveAllowance6 | null>(
      store.get("RemoveAllowance6", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken6 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken6 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken6 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken6", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken6 | null {
    return changetype<SwapToken6 | null>(
      store.get_in_block("SwapToken6", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken6 | null {
    return changetype<SwapToken6 | null>(
      store.get("SwapToken6", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig6 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig6 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig6 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig6", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig6 | null {
    return changetype<UpdateConfig6 | null>(
      store.get_in_block("UpdateConfig6", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig6 | null {
    return changetype<UpdateConfig6 | null>(
      store.get("UpdateConfig6", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment6 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment6 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment6 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment6", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment6 | null {
    return changetype<UpdateEndowment6 | null>(
      store.get_in_block("UpdateEndowment6", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment6 | null {
    return changetype<UpdateEndowment6 | null>(
      store.get("UpdateEndowment6", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo7 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo7 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo7 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo7", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo7 | null {
    return changetype<AllowanceStateUpdatedTo7 | null>(
      store.get_in_block("AllowanceStateUpdatedTo7", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo7 | null {
    return changetype<AllowanceStateUpdatedTo7 | null>(
      store.get("AllowanceStateUpdatedTo7", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated7 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated7 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated7 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated7", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated7 | null {
    return changetype<DaoContractCreated7 | null>(
      store.get_in_block("DaoContractCreated7", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated7 | null {
    return changetype<DaoContractCreated7 | null>(
      store.get("DaoContractCreated7", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited7 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited7 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited7 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited7", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited7 | null {
    return changetype<DonationDeposited7 | null>(
      store.get_in_block("DonationDeposited7", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited7 | null {
    return changetype<DonationDeposited7 | null>(
      store.get("DonationDeposited7", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup7 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup7 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup7 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup7", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup7 | null {
    return changetype<DonationMatchSetup7 | null>(
      store.get_in_block("DonationMatchSetup7", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup7 | null {
    return changetype<DonationMatchSetup7 | null>(
      store.get("DonationMatchSetup7", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn7 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn7 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn7 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn7", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn7 | null {
    return changetype<DonationWithdrawn7 | null>(
      store.get_in_block("DonationWithdrawn7", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn7 | null {
    return changetype<DonationWithdrawn7 | null>(
      store.get("DonationWithdrawn7", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated7 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated7 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated7 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated7", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated7 | null {
    return changetype<EndowmentCreated7 | null>(
      store.get_in_block("EndowmentCreated7", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated7 | null {
    return changetype<EndowmentCreated7 | null>(
      store.get("EndowmentCreated7", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated7 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated7 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated7 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated7", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated7 | null {
    return changetype<EndowmentSettingUpdated7 | null>(
      store.get_in_block("EndowmentSettingUpdated7", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated7 | null {
    return changetype<EndowmentSettingUpdated7 | null>(
      store.get("EndowmentSettingUpdated7", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance7 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance7 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance7 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance7", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance7 | null {
    return changetype<RemoveAllowance7 | null>(
      store.get_in_block("RemoveAllowance7", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance7 | null {
    return changetype<RemoveAllowance7 | null>(
      store.get("RemoveAllowance7", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken7 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken7 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken7 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken7", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken7 | null {
    return changetype<SwapToken7 | null>(
      store.get_in_block("SwapToken7", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken7 | null {
    return changetype<SwapToken7 | null>(
      store.get("SwapToken7", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig7 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig7 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig7 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig7", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig7 | null {
    return changetype<UpdateConfig7 | null>(
      store.get_in_block("UpdateConfig7", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig7 | null {
    return changetype<UpdateConfig7 | null>(
      store.get("UpdateConfig7", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment7 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment7 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment7 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment7", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment7 | null {
    return changetype<UpdateEndowment7 | null>(
      store.get_in_block("UpdateEndowment7", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment7 | null {
    return changetype<UpdateEndowment7 | null>(
      store.get("UpdateEndowment7", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo8 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo8 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo8 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo8", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo8 | null {
    return changetype<AllowanceStateUpdatedTo8 | null>(
      store.get_in_block("AllowanceStateUpdatedTo8", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo8 | null {
    return changetype<AllowanceStateUpdatedTo8 | null>(
      store.get("AllowanceStateUpdatedTo8", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated8 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated8 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated8 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated8", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated8 | null {
    return changetype<DaoContractCreated8 | null>(
      store.get_in_block("DaoContractCreated8", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated8 | null {
    return changetype<DaoContractCreated8 | null>(
      store.get("DaoContractCreated8", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited8 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited8 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited8 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited8", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited8 | null {
    return changetype<DonationDeposited8 | null>(
      store.get_in_block("DonationDeposited8", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited8 | null {
    return changetype<DonationDeposited8 | null>(
      store.get("DonationDeposited8", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup8 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup8 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup8 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup8", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup8 | null {
    return changetype<DonationMatchSetup8 | null>(
      store.get_in_block("DonationMatchSetup8", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup8 | null {
    return changetype<DonationMatchSetup8 | null>(
      store.get("DonationMatchSetup8", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn8 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn8 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn8 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn8", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn8 | null {
    return changetype<DonationWithdrawn8 | null>(
      store.get_in_block("DonationWithdrawn8", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn8 | null {
    return changetype<DonationWithdrawn8 | null>(
      store.get("DonationWithdrawn8", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated8 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated8 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated8 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated8", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated8 | null {
    return changetype<EndowmentCreated8 | null>(
      store.get_in_block("EndowmentCreated8", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated8 | null {
    return changetype<EndowmentCreated8 | null>(
      store.get("EndowmentCreated8", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated8 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated8 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated8 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated8", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated8 | null {
    return changetype<EndowmentSettingUpdated8 | null>(
      store.get_in_block("EndowmentSettingUpdated8", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated8 | null {
    return changetype<EndowmentSettingUpdated8 | null>(
      store.get("EndowmentSettingUpdated8", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance8 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance8 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance8 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance8", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance8 | null {
    return changetype<RemoveAllowance8 | null>(
      store.get_in_block("RemoveAllowance8", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance8 | null {
    return changetype<RemoveAllowance8 | null>(
      store.get("RemoveAllowance8", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken8 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken8 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken8 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken8", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken8 | null {
    return changetype<SwapToken8 | null>(
      store.get_in_block("SwapToken8", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken8 | null {
    return changetype<SwapToken8 | null>(
      store.get("SwapToken8", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig8 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig8 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig8 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig8", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig8 | null {
    return changetype<UpdateConfig8 | null>(
      store.get_in_block("UpdateConfig8", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig8 | null {
    return changetype<UpdateConfig8 | null>(
      store.get("UpdateConfig8", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment8 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment8 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment8 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment8", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment8 | null {
    return changetype<UpdateEndowment8 | null>(
      store.get_in_block("UpdateEndowment8", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment8 | null {
    return changetype<UpdateEndowment8 | null>(
      store.get("UpdateEndowment8", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo9 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo9 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo9 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo9", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo9 | null {
    return changetype<AllowanceStateUpdatedTo9 | null>(
      store.get_in_block("AllowanceStateUpdatedTo9", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo9 | null {
    return changetype<AllowanceStateUpdatedTo9 | null>(
      store.get("AllowanceStateUpdatedTo9", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated9 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated9 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated9 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated9", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated9 | null {
    return changetype<DaoContractCreated9 | null>(
      store.get_in_block("DaoContractCreated9", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated9 | null {
    return changetype<DaoContractCreated9 | null>(
      store.get("DaoContractCreated9", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited9 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited9 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited9 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited9", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited9 | null {
    return changetype<DonationDeposited9 | null>(
      store.get_in_block("DonationDeposited9", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited9 | null {
    return changetype<DonationDeposited9 | null>(
      store.get("DonationDeposited9", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup9 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup9 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup9 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup9", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup9 | null {
    return changetype<DonationMatchSetup9 | null>(
      store.get_in_block("DonationMatchSetup9", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup9 | null {
    return changetype<DonationMatchSetup9 | null>(
      store.get("DonationMatchSetup9", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn9 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn9 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn9 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn9", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn9 | null {
    return changetype<DonationWithdrawn9 | null>(
      store.get_in_block("DonationWithdrawn9", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn9 | null {
    return changetype<DonationWithdrawn9 | null>(
      store.get("DonationWithdrawn9", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated9 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated9 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated9 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated9", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated9 | null {
    return changetype<EndowmentCreated9 | null>(
      store.get_in_block("EndowmentCreated9", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated9 | null {
    return changetype<EndowmentCreated9 | null>(
      store.get("EndowmentCreated9", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated9 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated9 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated9 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated9", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated9 | null {
    return changetype<EndowmentSettingUpdated9 | null>(
      store.get_in_block("EndowmentSettingUpdated9", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated9 | null {
    return changetype<EndowmentSettingUpdated9 | null>(
      store.get("EndowmentSettingUpdated9", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance9 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance9 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance9 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance9", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance9 | null {
    return changetype<RemoveAllowance9 | null>(
      store.get_in_block("RemoveAllowance9", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance9 | null {
    return changetype<RemoveAllowance9 | null>(
      store.get("RemoveAllowance9", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken9 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken9 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken9 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken9", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken9 | null {
    return changetype<SwapToken9 | null>(
      store.get_in_block("SwapToken9", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken9 | null {
    return changetype<SwapToken9 | null>(
      store.get("SwapToken9", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig9 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig9 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig9 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig9", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig9 | null {
    return changetype<UpdateConfig9 | null>(
      store.get_in_block("UpdateConfig9", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig9 | null {
    return changetype<UpdateConfig9 | null>(
      store.get("UpdateConfig9", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment9 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment9 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment9 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment9", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment9 | null {
    return changetype<UpdateEndowment9 | null>(
      store.get_in_block("UpdateEndowment9", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment9 | null {
    return changetype<UpdateEndowment9 | null>(
      store.get("UpdateEndowment9", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo10 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo10 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo10 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo10", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo10 | null {
    return changetype<AllowanceStateUpdatedTo10 | null>(
      store.get_in_block("AllowanceStateUpdatedTo10", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo10 | null {
    return changetype<AllowanceStateUpdatedTo10 | null>(
      store.get("AllowanceStateUpdatedTo10", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated10 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated10 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated10 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated10", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated10 | null {
    return changetype<DaoContractCreated10 | null>(
      store.get_in_block("DaoContractCreated10", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated10 | null {
    return changetype<DaoContractCreated10 | null>(
      store.get("DaoContractCreated10", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited10 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited10 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited10 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited10", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited10 | null {
    return changetype<DonationDeposited10 | null>(
      store.get_in_block("DonationDeposited10", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited10 | null {
    return changetype<DonationDeposited10 | null>(
      store.get("DonationDeposited10", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup10 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup10 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup10 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup10", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup10 | null {
    return changetype<DonationMatchSetup10 | null>(
      store.get_in_block("DonationMatchSetup10", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup10 | null {
    return changetype<DonationMatchSetup10 | null>(
      store.get("DonationMatchSetup10", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn10 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn10 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn10 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn10", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn10 | null {
    return changetype<DonationWithdrawn10 | null>(
      store.get_in_block("DonationWithdrawn10", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn10 | null {
    return changetype<DonationWithdrawn10 | null>(
      store.get("DonationWithdrawn10", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated10 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated10 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated10 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated10", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated10 | null {
    return changetype<EndowmentCreated10 | null>(
      store.get_in_block("EndowmentCreated10", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated10 | null {
    return changetype<EndowmentCreated10 | null>(
      store.get("EndowmentCreated10", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated10 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated10 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated10 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated10", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated10 | null {
    return changetype<EndowmentSettingUpdated10 | null>(
      store.get_in_block("EndowmentSettingUpdated10", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated10 | null {
    return changetype<EndowmentSettingUpdated10 | null>(
      store.get("EndowmentSettingUpdated10", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance10 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance10 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance10 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance10", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance10 | null {
    return changetype<RemoveAllowance10 | null>(
      store.get_in_block("RemoveAllowance10", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance10 | null {
    return changetype<RemoveAllowance10 | null>(
      store.get("RemoveAllowance10", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken10 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken10 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken10 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken10", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken10 | null {
    return changetype<SwapToken10 | null>(
      store.get_in_block("SwapToken10", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken10 | null {
    return changetype<SwapToken10 | null>(
      store.get("SwapToken10", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig10 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig10 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig10 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig10", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig10 | null {
    return changetype<UpdateConfig10 | null>(
      store.get_in_block("UpdateConfig10", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig10 | null {
    return changetype<UpdateConfig10 | null>(
      store.get("UpdateConfig10", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment10 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment10 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment10 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment10", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment10 | null {
    return changetype<UpdateEndowment10 | null>(
      store.get_in_block("UpdateEndowment10", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment10 | null {
    return changetype<UpdateEndowment10 | null>(
      store.get("UpdateEndowment10", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo11 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo11 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo11 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo11", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo11 | null {
    return changetype<AllowanceStateUpdatedTo11 | null>(
      store.get_in_block("AllowanceStateUpdatedTo11", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo11 | null {
    return changetype<AllowanceStateUpdatedTo11 | null>(
      store.get("AllowanceStateUpdatedTo11", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated11 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated11 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated11 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated11", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated11 | null {
    return changetype<DaoContractCreated11 | null>(
      store.get_in_block("DaoContractCreated11", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated11 | null {
    return changetype<DaoContractCreated11 | null>(
      store.get("DaoContractCreated11", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited11 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited11 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited11 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited11", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited11 | null {
    return changetype<DonationDeposited11 | null>(
      store.get_in_block("DonationDeposited11", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited11 | null {
    return changetype<DonationDeposited11 | null>(
      store.get("DonationDeposited11", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup11 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup11 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup11 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup11", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup11 | null {
    return changetype<DonationMatchSetup11 | null>(
      store.get_in_block("DonationMatchSetup11", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup11 | null {
    return changetype<DonationMatchSetup11 | null>(
      store.get("DonationMatchSetup11", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn11 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn11 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn11 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn11", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn11 | null {
    return changetype<DonationWithdrawn11 | null>(
      store.get_in_block("DonationWithdrawn11", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn11 | null {
    return changetype<DonationWithdrawn11 | null>(
      store.get("DonationWithdrawn11", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated11 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated11 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated11 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated11", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated11 | null {
    return changetype<EndowmentCreated11 | null>(
      store.get_in_block("EndowmentCreated11", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated11 | null {
    return changetype<EndowmentCreated11 | null>(
      store.get("EndowmentCreated11", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated11 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated11 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated11 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated11", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated11 | null {
    return changetype<EndowmentSettingUpdated11 | null>(
      store.get_in_block("EndowmentSettingUpdated11", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated11 | null {
    return changetype<EndowmentSettingUpdated11 | null>(
      store.get("EndowmentSettingUpdated11", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance11 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance11 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance11 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance11", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance11 | null {
    return changetype<RemoveAllowance11 | null>(
      store.get_in_block("RemoveAllowance11", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance11 | null {
    return changetype<RemoveAllowance11 | null>(
      store.get("RemoveAllowance11", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken11 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken11 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken11 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken11", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken11 | null {
    return changetype<SwapToken11 | null>(
      store.get_in_block("SwapToken11", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken11 | null {
    return changetype<SwapToken11 | null>(
      store.get("SwapToken11", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig11 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig11 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig11 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig11", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig11 | null {
    return changetype<UpdateConfig11 | null>(
      store.get_in_block("UpdateConfig11", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig11 | null {
    return changetype<UpdateConfig11 | null>(
      store.get("UpdateConfig11", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment11 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment11 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment11 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment11", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment11 | null {
    return changetype<UpdateEndowment11 | null>(
      store.get_in_block("UpdateEndowment11", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment11 | null {
    return changetype<UpdateEndowment11 | null>(
      store.get("UpdateEndowment11", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AllowanceStateUpdatedTo12 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AllowanceStateUpdatedTo12 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AllowanceStateUpdatedTo12 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceStateUpdatedTo12", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AllowanceStateUpdatedTo12 | null {
    return changetype<AllowanceStateUpdatedTo12 | null>(
      store.get_in_block("AllowanceStateUpdatedTo12", id.toHexString())
    );
  }

  static load(id: Bytes): AllowanceStateUpdatedTo12 | null {
    return changetype<AllowanceStateUpdatedTo12 | null>(
      store.get("AllowanceStateUpdatedTo12", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get allowance(): BigInt {
    let value = this.get("allowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set allowance(value: BigInt) {
    this.set("allowance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DaoContractCreated12 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DaoContractCreated12 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DaoContractCreated12 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DaoContractCreated12", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DaoContractCreated12 | null {
    return changetype<DaoContractCreated12 | null>(
      store.get_in_block("DaoContractCreated12", id.toHexString())
    );
  }

  static load(id: Bytes): DaoContractCreated12 | null {
    return changetype<DaoContractCreated12 | null>(
      store.get("DaoContractCreated12", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get createdaomessage_id(): BigInt {
    let value = this.get("createdaomessage_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_id(value: BigInt) {
    this.set("createdaomessage_id", Value.fromBigInt(value));
  }

  get createdaomessage_owner(): Bytes {
    let value = this.get("createdaomessage_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_owner(value: Bytes) {
    this.set("createdaomessage_owner", Value.fromBytes(value));
  }

  get createdaomessage_quorum(): BigInt {
    let value = this.get("createdaomessage_quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_quorum(value: BigInt) {
    this.set("createdaomessage_quorum", Value.fromBigInt(value));
  }

  get createdaomessage_threshold(): BigInt {
    let value = this.get("createdaomessage_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_threshold(value: BigInt) {
    this.set("createdaomessage_threshold", Value.fromBigInt(value));
  }

  get createdaomessage_votingPeriod(): BigInt {
    let value = this.get("createdaomessage_votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_votingPeriod(value: BigInt) {
    this.set("createdaomessage_votingPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_timelockPeriod(): BigInt {
    let value = this.get("createdaomessage_timelockPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_timelockPeriod(value: BigInt) {
    this.set("createdaomessage_timelockPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_expirationPeriod(): BigInt {
    let value = this.get("createdaomessage_expirationPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_expirationPeriod(value: BigInt) {
    this.set("createdaomessage_expirationPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_proposalDeposit(): BigInt {
    let value = this.get("createdaomessage_proposalDeposit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_proposalDeposit(value: BigInt) {
    this.set("createdaomessage_proposalDeposit", Value.fromBigInt(value));
  }

  get createdaomessage_snapshotPeriod(): BigInt {
    let value = this.get("createdaomessage_snapshotPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_snapshotPeriod(value: BigInt) {
    this.set("createdaomessage_snapshotPeriod", Value.fromBigInt(value));
  }

  get createdaomessage_token_token(): i32 {
    let value = this.get("createdaomessage_token_token");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_token(value: i32) {
    this.set("createdaomessage_token_token", Value.fromI32(value));
  }

  get createdaomessage_token_data_existingData(): Bytes {
    let value = this.get("createdaomessage_token_data_existingData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_existingData(value: Bytes) {
    this.set(
      "createdaomessage_token_data_existingData",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_newInitialSupply(): BigInt {
    let value = this.get("createdaomessage_token_data_newInitialSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_newInitialSupply(value: BigInt) {
    this.set(
      "createdaomessage_token_data_newInitialSupply",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_newName(): string {
    let value = this.get("createdaomessage_token_data_newName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newName(value: string) {
    this.set("createdaomessage_token_data_newName", Value.fromString(value));
  }

  get createdaomessage_token_data_newSymbol(): string {
    let value = this.get("createdaomessage_token_data_newSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_newSymbol(value: string) {
    this.set("createdaomessage_token_data_newSymbol", Value.fromString(value));
  }

  get createdaomessage_token_data_veBondingType_ve_type(): i32 {
    let value = this.get("createdaomessage_token_data_veBondingType_ve_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_token_data_veBondingType_ve_type(value: i32) {
    this.set(
      "createdaomessage_token_data_veBondingType_ve_type",
      Value.fromI32(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_value(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_value"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_value(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_value",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_scale(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_scale"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_scale(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_scale",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_slope(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_slope"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_slope(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_slope",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingType_data_power(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingType_data_power"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingType_data_power(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingType_data_power",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingName(): string {
    let value = this.get("createdaomessage_token_data_veBondingName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingName(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingName",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingSymbol(): string {
    let value = this.get("createdaomessage_token_data_veBondingSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set createdaomessage_token_data_veBondingSymbol(value: string) {
    this.set(
      "createdaomessage_token_data_veBondingSymbol",
      Value.fromString(value)
    );
  }

  get createdaomessage_token_data_veBondingDecimals(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDenom(): Bytes {
    let value = this.get("createdaomessage_token_data_veBondingReserveDenom");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_token_data_veBondingReserveDenom(value: Bytes) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDenom",
      Value.fromBytes(value)
    );
  }

  get createdaomessage_token_data_veBondingReserveDecimals(): BigInt {
    let value = this.get(
      "createdaomessage_token_data_veBondingReserveDecimals"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingReserveDecimals(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingReserveDecimals",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_token_data_veBondingPeriod(): BigInt {
    let value = this.get("createdaomessage_token_data_veBondingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdaomessage_token_data_veBondingPeriod(value: BigInt) {
    this.set(
      "createdaomessage_token_data_veBondingPeriod",
      Value.fromBigInt(value)
    );
  }

  get createdaomessage_endowType(): i32 {
    let value = this.get("createdaomessage_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdaomessage_endowType(value: i32) {
    this.set("createdaomessage_endowType", Value.fromI32(value));
  }

  get createdaomessage_endowOwner(): Bytes {
    let value = this.get("createdaomessage_endowOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_endowOwner(value: Bytes) {
    this.set("createdaomessage_endowOwner", Value.fromBytes(value));
  }

  get createdaomessage_registrarContract(): Bytes {
    let value = this.get("createdaomessage_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set createdaomessage_registrarContract(value: Bytes) {
    this.set("createdaomessage_registrarContract", Value.fromBytes(value));
  }

  get daoAddress(): Bytes {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set daoAddress(value: Bytes) {
    this.set("daoAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationDeposited12 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationDeposited12 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationDeposited12 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationDeposited12", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationDeposited12 | null {
    return changetype<DonationDeposited12 | null>(
      store.get_in_block("DonationDeposited12", id.toHexString())
    );
  }

  static load(id: Bytes): DonationDeposited12 | null {
    return changetype<DonationDeposited12 | null>(
      store.get("DonationDeposited12", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationMatchSetup12 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSetup12 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationMatchSetup12 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSetup12", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationMatchSetup12 | null {
    return changetype<DonationMatchSetup12 | null>(
      store.get_in_block("DonationMatchSetup12", id.toHexString())
    );
  }

  static load(id: Bytes): DonationMatchSetup12 | null {
    return changetype<DonationMatchSetup12 | null>(
      store.get("DonationMatchSetup12", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get donationMatchContract(): Bytes {
    let value = this.get("donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set donationMatchContract(value: Bytes) {
    this.set("donationMatchContract", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DonationWithdrawn12 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationWithdrawn12 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DonationWithdrawn12 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationWithdrawn12", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): DonationWithdrawn12 | null {
    return changetype<DonationWithdrawn12 | null>(
      store.get_in_block("DonationWithdrawn12", id.toHexString())
    );
  }

  static load(id: Bytes): DonationWithdrawn12 | null {
    return changetype<DonationWithdrawn12 | null>(
      store.get("DonationWithdrawn12", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentCreated12 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentCreated12 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentCreated12 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentCreated12", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentCreated12 | null {
    return changetype<EndowmentCreated12 | null>(
      store.get_in_block("EndowmentCreated12", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentCreated12 | null {
    return changetype<EndowmentCreated12 | null>(
      store.get("EndowmentCreated12", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class EndowmentSettingUpdated12 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EndowmentSettingUpdated12 entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type EndowmentSettingUpdated12 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentSettingUpdated12", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): EndowmentSettingUpdated12 | null {
    return changetype<EndowmentSettingUpdated12 | null>(
      store.get_in_block("EndowmentSettingUpdated12", id.toHexString())
    );
  }

  static load(id: Bytes): EndowmentSettingUpdated12 | null {
    return changetype<EndowmentSettingUpdated12 | null>(
      store.get("EndowmentSettingUpdated12", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get setting(): string {
    let value = this.get("setting");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set setting(value: string) {
    this.set("setting", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class RemoveAllowance12 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveAllowance12 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveAllowance12 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveAllowance12", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveAllowance12 | null {
    return changetype<RemoveAllowance12 | null>(
      store.get_in_block("RemoveAllowance12", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveAllowance12 | null {
    return changetype<RemoveAllowance12 | null>(
      store.get("RemoveAllowance12", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SwapToken12 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SwapToken12 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SwapToken12 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SwapToken12", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SwapToken12 | null {
    return changetype<SwapToken12 | null>(
      store.get_in_block("SwapToken12", id.toHexString())
    );
  }

  static load(id: Bytes): SwapToken12 | null {
    return changetype<SwapToken12 | null>(
      store.get("SwapToken12", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateConfig12 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateConfig12 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateConfig12 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateConfig12", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateConfig12 | null {
    return changetype<UpdateConfig12 | null>(
      store.get_in_block("UpdateConfig12", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateConfig12 | null {
    return changetype<UpdateConfig12 | null>(
      store.get("UpdateConfig12", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get config_owner(): Bytes {
    let value = this.get("config_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_owner(value: Bytes) {
    this.set("config_owner", Value.fromBytes(value));
  }

  get config_version(): string {
    let value = this.get("config_version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set config_version(value: string) {
    this.set("config_version", Value.fromString(value));
  }

  get config_registrarContract(): Bytes {
    let value = this.get("config_registrarContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_registrarContract(value: Bytes) {
    this.set("config_registrarContract", Value.fromBytes(value));
  }

  get config_nextAccountId(): BigInt {
    let value = this.get("config_nextAccountId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_nextAccountId(value: BigInt) {
    this.set("config_nextAccountId", Value.fromBigInt(value));
  }

  get config_maxGeneralCategoryId(): BigInt {
    let value = this.get("config_maxGeneralCategoryId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_maxGeneralCategoryId(value: BigInt) {
    this.set("config_maxGeneralCategoryId", Value.fromBigInt(value));
  }

  get config_subDao(): Bytes {
    let value = this.get("config_subDao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_subDao(value: Bytes) {
    this.set("config_subDao", Value.fromBytes(value));
  }

  get config_gateway(): Bytes {
    let value = this.get("config_gateway");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gateway(value: Bytes) {
    this.set("config_gateway", Value.fromBytes(value));
  }

  get config_gasReceiver(): Bytes {
    let value = this.get("config_gasReceiver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_gasReceiver(value: Bytes) {
    this.set("config_gasReceiver", Value.fromBytes(value));
  }

  get config_reentrancyGuardLocked(): boolean {
    let value = this.get("config_reentrancyGuardLocked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set config_reentrancyGuardLocked(value: boolean) {
    this.set("config_reentrancyGuardLocked", Value.fromBoolean(value));
  }

  get config_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("config_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set config_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "config_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get config_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("config_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set config_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("config_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class UpdateEndowment12 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEndowment12 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdateEndowment12 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEndowment12", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdateEndowment12 | null {
    return changetype<UpdateEndowment12 | null>(
      store.get_in_block("UpdateEndowment12", id.toHexString())
    );
  }

  static load(id: Bytes): UpdateEndowment12 | null {
    return changetype<UpdateEndowment12 | null>(
      store.get("UpdateEndowment12", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get Accounts_id(): BigInt {
    let value = this.get("Accounts_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set Accounts_id(value: BigInt) {
    this.set("Accounts_id", Value.fromBigInt(value));
  }

  get endowment_owner(): Bytes {
    let value = this.get("endowment_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_owner(value: Bytes) {
    this.set("endowment_owner", Value.fromBytes(value));
  }

  get endowment_name(): string {
    let value = this.get("endowment_name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_name(value: string) {
    this.set("endowment_name", Value.fromString(value));
  }

  get endowment_sdgs(): Array<BigInt> {
    let value = this.get("endowment_sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set endowment_sdgs(value: Array<BigInt>) {
    this.set("endowment_sdgs", Value.fromBigIntArray(value));
  }

  get endowment_tier(): i32 {
    let value = this.get("endowment_tier");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_tier(value: i32) {
    this.set("endowment_tier", Value.fromI32(value));
  }

  get endowment_endowType(): i32 {
    let value = this.get("endowment_endowType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endowment_endowType(value: i32) {
    this.set("endowment_endowType", Value.fromI32(value));
  }

  get endowment_logo(): string {
    let value = this.get("endowment_logo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_logo(value: string) {
    this.set("endowment_logo", Value.fromString(value));
  }

  get endowment_image(): string {
    let value = this.get("endowment_image");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set endowment_image(value: string) {
    this.set("endowment_image", Value.fromString(value));
  }

  get endowment_maturityTime(): BigInt {
    let value = this.get("endowment_maturityTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_maturityTime(value: BigInt) {
    this.set("endowment_maturityTime", Value.fromBigInt(value));
  }

  get endowment_rebalance_rebalanceLiquidProfits(): boolean {
    let value = this.get("endowment_rebalance_rebalanceLiquidProfits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_rebalanceLiquidProfits(value: boolean) {
    this.set(
      "endowment_rebalance_rebalanceLiquidProfits",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_lockedRebalanceToLiquid(): BigInt {
    let value = this.get("endowment_rebalance_lockedRebalanceToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_lockedRebalanceToLiquid(value: BigInt) {
    this.set(
      "endowment_rebalance_lockedRebalanceToLiquid",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_interestDistribution(): BigInt {
    let value = this.get("endowment_rebalance_interestDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_interestDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_interestDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_lockedPrincipleToLiquid(): boolean {
    let value = this.get("endowment_rebalance_lockedPrincipleToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_rebalance_lockedPrincipleToLiquid(value: boolean) {
    this.set(
      "endowment_rebalance_lockedPrincipleToLiquid",
      Value.fromBoolean(value)
    );
  }

  get endowment_rebalance_principleDistribution(): BigInt {
    let value = this.get("endowment_rebalance_principleDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_principleDistribution(value: BigInt) {
    this.set(
      "endowment_rebalance_principleDistribution",
      Value.fromBigInt(value)
    );
  }

  get endowment_rebalance_basis(): BigInt {
    let value = this.get("endowment_rebalance_basis");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_rebalance_basis(value: BigInt) {
    this.set("endowment_rebalance_basis", Value.fromBigInt(value));
  }

  get endowment_pendingRedemptions(): BigInt {
    let value = this.get("endowment_pendingRedemptions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_pendingRedemptions(value: BigInt) {
    this.set("endowment_pendingRedemptions", Value.fromBigInt(value));
  }

  get endowment_proposalLink(): BigInt {
    let value = this.get("endowment_proposalLink");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_proposalLink(value: BigInt) {
    this.set("endowment_proposalLink", Value.fromBigInt(value));
  }

  get endowment_multisig(): Bytes {
    let value = this.get("endowment_multisig");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_multisig(value: Bytes) {
    this.set("endowment_multisig", Value.fromBytes(value));
  }

  get endowment_dao(): Bytes {
    let value = this.get("endowment_dao");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_dao(value: Bytes) {
    this.set("endowment_dao", Value.fromBytes(value));
  }

  get endowment_daoToken(): Bytes {
    let value = this.get("endowment_daoToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_daoToken(value: Bytes) {
    this.set("endowment_daoToken", Value.fromBytes(value));
  }

  get endowment_donationMatchActive(): boolean {
    let value = this.get("endowment_donationMatchActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_donationMatchActive(value: boolean) {
    this.set("endowment_donationMatchActive", Value.fromBoolean(value));
  }

  get endowment_donationMatchContract(): Bytes {
    let value = this.get("endowment_donationMatchContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_donationMatchContract(value: Bytes) {
    this.set("endowment_donationMatchContract", Value.fromBytes(value));
  }

  get endowment_allowlistedBeneficiaries(): Array<Bytes> {
    let value = this.get("endowment_allowlistedBeneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedBeneficiaries(value: Array<Bytes>) {
    this.set("endowment_allowlistedBeneficiaries", Value.fromBytesArray(value));
  }

  get endowment_allowlistedContributors(): Array<Bytes> {
    let value = this.get("endowment_allowlistedContributors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_allowlistedContributors(value: Array<Bytes>) {
    this.set("endowment_allowlistedContributors", Value.fromBytesArray(value));
  }

  get endowment_maturityAllowlist(): Array<Bytes> {
    let value = this.get("endowment_maturityAllowlist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set endowment_maturityAllowlist(value: Array<Bytes>) {
    this.set("endowment_maturityAllowlist", Value.fromBytesArray(value));
  }

  get endowment_earlyLockedWithdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_earlyLockedWithdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_earlyLockedWithdrawFee_payoutAddress(value: Bytes) {
    this.set(
      "endowment_earlyLockedWithdrawFee_payoutAddress",
      Value.fromBytes(value)
    );
  }

  get endowment_earlyLockedWithdrawFee_bps(): BigInt {
    let value = this.get("endowment_earlyLockedWithdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_earlyLockedWithdrawFee_bps(value: BigInt) {
    this.set("endowment_earlyLockedWithdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_withdrawFee_payoutAddress(): Bytes {
    let value = this.get("endowment_withdrawFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_withdrawFee_payoutAddress(value: Bytes) {
    this.set("endowment_withdrawFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_withdrawFee_bps(): BigInt {
    let value = this.get("endowment_withdrawFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_withdrawFee_bps(value: BigInt) {
    this.set("endowment_withdrawFee_bps", Value.fromBigInt(value));
  }

  get endowment_depositFee_payoutAddress(): Bytes {
    let value = this.get("endowment_depositFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_depositFee_payoutAddress(value: Bytes) {
    this.set("endowment_depositFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_depositFee_bps(): BigInt {
    let value = this.get("endowment_depositFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_depositFee_bps(value: BigInt) {
    this.set("endowment_depositFee_bps", Value.fromBigInt(value));
  }

  get endowment_balanceFee_payoutAddress(): Bytes {
    let value = this.get("endowment_balanceFee_payoutAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_balanceFee_payoutAddress(value: Bytes) {
    this.set("endowment_balanceFee_payoutAddress", Value.fromBytes(value));
  }

  get endowment_balanceFee_bps(): BigInt {
    let value = this.get("endowment_balanceFee_bps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_balanceFee_bps(value: BigInt) {
    this.set("endowment_balanceFee_bps", Value.fromBigInt(value));
  }

  get endowment_settingsController_acceptedTokens_locked(): boolean {
    let value = this.get("endowment_settingsController_acceptedTokens_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_acceptedTokens_locked(value: boolean) {
    this.set(
      "endowment_settingsController_acceptedTokens_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_acceptedTokens_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_acceptedTokens_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_acceptedTokens_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_acceptedTokens_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_lockedInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_lockedInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_lockedInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_liquidInvestmentManagement_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_liquidInvestmentManagement_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_liquidInvestmentManagement_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedBeneficiaries_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedBeneficiaries_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedBeneficiaries_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_allowlistedContributors_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_allowlistedContributors_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_allowlistedContributors_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_allowlistedContributors_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_allowlistedContributors_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityAllowlist_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityAllowlist_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityAllowlist_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityAllowlist_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityAllowlist_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityAllowlist_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_maturityTime_locked(): boolean {
    let value = this.get("endowment_settingsController_maturityTime_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_maturityTime_locked(value: boolean) {
    this.set(
      "endowment_settingsController_maturityTime_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_maturityTime_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_maturityTime_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_maturityTime_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_maturityTime_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_maturityTime_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_locked(
    value: boolean
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_earlyLockedWithdrawFee_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_earlyLockedWithdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_withdrawFee_locked(): boolean {
    let value = this.get("endowment_settingsController_withdrawFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_withdrawFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_withdrawFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_withdrawFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_withdrawFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_withdrawFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_withdrawFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_depositFee_locked(): boolean {
    let value = this.get("endowment_settingsController_depositFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_depositFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_depositFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_depositFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_depositFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_depositFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_depositFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_depositFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_depositFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_balanceFee_locked(): boolean {
    let value = this.get("endowment_settingsController_balanceFee_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_balanceFee_locked(value: boolean) {
    this.set(
      "endowment_settingsController_balanceFee_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_balanceFee_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_balanceFee_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_balanceFee_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_balanceFee_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_balanceFee_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_name_locked(): boolean {
    let value = this.get("endowment_settingsController_name_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_name_locked(value: boolean) {
    this.set(
      "endowment_settingsController_name_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_name_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_name_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_name_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_name_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_name_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_name_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_name_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_name_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_image_locked(): boolean {
    let value = this.get("endowment_settingsController_image_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_image_locked(value: boolean) {
    this.set(
      "endowment_settingsController_image_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_image_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_image_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_image_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_image_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_image_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_image_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_image_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_image_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_logo_locked(): boolean {
    let value = this.get("endowment_settingsController_logo_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_logo_locked(value: boolean) {
    this.set(
      "endowment_settingsController_logo_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_logo_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_logo_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_logo_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_logo_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_logo_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_logo_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_logo_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_logo_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_sdgs_locked(): boolean {
    let value = this.get("endowment_settingsController_sdgs_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_sdgs_locked(value: boolean) {
    this.set(
      "endowment_settingsController_sdgs_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_addr(): Bytes {
    let value = this.get("endowment_settingsController_sdgs_delegate_addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_sdgs_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_sdgs_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_sdgs_delegate_expires(): BigInt {
    let value = this.get("endowment_settingsController_sdgs_delegate_expires");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_sdgs_delegate_expires(value: BigInt) {
    this.set(
      "endowment_settingsController_sdgs_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_splitToLiquid_locked(): boolean {
    let value = this.get("endowment_settingsController_splitToLiquid_locked");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_splitToLiquid_locked(value: boolean) {
    this.set(
      "endowment_settingsController_splitToLiquid_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_addr(value: Bytes) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_splitToLiquid_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_splitToLiquid_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_splitToLiquid_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_splitToLiquid_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_locked(): boolean {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_locked"
    );
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_settingsController_ignoreUserSplits_locked(value: boolean) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_locked",
      Value.fromBoolean(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_addr(): Bytes {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_addr"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_addr(
    value: Bytes
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_addr",
      Value.fromBytes(value)
    );
  }

  get endowment_settingsController_ignoreUserSplits_delegate_expires(): BigInt {
    let value = this.get(
      "endowment_settingsController_ignoreUserSplits_delegate_expires"
    );
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_settingsController_ignoreUserSplits_delegate_expires(
    value: BigInt
  ) {
    this.set(
      "endowment_settingsController_ignoreUserSplits_delegate_expires",
      Value.fromBigInt(value)
    );
  }

  get endowment_parent(): BigInt {
    let value = this.get("endowment_parent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_parent(value: BigInt) {
    this.set("endowment_parent", Value.fromBigInt(value));
  }

  get endowment_ignoreUserSplits(): boolean {
    let value = this.get("endowment_ignoreUserSplits");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set endowment_ignoreUserSplits(value: boolean) {
    this.set("endowment_ignoreUserSplits", Value.fromBoolean(value));
  }

  get endowment_splitToLiquid_max(): BigInt {
    let value = this.get("endowment_splitToLiquid_max");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_max(value: BigInt) {
    this.set("endowment_splitToLiquid_max", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_min(): BigInt {
    let value = this.get("endowment_splitToLiquid_min");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_min(value: BigInt) {
    this.set("endowment_splitToLiquid_min", Value.fromBigInt(value));
  }

  get endowment_splitToLiquid_defaultSplit(): BigInt {
    let value = this.get("endowment_splitToLiquid_defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_splitToLiquid_defaultSplit(value: BigInt) {
    this.set("endowment_splitToLiquid_defaultSplit", Value.fromBigInt(value));
  }

  get endowment_referralId(): BigInt {
    let value = this.get("endowment_referralId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endowment_referralId(value: BigInt) {
    this.set("endowment_referralId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
