# ~~~~~~~~~~~~~~~~~
# ~~~~~ ENUMS ~~~~~
# ~~~~~~~~~~~~~~~~~
enum AccountType {
  Locked
  Liquid
}

enum EndowmentType {
  Charity
  Normal
}

enum StrategyApprovalState {
  NOT_APPROVED
  APPROVED
  WITHDRAW_ONLY
  DEPRECATED
}

# ~~~~~~~~~~~~~~~~
# ~~~ ENTITIES ~~~
# ~~~~~~~~~~~~~~~~
type User @entity(immutable: true) {
  id: Bytes! # set as wallet/contract address
  multiSigs: [MultiSigOwner]! @derivedFrom(field: "owner")
  applicationProposals: [ApplicationProposal]! @derivedFrom(field: "proposer")
  tokenAllowances: [EndowmentTokenAllowanceSpender]! @derivedFrom(field: "spender")
  closingBeneficiary: ClosingBeneficiary @derivedFrom(field: "wallet")
}

type MultiSig @entity {
  id: String!
  address: Bytes!
  owners: [MultiSigOwner!]! @derivedFrom(field: "multiSig")
  transactions: [MultiSigTransaction!]! @derivedFrom(field: "multiSig")
  transactionExpiry: BigInt!
  requireExecution: Boolean!
  approvalsRequired: BigInt!
}

type MultiSigOwner @entity {
  id: String! # set as MultiSig.id.concat(User.id)
  multiSig: MultiSig!
  owner: User!
  active: Boolean!
}

type MultiSigTransaction @entity {
  id: String! # set as MutiSig.id.concat(Transaction.id)
  transactionId: BigInt!
  multiSig: MultiSig!
  proposer: User!
  executed: Boolean!
  expiry: BigInt!
  metadata: Bytes!
  blockTimestamp: BigInt!
  confirmations: [TransactionConfirmation!]! @derivedFrom(field: "transaction")
}

type TransactionConfirmation @entity {
  id: String! # MultiSigTransaction.id.concat(User.id)
  transaction: MultiSigTransaction!
  owner: User!
  confirmed: Boolean!
}

type ApplicationProposal @entity {
  id: String! # Proposal ID
  executed: Boolean!
  charityName: String!
  proposer: User!
  expiry: BigInt!
  metadata: Bytes!
  blockTimestamp: BigInt!
  confirmations: [ApplicationConfirmation]! @derivedFrom(field: "proposal")
}

type ApplicationConfirmation @entity {
  id: String! # set as (Proposal ID + User Addr)
  proposal: ApplicationProposal!
  owner: User!
  confirmed: Boolean!
}

### Accounts - Endowment
type Endowment @entity(immutable: true) {
  id: String! # Endowment ID as string
  endowmentType: EndowmentType!
  closingBeneficiary: ClosingBeneficiary @derivedFrom(field: "endowment")
  balancesLocked: [EndowmentTokenLocked]! @derivedFrom(field: "endowment")
  balancesLiquid: [EndowmentTokenLiquid]! @derivedFrom(field: "endowment")
  deposits: [EndowmentDepositTransaction]! @derivedFrom(field: "endowment")
  withdrawals: [EndowmentWithdrawTransaction]! @derivedFrom(field: "endowment")
  swaps: [EndowmentSwapTransaction]! @derivedFrom(field: "endowment")
}

type ClosingBeneficiary @entity(immutable: true) {
  id: Bytes! # tx hash
  endowment: Endowment
  wallet: String
}

type EndowmentTokenLocked @entity {
  id: String! # set as Endowment.id.concat(Token contract addr)`
  endowment: Endowment!
  token: Bytes!
  amount: BigInt!
}

type EndowmentTokenLiquid @entity {
  id: String! # set as Endowment.id.concat(Token contract addr)`
  endowment: Endowment!
  token: Bytes!
  amount: BigInt!
  allowanceOutstanding: BigInt!
  allowanceSpenders: [EndowmentTokenAllowanceSpender]! @derivedFrom(field: "token")
}

type EndowmentTokenAllowanceSpender @entity {
  id: String! # set as EndowmenTokenLiquid.id.concat(User.id)`
  token: EndowmentTokenLiquid!
  spender: User!
  amount: BigInt!
}

type EndowmentDepositTransaction @entity(immutable: true) {
  id: Bytes! # transaction hash
  endowment: Endowment!
  token: Bytes!
  amountLocked: BigInt!
  amountLiquid: BigInt!
  blockTimestamp: BigInt!
}

type EndowmentWithdrawTransaction @entity(immutable: true) {
  id: Bytes! # transaction hash
  endowment: Endowment!
  accountType: AccountType!
  token: Bytes!
  amount: BigInt!
  beneficiaryEndowId: Int
  beneficiaryAddr: Bytes
  blockTimestamp: BigInt!
}

type EndowmentSwapTransaction @entity(immutable: true) {
  id: Bytes! # transaction Hash
  endowment: Endowment!
  accountType: AccountType!
  tokenIn: Bytes!
  amountIn: BigInt!
  tokenOut: Bytes!
  amountOut: BigInt!
  blockTimestamp: BigInt!
}

type Strategy @entity {
  id: Bytes! # strategy selector
  network: String!
  state: StrategyApprovalState!
  vaultLocked: Vault
  vaultLiquid: Vault
}

type Vault @entity {
  id: Bytes! # Vault.address
  type: AccountType!
  strategy: Strategy!
  address: Bytes!
  baseToken: Bytes!
  yieldToken: Bytes!
  totalShares: BigInt!
  shares: [VaultShare!]! @derivedFrom(field: "vault")
}

type VaultShare @entity {
  id: String! # Vault.id.concat(Endowment.id)
  vault: Vault!
  endowmentId: String! # we save only Endowment ID so that this entity can be used even on chains where there are no Endowments deployed
  deposited: BigInt!
  shares: BigInt!
}
