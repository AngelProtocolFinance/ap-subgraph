// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get action(): DepositActionStruct {
    return changetype<DepositActionStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class DepositActionStruct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class FallbackRefund extends ethereum.Event {
  get params(): FallbackRefund__Params {
    return new FallbackRefund__Params(this);
  }
}

export class FallbackRefund__Params {
  _event: FallbackRefund;

  constructor(event: FallbackRefund) {
    this._event = event;
  }

  get action(): FallbackRefundActionStruct {
    return changetype<FallbackRefundActionStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FallbackRefundActionStruct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get action(): HarvestActionStruct {
    return changetype<HarvestActionStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class HarvestActionStruct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LogError extends ethereum.Event {
  get params(): LogError__Params {
    return new LogError__Params(this);
  }
}

export class LogError__Params {
  _event: LogError;

  constructor(event: LogError) {
    this._event = event;
  }

  get action(): LogErrorActionStruct {
    return changetype<LogErrorActionStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get message(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class LogErrorActionStruct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class LogErrorBytes extends ethereum.Event {
  get params(): LogErrorBytes__Params {
    return new LogErrorBytes__Params(this);
  }
}

export class LogErrorBytes__Params {
  _event: LogErrorBytes;

  constructor(event: LogErrorBytes) {
    this._event = event;
  }

  get action(): LogErrorBytesActionStruct {
    return changetype<LogErrorBytesActionStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get data(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class LogErrorBytesActionStruct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redemption extends ethereum.Event {
  get params(): Redemption__Params {
    return new Redemption__Params(this);
  }
}

export class Redemption__Params {
  _event: Redemption;

  constructor(event: Redemption) {
    this._event = event;
  }

  get action(): RedemptionActionStruct {
    return changetype<RedemptionActionStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RedemptionActionStruct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class TokensSent extends ethereum.Event {
  get params(): TokensSent__Params {
    return new TokensSent__Params(this);
  }
}

export class TokensSent__Params {
  _event: TokensSent;

  constructor(event: TokensSent) {
    this._event = event;
  }

  get action(): TokensSentActionStruct {
    return changetype<TokensSentActionStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokensSentActionStruct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class Router__executeLocalResultValue0Struct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class Router__executeWithTokenLocalResultValue0Struct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class Router extends ethereum.SmartContract {
  static bind(address: Address): Router {
    return new Router("Router", address);
  }

  chain(): string {
    let result = super.call("chain", "chain():(string)", []);

    return result[0].toString();
  }

  try_chain(): ethereum.CallResult<string> {
    let result = super.tryCall("chain", "chain():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  executeLocal(
    sourceChain: string,
    sourceAddress: string,
    payload: Bytes
  ): Router__executeLocalResultValue0Struct {
    let result = super.call(
      "executeLocal",
      "executeLocal(string,string,bytes):((string,bytes4,bytes4,uint32[],address,uint256,uint256,uint8))",
      [
        ethereum.Value.fromString(sourceChain),
        ethereum.Value.fromString(sourceAddress),
        ethereum.Value.fromBytes(payload)
      ]
    );

    return changetype<Router__executeLocalResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_executeLocal(
    sourceChain: string,
    sourceAddress: string,
    payload: Bytes
  ): ethereum.CallResult<Router__executeLocalResultValue0Struct> {
    let result = super.tryCall(
      "executeLocal",
      "executeLocal(string,string,bytes):((string,bytes4,bytes4,uint32[],address,uint256,uint256,uint8))",
      [
        ethereum.Value.fromString(sourceChain),
        ethereum.Value.fromString(sourceAddress),
        ethereum.Value.fromBytes(payload)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Router__executeLocalResultValue0Struct>(value[0].toTuple())
    );
  }

  executeWithTokenLocal(
    sourceChain: string,
    sourceAddress: string,
    payload: Bytes,
    tokenSymbol: string,
    amount: BigInt
  ): Router__executeWithTokenLocalResultValue0Struct {
    let result = super.call(
      "executeWithTokenLocal",
      "executeWithTokenLocal(string,string,bytes,string,uint256):((string,bytes4,bytes4,uint32[],address,uint256,uint256,uint8))",
      [
        ethereum.Value.fromString(sourceChain),
        ethereum.Value.fromString(sourceAddress),
        ethereum.Value.fromBytes(payload),
        ethereum.Value.fromString(tokenSymbol),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return changetype<Router__executeWithTokenLocalResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_executeWithTokenLocal(
    sourceChain: string,
    sourceAddress: string,
    payload: Bytes,
    tokenSymbol: string,
    amount: BigInt
  ): ethereum.CallResult<Router__executeWithTokenLocalResultValue0Struct> {
    let result = super.tryCall(
      "executeWithTokenLocal",
      "executeWithTokenLocal(string,string,bytes,string,uint256):((string,bytes4,bytes4,uint32[],address,uint256,uint256,uint8))",
      [
        ethereum.Value.fromString(sourceChain),
        ethereum.Value.fromString(sourceAddress),
        ethereum.Value.fromBytes(payload),
        ethereum.Value.fromString(tokenSymbol),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Router__executeWithTokenLocalResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  gasReceiver(): Address {
    let result = super.call("gasReceiver", "gasReceiver():(address)", []);

    return result[0].toAddress();
  }

  try_gasReceiver(): ethereum.CallResult<Address> {
    let result = super.tryCall("gasReceiver", "gasReceiver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gateway(): Address {
    let result = super.call("gateway", "gateway():(address)", []);

    return result[0].toAddress();
  }

  try_gateway(): ethereum.CallResult<Address> {
    let result = super.tryCall("gateway", "gateway():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registrar(): Address {
    let result = super.call("registrar", "registrar():(address)", []);

    return result[0].toAddress();
  }

  try_registrar(): ethereum.CallResult<Address> {
    let result = super.tryCall("registrar", "registrar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get action(): DepositCallActionStruct {
    return changetype<DepositCallActionStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get tokenSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCallActionStruct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get commandId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sourceChain(): string {
    return this._call.inputValues[1].value.toString();
  }

  get sourceAddress(): string {
    return this._call.inputValues[2].value.toString();
  }

  get payload(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class ExecuteLocalCall extends ethereum.Call {
  get inputs(): ExecuteLocalCall__Inputs {
    return new ExecuteLocalCall__Inputs(this);
  }

  get outputs(): ExecuteLocalCall__Outputs {
    return new ExecuteLocalCall__Outputs(this);
  }
}

export class ExecuteLocalCall__Inputs {
  _call: ExecuteLocalCall;

  constructor(call: ExecuteLocalCall) {
    this._call = call;
  }

  get sourceChain(): string {
    return this._call.inputValues[0].value.toString();
  }

  get sourceAddress(): string {
    return this._call.inputValues[1].value.toString();
  }

  get payload(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExecuteLocalCall__Outputs {
  _call: ExecuteLocalCall;

  constructor(call: ExecuteLocalCall) {
    this._call = call;
  }

  get value0(): ExecuteLocalCallValue0Struct {
    return changetype<ExecuteLocalCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class ExecuteLocalCallValue0Struct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class ExecuteWithTokenCall extends ethereum.Call {
  get inputs(): ExecuteWithTokenCall__Inputs {
    return new ExecuteWithTokenCall__Inputs(this);
  }

  get outputs(): ExecuteWithTokenCall__Outputs {
    return new ExecuteWithTokenCall__Outputs(this);
  }
}

export class ExecuteWithTokenCall__Inputs {
  _call: ExecuteWithTokenCall;

  constructor(call: ExecuteWithTokenCall) {
    this._call = call;
  }

  get commandId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sourceChain(): string {
    return this._call.inputValues[1].value.toString();
  }

  get sourceAddress(): string {
    return this._call.inputValues[2].value.toString();
  }

  get payload(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[4].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ExecuteWithTokenCall__Outputs {
  _call: ExecuteWithTokenCall;

  constructor(call: ExecuteWithTokenCall) {
    this._call = call;
  }
}

export class ExecuteWithTokenLocalCall extends ethereum.Call {
  get inputs(): ExecuteWithTokenLocalCall__Inputs {
    return new ExecuteWithTokenLocalCall__Inputs(this);
  }

  get outputs(): ExecuteWithTokenLocalCall__Outputs {
    return new ExecuteWithTokenLocalCall__Outputs(this);
  }
}

export class ExecuteWithTokenLocalCall__Inputs {
  _call: ExecuteWithTokenLocalCall;

  constructor(call: ExecuteWithTokenLocalCall) {
    this._call = call;
  }

  get sourceChain(): string {
    return this._call.inputValues[0].value.toString();
  }

  get sourceAddress(): string {
    return this._call.inputValues[1].value.toString();
  }

  get payload(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ExecuteWithTokenLocalCall__Outputs {
  _call: ExecuteWithTokenLocalCall;

  constructor(call: ExecuteWithTokenLocalCall) {
    this._call = call;
  }

  get value0(): ExecuteWithTokenLocalCallValue0Struct {
    return changetype<ExecuteWithTokenLocalCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class ExecuteWithTokenLocalCallValue0Struct extends ethereum.Tuple {
  get destinationChain(): string {
    return this[0].toString();
  }

  get strategyId(): Bytes {
    return this[1].toBytes();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }

  get accountIds(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get token(): Address {
    return this[4].toAddress();
  }

  get lockAmt(): BigInt {
    return this[5].toBigInt();
  }

  get liqAmt(): BigInt {
    return this[6].toBigInt();
  }

  get status(): i32 {
    return this[7].toI32();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _chain(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _gateway(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _gasReceiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _registrar(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SendTokensCall extends ethereum.Call {
  get inputs(): SendTokensCall__Inputs {
    return new SendTokensCall__Inputs(this);
  }

  get outputs(): SendTokensCall__Outputs {
    return new SendTokensCall__Outputs(this);
  }
}

export class SendTokensCall__Inputs {
  _call: SendTokensCall;

  constructor(call: SendTokensCall) {
    this._call = call;
  }

  get destinationChain(): string {
    return this._call.inputValues[0].value.toString();
  }

  get destinationAddress(): string {
    return this._call.inputValues[1].value.toString();
  }

  get payload(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get symbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get gasToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get gasFeeAmt(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SendTokensCall__Outputs {
  _call: SendTokensCall;

  constructor(call: SendTokensCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
