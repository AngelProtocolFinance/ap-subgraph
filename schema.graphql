# ~~~~~~~~~~~~~~~~~
# ~~~~~ ENUMS ~~~~~
# ~~~~~~~~~~~~~~~~~
enum ApplicationProposalStatus {
  Pending
  Approved
  Rejected
}

enum AccountType {
  Locked
  Liquid
}

enum EndowmentType {
  Charity
  Normal
}

enum Tier {
  None
  Level1
  Level2
  Level3
}

enum FeeTypes {
  Default
  Harvest
  WithdrawCharity
  WithdrawNormal
  EarlyLockedWithdrawCharity
  EarlyLockedWithdrawNormal
}

enum DelegateAction {
  Set
  Revoke
}

enum MultiSigType {
  ApTeam
  Applications
  Endowment
  Generic
}

# ~~~~~~~~~~~~~~~~
# ~~~ ENTITIES ~~~
# ~~~~~~~~~~~~~~~~
type Token @entity(immutable: true) {
  id: Bytes! # set as contract address
}

type User @entity(immutable: true) {
  id: Bytes! # set as wallet/contract address
  multiSigs: [MultiSig]! @derivedFrom("owner")
  applications: [ApplicationProposal]! @derivedFrom("proposer")
  allowancesLocked: [EndowmentTokenLockedAllowance]! @derivedFrom("address")
  allowancesLiquid: [EndowmentTokenLiquidAllowance]! @derivedFrom("address")
}

type MultiSig @entity {
  id: Bytes! # proxy contract address
  owners: [MultiSigOwner!]! @derivedFrom(field: "multiSig")
  transactions: [MultiSigTransaction]! @derivedFrom(field: "multiSig")
  transactionExpiry: BigInt!
  requireExecution: Boolean!
  approvalsRequired: BigInt!
  multiSigType: MultiSigType!
  applicationsMultiSig: ApplicationsMultiSig
  endowmentMultiSig: Int
}

type MultiSigOwner @entity(immutable: true) {
  id: String! # set as MultiSig.id.concat(User.id)
  multiSig: Multisig!
  owner: User!
}

type MultiSigTransaction @entity {
  id: String! # set as MutiSig.id.concat(Transaction.id)
  transactionId: BigInt!
  multiSig: MultiSig!
  proposer: User!
  executed: Boolean!
  expiry: BigInt!
  blockTimestamp: BigInt!
  confirmations: [TransactionConfirmation!]! @derivedFrom(field: "transaction")
}

type TransactionConfirmation @entity {
  id String! # MultiSigTransaction.id.concat(User.id)
  transaction: MultiSigTransaction!
  owner: User!
  confirmed: Boolean!
}

type ApplicationsMultisig @entity {
  id: Bytes! # set as MutiSig.id
  proposals: [ApplicationProposal]! @derivedFrom("multiSig")
  seedSplitToLiquid: BigInt!
  gasAmount: BigInt!
  seedAsset: Bytes!
  seedAmount: BigInt!
}

type ApplicationProposal @entity {
  id: String! # Proposal transaction hash
  multiSig: ApplicationsMultisig!
  charityName: String!
  proposer: User!
  executed: Boolean!
  expiry: BigInt!
  blockTimestamp: BigInt!
  confirmations: [ApplicationConfirmation]! @derivedFrom(field: "proposal")
}

type ApplicationConfirmation @entity {
  id String! # MultiSig.id.concat(TranactionHash.concat(User.id))
  proposal: ApplicationProposal!
  owner: User!
  confirmed: Boolean!
}

### Endowment MultiSig Factory
type ContractInstantiated @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  instantiation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ImplementationUpdated @entity(immutable: true) {
  id: Bytes!
  implementationAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigFactoryOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProxyAdminUpdated @entity(immutable: true) {
  id: Bytes!
  admin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

### Accounts - Endowment
type Endowment@entity(immutable: true) {
  id: String! # Endowment ID
  endowmentType: EndowmentType!
  metadata: EndowmentMetadata!
  balancesLocked: [EndowmentTokenLocked]! @derivedFrom(field: "endowment")
  balancesLiquid: [EndowmentTokenLiquid]! @derivedFrom(field: "endowment")
  allowancesLocked: [EndowmentTokenAllowanceLocked]! @derivedFrom(field: "endowmentToken")
  allowancesLiquid: [EndowmentTokenAllowanceLiquid]! @derivedFrom(field: "endowmentToken")
  deposits: [EndowmentDepositTransaction]! @derivedFrom(field: "endowment")
  withdrawals: [EndowmentWithdrawTransaction]! @derivedFrom(field: "endowment")
  swaps: [EndowmentSwapTransaction]! @derivedFrom("endowment")
}

type EndowmentTokenLocked @entity {
  id: String! # set as Token.id.concat(Endowment.id)`
  endowment: Endowment!
  token: Token!
  amount: BigInt!
}

type EndowmentTokenLiquid @entity {
  id: String! # set as Token.id.concat(Endowment.id)`
  endowment: Endowment!
  token: Bytes!
  amount: BigInt!
}

type EndowmentTokenAllowanceLocked @entity {
  id: String! # set as Token.id.concat(Endowment.id)`
  endowmentToken: EndowmentTokenLocked!
  address: User!
  amount: BigInt!
}

type EndowmentTokenAllowanceLiquid @entity {
  id: String! # set as Token.id.concat(Endowment.id)`
  endowmentToken: EndowmentTokenLiquid!
  address: User!
  amount: BigInt!
}

type EndowmentDepositTransaction @entity(immutable: true) {
  id: Bytes! # transaction hash
  endowment: Endowment!
  token: String!
  lockedAmount: BigInt!
  liquidAmount: BigInt!
  blockTimestamp: BigInt!
}

type EndowmentWithdrawTransaction @entity(immutable: true) {
  id: Bytes! # transaction hash
  endowment: Endowment!
  beneficiary: BeneficiaryData!
  token: String!
  lockedAmount: BigInt!
  liquidAmount: BigInt!
  blockTimestamp: BigInt!
}

type EndowmentTokenSwap @entity(immutable: true) {
  id: Bytes! # use `${transactionHash}`
  endowment: Endowment!
  accountType: AccountType!
  tokenIn: Bytes! # address
  amountIn: BigInt! # uint256
  tokenOut: Bytes! # address
  amountOut: BigInt! # uint256
  blockTimestamp: BigInt!
}

type EndowmentMetadata @entity {
  id: String! # Endowment ID
  owner: Bytes!
  name: String!
  sdgs: [BigInt]!
  tier: Tier!
  logo: String!
  image: String!
  maturityTime: BigInt!
  rebalance: RebalanceParams!
  pendingRedemptions: BigInt!
  proposalLink: BigInt!
  multiSig: MultiSig!
  dao: Bytes!
  daoToken: Bytes!
  donationMatchActive: Boolean!
  donationMatchContract: Bytes!
  allowlistedBeneficiaries: [User]!
  allowlistedContributors: [User]!
  maturityAllowlist: [User]!
  earlyLockedWithdrawFee: FeeSetting!
  withdrawFee: FeeSetting!
  depositFee: FeeSetting!
  balanceFee: FeeSetting!
  settingsController: SettingsController!
  ignoreUserSplits: Boolean!
  splitToLiquid: SplitDetails!
  parent: Endowment
  referralId: Endowment
}

type BeneficiaryData @entity {
  endowId: Int
  fundId: BigInt
  addr: Bytes
}

type SplitDetails @entity {
  max: BigInt!
  min: BigInt!
  defaultSplit: BigInt!
}

type SettingsPermission @entity {
  locked: Boolean!
  delegate_addr: Bytes!
  delegate_expires: BigInt!
}

type SettingsController @entity {
  acceptedTokens: SettingsPermission!
  lockedInvestmentManagement: SettingsPermission!
  liquidInvestmentManagement: SettingsPermission!
  allowlistedBeneficiaries: SettingsPermission!
  allowlistedContributors: SettingsPermission!
  maturityAllowlist: SettingsPermission!
  maturityTime: SettingsPermission!
  earlyLockedWithdrawFee: SettingsPermission!
  withdrawFee: SettingsPermission!
  depositFee: SettingsPermission!
  balanceFee: SettingsPermission!
  name: SettingsPermission!
  image: SettingsPermission!
  logo: SettingsPermission!
  sdgs: SettingsPermission!
  splitToLiquid: SettingsPermission!
  ignoreUserSplits: SettingsPermission!
}

type FeeSetting @entity {
  payoutAddress: Bytes!
  bps: BigInt!
}
