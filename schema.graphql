type ExampleEntity @entity {
  id: Bytes!
  count: BigInt!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
}
type ApprovalsRequiredChanged @entity(immutable: true) {
  id: Bytes!
  approvalsRequired: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConfirmationRevoked @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigDeposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerAdded @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerRemoved @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequireExecutionChanged @entity(immutable: true) {
  id: Bytes!
  requireExecution: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransactionConfirmed @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransactionExecuted @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransactionExpiryChanged @entity(immutable: true) {
  id: Bytes!
  transactionExpiry: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransactionSubmitted @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ContractInstantiated @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  instantiation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ImplementationUpdated @entity(immutable: true) {
  id: Bytes!
  implementationAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigFactoryOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProxyAdminUpdated @entity(immutable: true) {
  id: Bytes!
  admin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type EndowmentMultiSigApprovalsRequiredChanged @entity(immutable: true) {
  id: Bytes!
  approvalsRequired: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigConfirmationRevoked @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigDeposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigOwnerAdded @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigOwnerRemoved @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigRequireExecutionChanged @entity(immutable: true) {
  id: Bytes!
  requireExecution: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigTransactionConfirmed @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigTransactionExecuted @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigTransactionExpiryChanged @entity(immutable: true) {
  id: Bytes!
  transactionExpiry: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigTransactionSubmitted @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AccountsContractStorageUpdated @entity(immutable: true) {
  id: Bytes!
  _chainName: String! # string
  _accountsContractAddress: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AngelProtocolParamsUpdated @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConfigUpdated @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeSettingsUpdated @entity(immutable: true) {
  id: Bytes!
  _feeType: Int! # uint8
  _bpsRate: BigInt! # uint256
  _payoutAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GasFeeUpdated @entity(immutable: true) {
  id: Bytes!
  _tokenAddr: Bytes! # address
  _gasFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RegistrarInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NetworkConnectionPosted @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NetworkConnectionRemoved @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RegistrarOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RebalanceParamsUpdated @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyApprovalUpdated @entity(immutable: true) {
  id: Bytes!
  _strategyId: Bytes! # bytes4
  _approvalState: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyParamsUpdated @entity(immutable: true) {
  id: Bytes!
  _strategyId: Bytes! # bytes4
  _lockAddr: Bytes! # address
  _liqAddr: Bytes! # address
  _approvalState: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenAcceptanceUpdated @entity(immutable: true) {
  id: Bytes!
  _tokenAddr: Bytes! # address
  _isAccepted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AllowanceRemoved @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  spender: Bytes! # address
  tokenAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AllowanceUpdated @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  spender: Bytes! # address
  tokenAddress: Bytes! # address
  allowance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AccountsConfigUpdated @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DaoContractCreated @entity(immutable: true) {
  id: Bytes!
  endowId: BigInt! # uint32
  daoAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DonationDeposited @entity(immutable: true) {
  id: Bytes!
  endowId: BigInt! # uint256
  tokenAddress: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DonationMatchCreated @entity(immutable: true) {
  id: Bytes!
  endowId: BigInt! # uint256
  donationMatchContract: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DonationWithdrawn @entity(immutable: true) {
  id: Bytes!
  endowId: BigInt! # uint256
  recipient: Bytes! # address
  tokenAddress: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentCreated @entity(immutable: true) {
  id: Bytes!
  endowId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentSettingUpdated @entity(immutable: true) {
  id: Bytes!
  endowId: BigInt! # uint256
  setting: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentUpdated @entity(immutable: true) {
  id: Bytes!
  endowId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerUpdated @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenSwapped @entity(immutable: true) {
  id: Bytes!
  endowId: BigInt! # uint256
  accountType: Int! # uint8
  tokenIn: Bytes! # address
  amountIn: BigInt! # uint256
  tokenOut: Bytes! # address
  amountOut: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ApplicationConfirmationRevoked @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt! # uint256
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApplicationConfirmed @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt! # uint256
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApplicationExecuted @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApplicationProposed @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityApplicationsApprovalsRequiredChanged @entity(immutable: true) {
  id: Bytes!
  approvalsRequired: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityApplicationsConfirmationRevoked @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityApplicationsDeposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GasSent @entity(immutable: true) {
  id: Bytes!
  endowmentId: BigInt! # uint256
  member: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityApplicationsInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityApplicationsOwnerAdded @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityApplicationsOwnerRemoved @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityApplicationsRequireExecutionChanged @entity(immutable: true) {
  id: Bytes!
  requireExecution: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SeedAssetSent @entity(immutable: true) {
  id: Bytes!
  endowmentId: BigInt! # uint256
  asset: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityApplicationsTransactionConfirmed @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityApplicationsTransactionExecuted @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityApplicationsTransactionExpiryChanged @entity(immutable: true) {
  id: Bytes!
  transactionExpiry: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityApplicationsTransactionSubmitted @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ActiveFundUpdated @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IndexFundConfigUpdated @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DonationMessagesUpdated @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IndexFundCreated @entity(immutable: true) {
  id: Bytes!
  IndexFund_id: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IndexFundRemoved @entity(immutable: true) {
  id: Bytes!
  IndexFund_id: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IndexFundInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MemberRemoved @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  memberId: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MembersUpdated @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  members: [BigInt!]! # uint32[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IndexFundOwnerUpdated @entity(immutable: true) {
  id: Bytes!
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RegistrarUpdated @entity(immutable: true) {
  id: Bytes!
  newRegistrar: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StateUpdated @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Deposit @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ErrorBytesLogged @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ErrorLogged @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  message: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Redeem @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Refund @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RewardsHarvested @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
