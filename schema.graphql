# ~~~~~~~~~~~~~~~~~
# ~~~~~ ENUMS ~~~~~
# ~~~~~~~~~~~~~~~~~
enum EndowmentType {
  Charity
  Normal
}

# ~~~~~~~~~~~~~~~~
# ~~~ ENTITIES ~~~
# ~~~~~~~~~~~~~~~~
type User @entity(immutable: true) {
  id: String! # set as wallet/contract address
  multiSigs: [MultiSigOwner]! @derivedFrom(field: "owner")
  applicationProposals: [ApplicationProposal]! @derivedFrom(field: "proposer")
  tokenAllowances: [EndowmentTokenAllowanceSpender]! @derivedFrom(field: "spender")
}

type MultiSig @entity {
  id: String!
  owners: [MultiSigOwner!]! @derivedFrom(field: "multiSig")
  transactions: [MultiSigTransaction!]! @derivedFrom(field: "multiSig")
  transactionExpiry: BigInt!
  requireExecution: Boolean!
  approvalsRequired: BigInt!
}

type MultiSigOwner @entity {
  id: String! # set as MultiSig.id.concat(User.id)
  multiSig: MultiSig!
  owner: User!
  active: Boolean!
}

type MultiSigTransaction @entity {
  id: String! # set as MutiSig.id.concat(Transaction.id)
  transactionId: BigInt!
  multiSig: MultiSig!
  proposer: User!
  executed: Boolean!
  expiry: BigInt!
  blockTimestamp: BigInt!
  confirmations: [TransactionConfirmation!]! @derivedFrom(field: "transaction")
}

type TransactionConfirmation @entity {
  id: String! # MultiSigTransaction.id.concat(User.id)
  transaction: MultiSigTransaction!
  owner: User!
  confirmed: Boolean!
}

type ApplicationProposal @entity {
  id: String! # Proposal ID
  executed: Boolean!
  charityName: String!
  proposer: User!
  expiry: BigInt!
  blockTimestamp: BigInt!
  confirmations: [ApplicationConfirmation]! @derivedFrom(field: "proposal")
}

type ApplicationConfirmation @entity {
  id: String! # set as (Proposal ID + User Addr)
  proposal: ApplicationProposal!
  owner: User!
  confirmed: Boolean!
}

### Accounts - Endowment
type Endowment @entity(immutable: true) {
  id: String! # Endowment ID as string
  endowmentType: EndowmentType!
  balancesLocked: [EndowmentTokenLocked]! @derivedFrom(field: "endowment")
  balancesLiquid: [EndowmentTokenLiquid]! @derivedFrom(field: "endowment")
  deposits: [EndowmentDepositTransaction]! @derivedFrom(field: "endowment")
  withdrawals: [EndowmentWithdrawTransaction]! @derivedFrom(field: "endowment")
  swaps: [EndowmentSwapTransaction]! @derivedFrom(field: "endowment")
}

type EndowmentTokenLocked @entity {
  id: String! # set as Endowment.id.concat(Token contract addr)`
  endowment: Endowment!
  token: String!
  amount: BigInt!
}

type EndowmentTokenLiquid @entity {
  id: String! # set as Endowment.id.concat(Token contract addr)`
  endowment: Endowment!
  token: String!
  amount: BigInt!
  allowanceOutstanding: BigInt!
  allowanceSpenders: [EndowmentTokenAllowanceSpender]! @derivedFrom(field: "token")
}

type EndowmentTokenAllowanceSpender @entity {
  id: String! # set as EndowmenTokenLiquid.id.concat(User.id)`
  token: EndowmentTokenLiquid!
  spender: User!
  amount: BigInt!
}

type EndowmentDepositTransaction @entity(immutable: true) {
  id: String! # transaction hash
  endowment: Endowment!
  token: String!
  amountLocked: BigInt!
  amountLiquid: BigInt!
  blockTimestamp: BigInt!
}

type EndowmentWithdrawTransaction @entity(immutable: true) {
  id: String! # transaction hash
  endowment: Endowment!
  accountType: Int!
  token: String!
  amount: BigInt!
  beneficiaryEndowId: Int
  beneficiaryAddr: String
  blockTimestamp: BigInt!
}

type EndowmentSwapTransaction @entity(immutable: true) {
  id: String! # transaction Hash
  endowment: Endowment!
  accountType: Int!
  tokenIn: String!
  amountIn: BigInt!
  tokenOut: String!
  amountOut: BigInt!
  blockTimestamp: BigInt!
}
