# ~~~~~~~~~~~~~~~~~
# ~~~~~ ENUMS ~~~~~
# ~~~~~~~~~~~~~~~~~
enum ApplicationProposalStatus {
  Pending
  Approved
  Rejected
}

enum AccountType {
  Locked
  Liquid
}

enum EndowmentType {
  Charity
  Normal
}

enum Tier {
  None
  Level1
  Level2
  Level3
}

enum FeeTypes {
  Default
  Harvest
  WithdrawCharity
  WithdrawNormal
  EarlyLockedWithdrawCharity
  EarlyLockedWithdrawNormal
}

enum DelegateAction {
  Set
  Revoke
}

enum MultiSigType {
  ApTeam
  Applications
  Endowment
  Generic
}

# ~~~~~~~~~~~~~~~~
# ~~~ ENTITIES ~~~
# ~~~~~~~~~~~~~~~~
type User @entity(immutable: true) {
  id: Bytes! # set as wallet/contract address
  multiSigs: [MultiSig]! @derivedFrom("owner")
  applicationProposals: [ApplicationProposal]! @derivedFrom("proposer")
  tokenAllowances: [TokenAllowanceSpender]! @derivedFrom("spender")
}

type MultiSig @entity {
  id: Bytes! # proxy contract address
  owners: [MultiSigOwner!]! @derivedFrom(field: "multiSig")
  transactions: [MultiSigTransaction]! @derivedFrom(field: "multiSig")
  transactionExpiry: BigInt!
  requireExecution: Boolean!
  approvalsRequired: BigInt!
  multiSigType: MultiSigType!
  applicationsMultiSig: ApplicationsMultiSig
  endowmentMultiSig: Int
}

type MultiSigOwner @entity(immutable: true) {
  id: String! # set as MultiSig.id.concat(User.id)
  multiSig: Multisig!
  owner: User!
}

type MultiSigTransaction @entity {
  id: String! # set as MutiSig.id.concat(Transaction.id)
  transactionId: BigInt!
  multiSig: MultiSig!
  proposer: User!
  executed: Boolean!
  expiry: BigInt!
  blockTimestamp: BigInt!
  confirmations: [TransactionConfirmation!]! @derivedFrom(field: "transaction")
}

type TransactionConfirmation @entity {
  id String! # MultiSigTransaction.id.concat(User.id)
  transaction: MultiSigTransaction!
  owner: User!
  confirmed: Boolean!
}

type ApplicationsMultisig @entity {
  id: Bytes! # set as MutiSig.id
  proposals: [ApplicationProposal]! @derivedFrom("multiSig")
  seedSplitToLiquid: BigInt!
  gasAmount: BigInt!
  seedAsset: Bytes!
  seedAmount: BigInt!
}

type ApplicationProposal @entity {
  id: String! # Proposal transaction hash
  multiSig: ApplicationsMultisig!
  charityName: String!
  proposer: User!
  executed: Boolean!
  expiry: BigInt!
  blockTimestamp: BigInt!
  confirmations: [ApplicationConfirmation]! @derivedFrom(field: "proposal")
}

type ApplicationConfirmation @entity {
  id String! # MultiSig.id.concat(TranactionHash.concat(User.id))
  proposal: ApplicationProposal!
  owner: User!
  confirmed: Boolean!
}

### Endowment MultiSig Factory
type ContractInstantiated @entity(immutable: true) {
  id: Bytes!
  sender: Bytes!
  instantiation: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ImplementationUpdated @entity(immutable: true) {
  id: Bytes!
  implementationAddress: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigFactoryOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes!
  newOwner: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProxyAdminUpdated @entity(immutable: true) {
  id: Bytes!
  admin: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

### Accounts - Endowment
type Endowment@entity(immutable: true) {
  id: String! # Endowment ID
  endowmentType: EndowmentType!
  balancesLocked: [EndowmentTokenLocked]! @derivedFrom(field: "endowment")
  balancesLiquid: [EndowmentTokenLiquid]! @derivedFrom(field: "endowment")
  tokenAllowances: [TokenAllowance]! @derivedFrom(field: "endowmentToken")
  deposits: [EndowmentDepositTransaction]! @derivedFrom(field: "endowment")
  withdrawals: [EndowmentWithdrawTransaction]! @derivedFrom(field: "endowment")
  swaps: [EndowmentSwapTransaction]! @derivedFrom("endowment")
}

type EndowmentTokenLocked @entity {
  id: String! # set as Endowment.id.concat(Token contract addr)`
  endowment: Endowment!
  token: Bytes!
  amount: BigInt!
}

type EndowmentTokenLiquid @entity {
  id: String! # set as Endowment.id.concat(Token contract addr)`
  endowment: Endowment!
  token: Bytes!
  amount: BigInt!
  allowanceOutstanding: BigInt!
  allowanceSpenders: [TokenAllowanceSpender]! @derivedFrom("token")
}

type EndowmentTokenAllowanceSpender @entity {
  id: String! # set as EndowmenTokenLiquid.id.concat(User.id)`
  token: EndowmentTokenLiquid!
  spender: User!
  amount: BigInt!
}

type EndowmentDepositTransaction @entity(immutable: true) {
  id: Bytes! # transaction hash
  endowment: Endowment!
  token: String!
  amountLocked: BigInt!
  amountLiquid: BigInt!
  blockTimestamp: BigInt!
}

type EndowmentWithdrawTransaction @entity(immutable: true) {
  id: Bytes! # transaction hash
  endowment: Endowment!
  accountType: AccountType!
  token: String!
  amount: BigInt!
  beneficiaryEndowId: Int
  beneficiaryAddr: Bytes
  blockTimestamp: BigInt!
}

type EndowmentSwapTransaction @entity(immutable: true) {
  id: Bytes! # transaction Hash
  endowment: Endowment!
  accountType: AccountType!
  tokenIn: Bytes!
  amountIn: BigInt!
  tokenOut: Bytes!
  amountOut: BigInt!
  blockTimestamp: BigInt!
}
