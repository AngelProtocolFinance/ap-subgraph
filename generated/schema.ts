// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AccountsConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountsConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountsConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountsConfig", id.toString(), this);
    }
  }

  static load(id: string): AccountsConfig | null {
    return changetype<AccountsConfig | null>(store.get("AccountsConfig", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get registrar_contract(): Bytes | null {
    let value = this.get("registrar_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set registrar_contract(value: Bytes | null) {
    if (!value) {
      this.unset("registrar_contract");
    } else {
      this.set("registrar_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get next_account_id(): BigInt | null {
    let value = this.get("next_account_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set next_account_id(value: BigInt | null) {
    if (!value) {
      this.unset("next_account_id");
    } else {
      this.set("next_account_id", Value.fromBigInt(<BigInt>value));
    }
  }

  get max_general_category_id(): BigInt | null {
    let value = this.get("max_general_category_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set max_general_category_id(value: BigInt | null) {
    if (!value) {
      this.unset("max_general_category_id");
    } else {
      this.set("max_general_category_id", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Categories extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Categories entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Categories must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Categories", id.toString(), this);
    }
  }

  static load(id: string): Categories | null {
    return changetype<Categories | null>(store.get("Categories", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sdgs(): Array<BigInt> | null {
    let value = this.get("sdgs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set sdgs(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("sdgs");
    } else {
      this.set("sdgs", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get general(): Array<BigInt> | null {
    let value = this.get("general");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set general(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("general");
    } else {
      this.set("general", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}

export class AccountStrategies extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountStrategies entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountStrategies must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountStrategies", id.toString(), this);
    }
  }

  static load(id: string): AccountStrategies | null {
    return changetype<AccountStrategies | null>(
      store.get("AccountStrategies", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get locked_vault(): Array<string> | null {
    let value = this.get("locked_vault");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set locked_vault(value: Array<string> | null) {
    if (!value) {
      this.unset("locked_vault");
    } else {
      this.set("locked_vault", Value.fromStringArray(<Array<string>>value));
    }
  }

  get locked_percentage(): Array<BigInt> | null {
    let value = this.get("locked_percentage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set locked_percentage(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("locked_percentage");
    } else {
      this.set(
        "locked_percentage",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get liquid_vault(): Array<string> | null {
    let value = this.get("liquid_vault");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquid_vault(value: Array<string> | null) {
    if (!value) {
      this.unset("liquid_vault");
    } else {
      this.set("liquid_vault", Value.fromStringArray(<Array<string>>value));
    }
  }

  get liquid_percentage(): Array<BigInt> | null {
    let value = this.get("liquid_percentage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set liquid_percentage(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("liquid_percentage");
    } else {
      this.set(
        "liquid_percentage",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }
}

export class OneOffVaults extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OneOffVaults entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OneOffVaults must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OneOffVaults", id.toString(), this);
    }
  }

  static load(id: string): OneOffVaults | null {
    return changetype<OneOffVaults | null>(store.get("OneOffVaults", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get locked(): Array<string> | null {
    let value = this.get("locked");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set locked(value: Array<string> | null) {
    if (!value) {
      this.unset("locked");
    } else {
      this.set("locked", Value.fromStringArray(<Array<string>>value));
    }
  }

  get locked_amount(): Array<BigInt> | null {
    let value = this.get("locked_amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set locked_amount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("locked_amount");
    } else {
      this.set("locked_amount", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get liquid(): Array<string> | null {
    let value = this.get("liquid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set liquid(value: Array<string> | null) {
    if (!value) {
      this.unset("liquid");
    } else {
      this.set("liquid", Value.fromStringArray(<Array<string>>value));
    }
  }

  get liquid_amount(): Array<BigInt> | null {
    let value = this.get("liquid_amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set liquid_amount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("liquid_amount");
    } else {
      this.set("liquid_amount", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}

export class RebalanceDetails extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RebalanceDetails entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RebalanceDetails must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RebalanceDetails", id.toString(), this);
    }
  }

  static load(id: string): RebalanceDetails | null {
    return changetype<RebalanceDetails | null>(
      store.get("RebalanceDetails", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rebalance_liquid_invested_profits(): boolean {
    let value = this.get("rebalance_liquid_invested_profits");
    return value!.toBoolean();
  }

  set rebalance_liquid_invested_profits(value: boolean) {
    this.set("rebalance_liquid_invested_profits", Value.fromBoolean(value));
  }

  get locked_interests_to_liquid(): boolean {
    let value = this.get("locked_interests_to_liquid");
    return value!.toBoolean();
  }

  set locked_interests_to_liquid(value: boolean) {
    this.set("locked_interests_to_liquid", Value.fromBoolean(value));
  }

  get interest_distribution(): i32 {
    let value = this.get("interest_distribution");
    return value!.toI32();
  }

  set interest_distribution(value: i32) {
    this.set("interest_distribution", Value.fromI32(value));
  }

  get locked_principle_to_liquid(): boolean {
    let value = this.get("locked_principle_to_liquid");
    return value!.toBoolean();
  }

  set locked_principle_to_liquid(value: boolean) {
    this.set("locked_principle_to_liquid", Value.fromBoolean(value));
  }

  get principle_distribution(): i32 {
    let value = this.get("principle_distribution");
    return value!.toI32();
  }

  set principle_distribution(value: i32) {
    this.set("principle_distribution", Value.fromI32(value));
  }
}

export class EndowmentFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentFee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EndowmentFee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentFee", id.toString(), this);
    }
  }

  static load(id: string): EndowmentFee | null {
    return changetype<EndowmentFee | null>(store.get("EndowmentFee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payout_address(): Bytes | null {
    let value = this.get("payout_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set payout_address(value: Bytes | null) {
    if (!value) {
      this.unset("payout_address");
    } else {
      this.set("payout_address", Value.fromBytes(<Bytes>value));
    }
  }

  get fee_percentage(): BigInt | null {
    let value = this.get("fee_percentage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fee_percentage(value: BigInt | null) {
    if (!value) {
      this.unset("fee_percentage");
    } else {
      this.set("fee_percentage", Value.fromBigInt(<BigInt>value));
    }
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }
}

export class Delegate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Delegate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Delegate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Delegate", id.toString(), this);
    }
  }

  static load(id: string): Delegate | null {
    return changetype<Delegate | null>(store.get("Delegate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addr(): Bytes | null {
    let value = this.get("addr");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set addr(value: Bytes | null) {
    if (!value) {
      this.unset("addr");
    } else {
      this.set("addr", Value.fromBytes(<Bytes>value));
    }
  }

  get expires(): BigInt | null {
    let value = this.get("expires");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expires(value: BigInt | null) {
    if (!value) {
      this.unset("expires");
    } else {
      this.set("expires", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class SettingsPermission extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SettingsPermission entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SettingsPermission must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SettingsPermission", id.toString(), this);
    }
  }

  static load(id: string): SettingsPermission | null {
    return changetype<SettingsPermission | null>(
      store.get("SettingsPermission", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner_controlled(): boolean {
    let value = this.get("owner_controlled");
    return value!.toBoolean();
  }

  set owner_controlled(value: boolean) {
    this.set("owner_controlled", Value.fromBoolean(value));
  }

  get gov_controlled(): boolean {
    let value = this.get("gov_controlled");
    return value!.toBoolean();
  }

  set gov_controlled(value: boolean) {
    this.set("gov_controlled", Value.fromBoolean(value));
  }

  get modifiable_after_init(): boolean {
    let value = this.get("modifiable_after_init");
    return value!.toBoolean();
  }

  set modifiable_after_init(value: boolean) {
    this.set("modifiable_after_init", Value.fromBoolean(value));
  }

  get delegate(): string | null {
    let value = this.get("delegate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegate(value: string | null) {
    if (!value) {
      this.unset("delegate");
    } else {
      this.set("delegate", Value.fromString(<string>value));
    }
  }
}

export class SettingsController extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SettingsController entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SettingsController must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SettingsController", id.toString(), this);
    }
  }

  static load(id: string): SettingsController | null {
    return changetype<SettingsController | null>(
      store.get("SettingsController", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get endowment_controller(): string | null {
    let value = this.get("endowment_controller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set endowment_controller(value: string | null) {
    if (!value) {
      this.unset("endowment_controller");
    } else {
      this.set("endowment_controller", Value.fromString(<string>value));
    }
  }

  get strategies(): string | null {
    let value = this.get("strategies");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set strategies(value: string | null) {
    if (!value) {
      this.unset("strategies");
    } else {
      this.set("strategies", Value.fromString(<string>value));
    }
  }

  get whitelisted_beneficiaries(): string | null {
    let value = this.get("whitelisted_beneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set whitelisted_beneficiaries(value: string | null) {
    if (!value) {
      this.unset("whitelisted_beneficiaries");
    } else {
      this.set("whitelisted_beneficiaries", Value.fromString(<string>value));
    }
  }

  get whitelisted_contributors(): string | null {
    let value = this.get("whitelisted_contributors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set whitelisted_contributors(value: string | null) {
    if (!value) {
      this.unset("whitelisted_contributors");
    } else {
      this.set("whitelisted_contributors", Value.fromString(<string>value));
    }
  }

  get maturity_allowlist(): string | null {
    let value = this.get("maturity_allowlist");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set maturity_allowlist(value: string | null) {
    if (!value) {
      this.unset("maturity_allowlist");
    } else {
      this.set("maturity_allowlist", Value.fromString(<string>value));
    }
  }

  get maturity_time(): string | null {
    let value = this.get("maturity_time");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set maturity_time(value: string | null) {
    if (!value) {
      this.unset("maturity_time");
    } else {
      this.set("maturity_time", Value.fromString(<string>value));
    }
  }

  get profile(): string | null {
    let value = this.get("profile");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set profile(value: string | null) {
    if (!value) {
      this.unset("profile");
    } else {
      this.set("profile", Value.fromString(<string>value));
    }
  }

  get earnings_fee(): string | null {
    let value = this.get("earnings_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set earnings_fee(value: string | null) {
    if (!value) {
      this.unset("earnings_fee");
    } else {
      this.set("earnings_fee", Value.fromString(<string>value));
    }
  }

  get withdraw_fee(): string | null {
    let value = this.get("withdraw_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set withdraw_fee(value: string | null) {
    if (!value) {
      this.unset("withdraw_fee");
    } else {
      this.set("withdraw_fee", Value.fromString(<string>value));
    }
  }

  get deposit_fee(): string | null {
    let value = this.get("deposit_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit_fee(value: string | null) {
    if (!value) {
      this.unset("deposit_fee");
    } else {
      this.set("deposit_fee", Value.fromString(<string>value));
    }
  }

  get balance_fee(): string | null {
    let value = this.get("balance_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set balance_fee(value: string | null) {
    if (!value) {
      this.unset("balance_fee");
    } else {
      this.set("balance_fee", Value.fromString(<string>value));
    }
  }

  get kyc_donors_only(): string | null {
    let value = this.get("kyc_donors_only");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set kyc_donors_only(value: string | null) {
    if (!value) {
      this.unset("kyc_donors_only");
    } else {
      this.set("kyc_donors_only", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get image(): string | null {
    let value = this.get("image");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image(value: string | null) {
    if (!value) {
      this.unset("image");
    } else {
      this.set("image", Value.fromString(<string>value));
    }
  }

  get logo(): string | null {
    let value = this.get("logo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set logo(value: string | null) {
    if (!value) {
      this.unset("logo");
    } else {
      this.set("logo", Value.fromString(<string>value));
    }
  }

  get categories(): string | null {
    let value = this.get("categories");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set categories(value: string | null) {
    if (!value) {
      this.unset("categories");
    } else {
      this.set("categories", Value.fromString(<string>value));
    }
  }

  get split_to_liquid(): string | null {
    let value = this.get("split_to_liquid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set split_to_liquid(value: string | null) {
    if (!value) {
      this.unset("split_to_liquid");
    } else {
      this.set("split_to_liquid", Value.fromString(<string>value));
    }
  }

  get ignore_user_splits(): string | null {
    let value = this.get("ignore_user_splits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ignore_user_splits(value: string | null) {
    if (!value) {
      this.unset("ignore_user_splits");
    } else {
      this.set("ignore_user_splits", Value.fromString(<string>value));
    }
  }
}

export class SplitDetails extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SplitDetails entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SplitDetails must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SplitDetails", id.toString(), this);
    }
  }

  static load(id: string): SplitDetails | null {
    return changetype<SplitDetails | null>(store.get("SplitDetails", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get max(): BigInt | null {
    let value = this.get("max");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set max(value: BigInt | null) {
    if (!value) {
      this.unset("max");
    } else {
      this.set("max", Value.fromBigInt(<BigInt>value));
    }
  }

  get min(): BigInt | null {
    let value = this.get("min");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set min(value: BigInt | null) {
    if (!value) {
      this.unset("min");
    } else {
      this.set("min", Value.fromBigInt(<BigInt>value));
    }
  }

  get defaultSplit(): BigInt | null {
    let value = this.get("defaultSplit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set defaultSplit(value: BigInt | null) {
    if (!value) {
      this.unset("defaultSplit");
    } else {
      this.set("defaultSplit", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Endowment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Endowment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Endowment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Endowment", id.toString(), this);
    }
  }

  static load(id: string): Endowment | null {
    return changetype<Endowment | null>(store.get("Endowment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get tier(): BigInt | null {
    let value = this.get("tier");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tier(value: BigInt | null) {
    if (!value) {
      this.unset("tier");
    } else {
      this.set("tier", Value.fromBigInt(<BigInt>value));
    }
  }

  get logo(): string | null {
    let value = this.get("logo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set logo(value: string | null) {
    if (!value) {
      this.unset("logo");
    } else {
      this.set("logo", Value.fromString(<string>value));
    }
  }

  get image(): string | null {
    let value = this.get("image");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image(value: string | null) {
    if (!value) {
      this.unset("image");
    } else {
      this.set("image", Value.fromString(<string>value));
    }
  }

  get deposit_approved(): boolean {
    let value = this.get("deposit_approved");
    return value!.toBoolean();
  }

  set deposit_approved(value: boolean) {
    this.set("deposit_approved", Value.fromBoolean(value));
  }

  get withdraw_approved(): boolean {
    let value = this.get("withdraw_approved");
    return value!.toBoolean();
  }

  set withdraw_approved(value: boolean) {
    this.set("withdraw_approved", Value.fromBoolean(value));
  }

  get maturity_time(): BigInt | null {
    let value = this.get("maturity_time");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maturity_time(value: BigInt | null) {
    if (!value) {
      this.unset("maturity_time");
    } else {
      this.set("maturity_time", Value.fromBigInt(<BigInt>value));
    }
  }

  get categories(): string | null {
    let value = this.get("categories");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set categories(value: string | null) {
    if (!value) {
      this.unset("categories");
    } else {
      this.set("categories", Value.fromString(<string>value));
    }
  }

  get endow_type(): string | null {
    let value = this.get("endow_type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set endow_type(value: string | null) {
    if (!value) {
      this.unset("endow_type");
    } else {
      this.set("endow_type", Value.fromString(<string>value));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get strategies(): string | null {
    let value = this.get("strategies");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set strategies(value: string | null) {
    if (!value) {
      this.unset("strategies");
    } else {
      this.set("strategies", Value.fromString(<string>value));
    }
  }

  get oneoff_vaults(): string | null {
    let value = this.get("oneoff_vaults");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set oneoff_vaults(value: string | null) {
    if (!value) {
      this.unset("oneoff_vaults");
    } else {
      this.set("oneoff_vaults", Value.fromString(<string>value));
    }
  }

  get rebalance(): string | null {
    let value = this.get("rebalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rebalance(value: string | null) {
    if (!value) {
      this.unset("rebalance");
    } else {
      this.set("rebalance", Value.fromString(<string>value));
    }
  }

  get kyc_donors_only(): boolean {
    let value = this.get("kyc_donors_only");
    return value!.toBoolean();
  }

  set kyc_donors_only(value: boolean) {
    this.set("kyc_donors_only", Value.fromBoolean(value));
  }

  get pending_redemptions(): i32 {
    let value = this.get("pending_redemptions");
    return value!.toI32();
  }

  set pending_redemptions(value: i32) {
    this.set("pending_redemptions", Value.fromI32(value));
  }

  get copycat_strategy(): i32 {
    let value = this.get("copycat_strategy");
    return value!.toI32();
  }

  set copycat_strategy(value: i32) {
    this.set("copycat_strategy", Value.fromI32(value));
  }

  get proposal_link(): BigInt | null {
    let value = this.get("proposal_link");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposal_link(value: BigInt | null) {
    if (!value) {
      this.unset("proposal_link");
    } else {
      this.set("proposal_link", Value.fromBigInt(<BigInt>value));
    }
  }

  get dao(): Bytes | null {
    let value = this.get("dao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dao(value: Bytes | null) {
    if (!value) {
      this.unset("dao");
    } else {
      this.set("dao", Value.fromBytes(<Bytes>value));
    }
  }

  get dao_token(): Bytes | null {
    let value = this.get("dao_token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dao_token(value: Bytes | null) {
    if (!value) {
      this.unset("dao_token");
    } else {
      this.set("dao_token", Value.fromBytes(<Bytes>value));
    }
  }

  get donation_match_active(): boolean {
    let value = this.get("donation_match_active");
    return value!.toBoolean();
  }

  set donation_match_active(value: boolean) {
    this.set("donation_match_active", Value.fromBoolean(value));
  }

  get donation_match_contract(): Bytes | null {
    let value = this.get("donation_match_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set donation_match_contract(value: Bytes | null) {
    if (!value) {
      this.unset("donation_match_contract");
    } else {
      this.set("donation_match_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get whitelisted_beneficiaries(): Array<Bytes> | null {
    let value = this.get("whitelisted_beneficiaries");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set whitelisted_beneficiaries(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("whitelisted_beneficiaries");
    } else {
      this.set(
        "whitelisted_beneficiaries",
        Value.fromBytesArray(<Array<Bytes>>value)
      );
    }
  }

  get whitelisted_contributors(): Array<Bytes> | null {
    let value = this.get("whitelisted_contributors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set whitelisted_contributors(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("whitelisted_contributors");
    } else {
      this.set(
        "whitelisted_contributors",
        Value.fromBytesArray(<Array<Bytes>>value)
      );
    }
  }

  get maturity_allowlist(): Array<Bytes> | null {
    let value = this.get("maturity_allowlist");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set maturity_allowlist(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("maturity_allowlist");
    } else {
      this.set("maturity_allowlist", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get earnings_fee(): BigInt | null {
    let value = this.get("earnings_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set earnings_fee(value: BigInt | null) {
    if (!value) {
      this.unset("earnings_fee");
    } else {
      this.set("earnings_fee", Value.fromBigInt(<BigInt>value));
    }
  }

  get withdraw_fee(): BigInt | null {
    let value = this.get("withdraw_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set withdraw_fee(value: BigInt | null) {
    if (!value) {
      this.unset("withdraw_fee");
    } else {
      this.set("withdraw_fee", Value.fromBigInt(<BigInt>value));
    }
  }

  get deposit_fee(): BigInt | null {
    let value = this.get("deposit_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set deposit_fee(value: BigInt | null) {
    if (!value) {
      this.unset("deposit_fee");
    } else {
      this.set("deposit_fee", Value.fromBigInt(<BigInt>value));
    }
  }

  get balance_fee(): BigInt | null {
    let value = this.get("balance_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balance_fee(value: BigInt | null) {
    if (!value) {
      this.unset("balance_fee");
    } else {
      this.set("balance_fee", Value.fromBigInt(<BigInt>value));
    }
  }

  get settings_controller(): string | null {
    let value = this.get("settings_controller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set settings_controller(value: string | null) {
    if (!value) {
      this.unset("settings_controller");
    } else {
      this.set("settings_controller", Value.fromString(<string>value));
    }
  }

  get parent(): i32 {
    let value = this.get("parent");
    return value!.toI32();
  }

  set parent(value: i32) {
    this.set("parent", Value.fromI32(value));
  }

  get ignore_user_splits(): boolean {
    let value = this.get("ignore_user_splits");
    return value!.toBoolean();
  }

  set ignore_user_splits(value: boolean) {
    this.set("ignore_user_splits", Value.fromBoolean(value));
  }

  get split_to_liquid(): string | null {
    let value = this.get("split_to_liquid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set split_to_liquid(value: string | null) {
    if (!value) {
      this.unset("split_to_liquid");
    } else {
      this.set("split_to_liquid", Value.fromString(<string>value));
    }
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }

  get indexfund(): Array<string> | null {
    let value = this.get("indexfund");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set indexfund(value: Array<string> | null) {
    if (!value) {
      this.unset("indexfund");
    } else {
      this.set("indexfund", Value.fromStringArray(<Array<string>>value));
    }
  }

  get withdrawal(): string | null {
    let value = this.get("withdrawal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set withdrawal(value: string | null) {
    if (!value) {
      this.unset("withdrawal");
    } else {
      this.set("withdrawal", Value.fromString(<string>value));
    }
  }
}

export class SocialMedialUrls extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SocialMedialUrls entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SocialMedialUrls must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SocialMedialUrls", id.toString(), this);
    }
  }

  static load(id: string): SocialMedialUrls | null {
    return changetype<SocialMedialUrls | null>(
      store.get("SocialMedialUrls", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get facebook(): string | null {
    let value = this.get("facebook");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set facebook(value: string | null) {
    if (!value) {
      this.unset("facebook");
    } else {
      this.set("facebook", Value.fromString(<string>value));
    }
  }

  get twitter(): string | null {
    let value = this.get("twitter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set twitter(value: string | null) {
    if (!value) {
      this.unset("twitter");
    } else {
      this.set("twitter", Value.fromString(<string>value));
    }
  }

  get linkedin(): string | null {
    let value = this.get("linkedin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set linkedin(value: string | null) {
    if (!value) {
      this.unset("linkedin");
    } else {
      this.set("linkedin", Value.fromString(<string>value));
    }
  }
}

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Profile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Profile", id.toString(), this);
    }
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get overview(): string | null {
    let value = this.get("overview");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set overview(value: string | null) {
    if (!value) {
      this.unset("overview");
    } else {
      this.set("overview", Value.fromString(<string>value));
    }
  }

  get url(): string | null {
    let value = this.get("url");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set url(value: string | null) {
    if (!value) {
      this.unset("url");
    } else {
      this.set("url", Value.fromString(<string>value));
    }
  }

  get registration_number(): string | null {
    let value = this.get("registration_number");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registration_number(value: string | null) {
    if (!value) {
      this.unset("registration_number");
    } else {
      this.set("registration_number", Value.fromString(<string>value));
    }
  }

  get country_of_origin(): string | null {
    let value = this.get("country_of_origin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set country_of_origin(value: string | null) {
    if (!value) {
      this.unset("country_of_origin");
    } else {
      this.set("country_of_origin", Value.fromString(<string>value));
    }
  }

  get street_address(): string | null {
    let value = this.get("street_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set street_address(value: string | null) {
    if (!value) {
      this.unset("street_address");
    } else {
      this.set("street_address", Value.fromString(<string>value));
    }
  }

  get contact_email(): string | null {
    let value = this.get("contact_email");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contact_email(value: string | null) {
    if (!value) {
      this.unset("contact_email");
    } else {
      this.set("contact_email", Value.fromString(<string>value));
    }
  }

  get social_media_urls(): string | null {
    let value = this.get("social_media_urls");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set social_media_urls(value: string | null) {
    if (!value) {
      this.unset("social_media_urls");
    } else {
      this.set("social_media_urls", Value.fromString(<string>value));
    }
  }

  get number_of_employees(): BigInt | null {
    let value = this.get("number_of_employees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set number_of_employees(value: BigInt | null) {
    if (!value) {
      this.unset("number_of_employees");
    } else {
      this.set("number_of_employees", Value.fromBigInt(<BigInt>value));
    }
  }

  get average_annual_budget(): string | null {
    let value = this.get("average_annual_budget");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set average_annual_budget(value: string | null) {
    if (!value) {
      this.unset("average_annual_budget");
    } else {
      this.set("average_annual_budget", Value.fromString(<string>value));
    }
  }

  get annual_revenue(): string | null {
    let value = this.get("annual_revenue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set annual_revenue(value: string | null) {
    if (!value) {
      this.unset("annual_revenue");
    } else {
      this.set("annual_revenue", Value.fromString(<string>value));
    }
  }

  get charity_navigator_rating(): string | null {
    let value = this.get("charity_navigator_rating");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set charity_navigator_rating(value: string | null) {
    if (!value) {
      this.unset("charity_navigator_rating");
    } else {
      this.set("charity_navigator_rating", Value.fromString(<string>value));
    }
  }
}

export class AllowanceData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllowanceData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AllowanceData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceData", id.toString(), this);
    }
  }

  static load(id: string): AllowanceData | null {
    return changetype<AllowanceData | null>(store.get("AllowanceData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get height(): BigInt | null {
    let value = this.get("height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set height(value: BigInt | null) {
    if (!value) {
      this.unset("height");
    } else {
      this.set("height", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get expires(): boolean {
    let value = this.get("expires");
    return value!.toBoolean();
  }

  set expires(value: boolean) {
    this.set("expires", Value.fromBoolean(value));
  }

  get allow(): string | null {
    let value = this.get("allow");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set allow(value: string | null) {
    if (!value) {
      this.unset("allow");
    } else {
      this.set("allow", Value.fromString(<string>value));
    }
  }

  get allowanceAmount(): BigInt | null {
    let value = this.get("allowanceAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set allowanceAmount(value: BigInt | null) {
    if (!value) {
      this.unset("allowanceAmount");
    } else {
      this.set("allowanceAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get configured(): boolean {
    let value = this.get("configured");
    return value!.toBoolean();
  }

  set configured(value: boolean) {
    this.set("configured", Value.fromBoolean(value));
  }
}

export class AllowanceRemove extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllowanceRemove entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AllowanceRemove must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AllowanceRemove", id.toString(), this);
    }
  }

  static load(id: string): AllowanceRemove | null {
    return changetype<AllowanceRemove | null>(store.get("AllowanceRemove", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(<Bytes>value));
    }
  }

  get spender(): Bytes | null {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes | null) {
    if (!value) {
      this.unset("spender");
    } else {
      this.set("spender", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(<Bytes>value));
    }
  }
}

export class TokenSwap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenSwap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenSwap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenSwap", id.toString(), this);
    }
  }

  static load(id: string): TokenSwap | null {
    return changetype<TokenSwap | null>(store.get("TokenSwap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accountType(): i32 {
    let value = this.get("accountType");
    return value!.toI32();
  }

  set accountType(value: i32) {
    this.set("accountType", Value.fromI32(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenIn(): Bytes | null {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes | null) {
    if (!value) {
      this.unset("tokenIn");
    } else {
      this.set("tokenIn", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenOut(): Bytes | null {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes | null) {
    if (!value) {
      this.unset("tokenOut");
    } else {
      this.set("tokenOut", Value.fromBytes(<Bytes>value));
    }
  }

  get amountOut(): BigInt | null {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt | null) {
    if (!value) {
      this.unset("amountOut");
    } else {
      this.set("amountOut", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class GenericBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GenericBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GenericBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GenericBalance", id.toString(), this);
    }
  }

  static load(id: string): GenericBalance | null {
    return changetype<GenericBalance | null>(store.get("GenericBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get coin_native_amount(): BigInt | null {
    let value = this.get("coin_native_amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set coin_native_amount(value: BigInt | null) {
    if (!value) {
      this.unset("coin_native_amount");
    } else {
      this.set("coin_native_amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get Cw20CoinVerified_amount(): Array<BigInt> | null {
    let value = this.get("Cw20CoinVerified_amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set Cw20CoinVerified_amount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("Cw20CoinVerified_amount");
    } else {
      this.set(
        "Cw20CoinVerified_amount",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get Cw20CoinVerified_addr(): Array<Bytes> | null {
    let value = this.get("Cw20CoinVerified_addr");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set Cw20CoinVerified_addr(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("Cw20CoinVerified_addr");
    } else {
      this.set(
        "Cw20CoinVerified_addr",
        Value.fromBytesArray(<Array<Bytes>>value)
      );
    }
  }
}

export class BalanceInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BalanceInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BalanceInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BalanceInfo", id.toString(), this);
    }
  }

  static load(id: string): BalanceInfo | null {
    return changetype<BalanceInfo | null>(store.get("BalanceInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get locked(): string | null {
    let value = this.get("locked");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set locked(value: string | null) {
    if (!value) {
      this.unset("locked");
    } else {
      this.set("locked", Value.fromString(<string>value));
    }
  }

  get liquid(): string | null {
    let value = this.get("liquid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquid(value: string | null) {
    if (!value) {
      this.unset("liquid");
    } else {
      this.set("liquid", Value.fromString(<string>value));
    }
  }
}

export class DonationsReceived extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationsReceived entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DonationsReceived must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationsReceived", id.toString(), this);
    }
  }

  static load(id: string): DonationsReceived | null {
    return changetype<DonationsReceived | null>(
      store.get("DonationsReceived", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get locked(): BigInt | null {
    let value = this.get("locked");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set locked(value: BigInt | null) {
    if (!value) {
      this.unset("locked");
    } else {
      this.set("locked", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquid(): BigInt | null {
    let value = this.get("liquid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquid(value: BigInt | null) {
    if (!value) {
      this.unset("liquid");
    } else {
      this.set("liquid", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DonationMatchSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DonationMatchSet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchSet", id.toString(), this);
    }
  }

  static load(id: string): DonationMatchSet | null {
    return changetype<DonationMatchSet | null>(
      store.get("DonationMatchSet", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get donation_match_contract(): Bytes | null {
    let value = this.get("donation_match_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set donation_match_contract(value: Bytes | null) {
    if (!value) {
      this.unset("donation_match_contract");
    } else {
      this.set("donation_match_contract", Value.fromBytes(<Bytes>value));
    }
  }
}

export class EndowmentState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EndowmentState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EndowmentState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EndowmentState", id.toString(), this);
    }
  }

  static load(id: string): EndowmentState | null {
    return changetype<EndowmentState | null>(store.get("EndowmentState", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get donations_received(): string | null {
    let value = this.get("donations_received");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set donations_received(value: string | null) {
    if (!value) {
      this.unset("donations_received");
    } else {
      this.set("donations_received", Value.fromString(<string>value));
    }
  }

  get balances(): string | null {
    let value = this.get("balances");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set balances(value: string | null) {
    if (!value) {
      this.unset("balances");
    } else {
      this.set("balances", Value.fromString(<string>value));
    }
  }

  get closing_endowment(): boolean {
    let value = this.get("closing_endowment");
    return value!.toBoolean();
  }

  set closing_endowment(value: boolean) {
    this.set("closing_endowment", Value.fromBoolean(value));
  }

  get closing_beneficiary(): Bytes | null {
    let value = this.get("closing_beneficiary");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set closing_beneficiary(value: Bytes | null) {
    if (!value) {
      this.unset("closing_beneficiary");
    } else {
      this.set("closing_beneficiary", Value.fromBytes(<Bytes>value));
    }
  }
}

export class AccountState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountState", id.toString(), this);
    }
  }

  static load(id: string): AccountState | null {
    return changetype<AccountState | null>(store.get("AccountState", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get DAOTOKENBALANCE(): Array<i32> {
    let value = this.get("DAOTOKENBALANCE");
    return value!.toI32Array();
  }

  set DAOTOKENBALANCE(value: Array<i32>) {
    this.set("DAOTOKENBALANCE", Value.fromI32Array(value));
  }

  get STATES(): Array<string> {
    let value = this.get("STATES");
    return value!.toStringArray();
  }

  set STATES(value: Array<string>) {
    this.set("STATES", Value.fromStringArray(value));
  }

  get ENDOWMENTS(): Array<string> {
    let value = this.get("ENDOWMENTS");
    return value!.toStringArray();
  }

  set ENDOWMENTS(value: Array<string>) {
    this.set("ENDOWMENTS", Value.fromStringArray(value));
  }

  get PROFILES(): Array<string> {
    let value = this.get("PROFILES");
    return value!.toStringArray();
  }

  set PROFILES(value: Array<string>) {
    this.set("PROFILES", Value.fromStringArray(value));
  }

  get ALLOWANCE_DATA(): Array<string> {
    let value = this.get("ALLOWANCE_DATA");
    return value!.toStringArray();
  }

  set ALLOWANCE_DATA(value: Array<string>) {
    this.set("ALLOWANCE_DATA", Value.fromStringArray(value));
  }

  get CONFIG(): string | null {
    let value = this.get("CONFIG");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set CONFIG(value: string | null) {
    if (!value) {
      this.unset("CONFIG");
    } else {
      this.set("CONFIG", Value.fromString(<string>value));
    }
  }

  get subDao(): Bytes | null {
    let value = this.get("subDao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set subDao(value: Bytes | null) {
    if (!value) {
      this.unset("subDao");
    } else {
      this.set("subDao", Value.fromBytes(<Bytes>value));
    }
  }

  get gateway(): Bytes | null {
    let value = this.get("gateway");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set gateway(value: Bytes | null) {
    if (!value) {
      this.unset("gateway");
    } else {
      this.set("gateway", Value.fromBytes(<Bytes>value));
    }
  }

  get gasRevicer(): Bytes | null {
    let value = this.get("gasRevicer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set gasRevicer(value: Bytes | null) {
    if (!value) {
      this.unset("gasRevicer");
    } else {
      this.set("gasRevicer", Value.fromBytes(<Bytes>value));
    }
  }

  get reentrancyGuardLocked(): boolean {
    let value = this.get("reentrancyGuardLocked");
    return value!.toBoolean();
  }

  set reentrancyGuardLocked(value: boolean) {
    this.set("reentrancyGuardLocked", Value.fromBoolean(value));
  }
}

export class SubDAOConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubDAOConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubDAOConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubDAOConfig", id.toString(), this);
    }
  }

  static load(id: string): SubDAOConfig | null {
    return changetype<SubDAOConfig | null>(store.get("SubDAOConfig", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registrar_contract(): Bytes | null {
    let value = this.get("registrar_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set registrar_contract(value: Bytes | null) {
    if (!value) {
      this.unset("registrar_contract");
    } else {
      this.set("registrar_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get dao_token(): Bytes | null {
    let value = this.get("dao_token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dao_token(value: Bytes | null) {
    if (!value) {
      this.unset("dao_token");
    } else {
      this.set("dao_token", Value.fromBytes(<Bytes>value));
    }
  }

  get ve_token(): Bytes | null {
    let value = this.get("ve_token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set ve_token(value: Bytes | null) {
    if (!value) {
      this.unset("ve_token");
    } else {
      this.set("ve_token", Value.fromBytes(<Bytes>value));
    }
  }

  get swap_factory(): Bytes | null {
    let value = this.get("swap_factory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set swap_factory(value: Bytes | null) {
    if (!value) {
      this.unset("swap_factory");
    } else {
      this.set("swap_factory", Value.fromBytes(<Bytes>value));
    }
  }

  get quorum(): BigInt | null {
    let value = this.get("quorum");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set quorum(value: BigInt | null) {
    if (!value) {
      this.unset("quorum");
    } else {
      this.set("quorum", Value.fromBigInt(<BigInt>value));
    }
  }

  get threshold(): BigInt | null {
    let value = this.get("threshold");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set threshold(value: BigInt | null) {
    if (!value) {
      this.unset("threshold");
    } else {
      this.set("threshold", Value.fromBigInt(<BigInt>value));
    }
  }

  get voting_period(): BigInt | null {
    let value = this.get("voting_period");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set voting_period(value: BigInt | null) {
    if (!value) {
      this.unset("voting_period");
    } else {
      this.set("voting_period", Value.fromBigInt(<BigInt>value));
    }
  }

  get timelock_period(): BigInt | null {
    let value = this.get("timelock_period");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timelock_period(value: BigInt | null) {
    if (!value) {
      this.unset("timelock_period");
    } else {
      this.set("timelock_period", Value.fromBigInt(<BigInt>value));
    }
  }

  get expiration_period(): BigInt | null {
    let value = this.get("expiration_period");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiration_period(value: BigInt | null) {
    if (!value) {
      this.unset("expiration_period");
    } else {
      this.set("expiration_period", Value.fromBigInt(<BigInt>value));
    }
  }

  get proposal_deposit(): BigInt | null {
    let value = this.get("proposal_deposit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposal_deposit(value: BigInt | null) {
    if (!value) {
      this.unset("proposal_deposit");
    } else {
      this.set("proposal_deposit", Value.fromBigInt(<BigInt>value));
    }
  }

  get snapshot_period(): BigInt | null {
    let value = this.get("snapshot_period");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set snapshot_period(value: BigInt | null) {
    if (!value) {
      this.unset("snapshot_period");
    } else {
      this.set("snapshot_period", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class SubDAOState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubDAOState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubDAOState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubDAOState", id.toString(), this);
    }
  }

  static load(id: string): SubDAOState | null {
    return changetype<SubDAOState | null>(store.get("SubDAOState", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poll_count(): BigInt | null {
    let value = this.get("poll_count");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poll_count(value: BigInt | null) {
    if (!value) {
      this.unset("poll_count");
    } else {
      this.set("poll_count", Value.fromBigInt(<BigInt>value));
    }
  }

  get total_share(): BigInt | null {
    let value = this.get("total_share");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total_share(value: BigInt | null) {
    if (!value) {
      this.unset("total_share");
    } else {
      this.set("total_share", Value.fromBigInt(<BigInt>value));
    }
  }

  get total_deposit(): BigInt | null {
    let value = this.get("total_deposit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total_deposit(value: BigInt | null) {
    if (!value) {
      this.unset("total_deposit");
    } else {
      this.set("total_deposit", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class SubdaoTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubdaoTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubdaoTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubdaoTransfer", id.toString(), this);
    }
  }

  static load(id: string): SubdaoTransfer | null {
    return changetype<SubdaoTransfer | null>(store.get("SubdaoTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get recipient(): Bytes | null {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes | null) {
    if (!value) {
      this.unset("recipient");
    } else {
      this.set("recipient", Value.fromBytes(<Bytes>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class SubdaoTransferFrom extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubdaoTransferFrom entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubdaoTransferFrom must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubdaoTransferFrom", id.toString(), this);
    }
  }

  static load(id: string): SubdaoTransferFrom | null {
    return changetype<SubdaoTransferFrom | null>(
      store.get("SubdaoTransferFrom", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get from(): Bytes | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromBytes(<Bytes>value));
    }
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ExecuteData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExecuteData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecuteData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExecuteData", id.toString(), this);
    }
  }

  static load(id: string): ExecuteData | null {
    return changetype<ExecuteData | null>(store.get("ExecuteData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get order(): Array<BigInt> | null {
    let value = this.get("order");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set order(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("order");
    } else {
      this.set("order", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get contract_address(): Array<Bytes> | null {
    let value = this.get("contract_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set contract_address(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("contract_address");
    } else {
      this.set("contract_address", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get execution_message(): Array<Bytes> | null {
    let value = this.get("execution_message");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set execution_message(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("execution_message");
    } else {
      this.set("execution_message", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class Poll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Poll entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Poll must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Poll", id.toString(), this);
    }
  }

  static load(id: string): Poll | null {
    return changetype<Poll | null>(store.get("Poll", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromBytes(<Bytes>value));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get yes_votes(): BigInt | null {
    let value = this.get("yes_votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set yes_votes(value: BigInt | null) {
    if (!value) {
      this.unset("yes_votes");
    } else {
      this.set("yes_votes", Value.fromBigInt(<BigInt>value));
    }
  }

  get no_votes(): BigInt | null {
    let value = this.get("no_votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set no_votes(value: BigInt | null) {
    if (!value) {
      this.unset("no_votes");
    } else {
      this.set("no_votes", Value.fromBigInt(<BigInt>value));
    }
  }

  get start_block(): BigInt | null {
    let value = this.get("start_block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set start_block(value: BigInt | null) {
    if (!value) {
      this.unset("start_block");
    } else {
      this.set("start_block", Value.fromBigInt(<BigInt>value));
    }
  }

  get start_time(): BigInt | null {
    let value = this.get("start_time");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set start_time(value: BigInt | null) {
    if (!value) {
      this.unset("start_time");
    } else {
      this.set("start_time", Value.fromBigInt(<BigInt>value));
    }
  }

  get end_height(): BigInt | null {
    let value = this.get("end_height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set end_height(value: BigInt | null) {
    if (!value) {
      this.unset("end_height");
    } else {
      this.set("end_height", Value.fromBigInt(<BigInt>value));
    }
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get link(): string | null {
    let value = this.get("link");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set link(value: string | null) {
    if (!value) {
      this.unset("link");
    } else {
      this.set("link", Value.fromString(<string>value));
    }
  }

  get execute_data(): string | null {
    let value = this.get("execute_data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set execute_data(value: string | null) {
    if (!value) {
      this.unset("execute_data");
    } else {
      this.set("execute_data", Value.fromString(<string>value));
    }
  }

  get deposit_amount(): BigInt | null {
    let value = this.get("deposit_amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set deposit_amount(value: BigInt | null) {
    if (!value) {
      this.unset("deposit_amount");
    } else {
      this.set("deposit_amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get total_balance_at_end_poll(): BigInt | null {
    let value = this.get("total_balance_at_end_poll");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total_balance_at_end_poll(value: BigInt | null) {
    if (!value) {
      this.unset("total_balance_at_end_poll");
    } else {
      this.set("total_balance_at_end_poll", Value.fromBigInt(<BigInt>value));
    }
  }

  get staked_amount(): BigInt | null {
    let value = this.get("staked_amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set staked_amount(value: BigInt | null) {
    if (!value) {
      this.unset("staked_amount");
    } else {
      this.set("staked_amount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class VotingStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VotingStatus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VotingStatus must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VotingStatus", id.toString(), this);
    }
  }

  static load(id: string): VotingStatus | null {
    return changetype<VotingStatus | null>(store.get("VotingStatus", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poll_id(): BigInt | null {
    let value = this.get("poll_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poll_id(value: BigInt | null) {
    if (!value) {
      this.unset("poll_id");
    } else {
      this.set("poll_id", Value.fromBigInt(<BigInt>value));
    }
  }

  get voter_address(): Bytes | null {
    let value = this.get("voter_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set voter_address(value: Bytes | null) {
    if (!value) {
      this.unset("voter_address");
    } else {
      this.set("voter_address", Value.fromBytes(<Bytes>value));
    }
  }

  get voterInfo(): string | null {
    let value = this.get("voterInfo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set voterInfo(value: string | null) {
    if (!value) {
      this.unset("voterInfo");
    } else {
      this.set("voterInfo", Value.fromString(<string>value));
    }
  }
}

export class VoterInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VoterInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VoterInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VoterInfo", id.toString(), this);
    }
  }

  static load(id: string): VoterInfo | null {
    return changetype<VoterInfo | null>(store.get("VoterInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get votes(): string | null {
    let value = this.get("votes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set votes(value: string | null) {
    if (!value) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromString(<string>value));
    }
  }

  get balance(): BigInt | null {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt | null) {
    if (!value) {
      this.unset("balance");
    } else {
      this.set("balance", Value.fromBigInt(<BigInt>value));
    }
  }

  get voted(): boolean {
    let value = this.get("voted");
    return value!.toBoolean();
  }

  set voted(value: boolean) {
    this.set("voted", Value.fromBoolean(value));
  }
}

export class MultisigConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MultisigConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MultisigConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MultisigConfig", id.toString(), this);
    }
  }

  static load(id: string): MultisigConfig | null {
    return changetype<MultisigConfig | null>(store.get("MultisigConfig", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owners(): Array<Bytes> | null {
    let value = this.get("owners");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set owners(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("owners");
    } else {
      this.set("owners", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get required(): boolean {
    let value = this.get("required");
    return value!.toBoolean();
  }

  set required(value: boolean) {
    this.set("required", Value.fromBoolean(value));
  }

  get transactionCount(): BigInt | null {
    let value = this.get("transactionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set transactionCount(value: BigInt | null) {
    if (!value) {
      this.unset("transactionCount");
    } else {
      this.set("transactionCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get require_execution(): boolean {
    let value = this.get("require_execution");
    return value!.toBoolean();
  }

  set require_execution(value: boolean) {
    this.set("require_execution", Value.fromBoolean(value));
  }
}

export class MultisigTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MultisigTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MultisigTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MultisigTransaction", id.toString(), this);
    }
  }

  static load(id: string): MultisigTransaction | null {
    return changetype<MultisigTransaction | null>(
      store.get("MultisigTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get destination(): Bytes | null {
    let value = this.get("destination");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set destination(value: Bytes | null) {
    if (!value) {
      this.unset("destination");
    } else {
      this.set("destination", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBigInt(<BigInt>value));
    }
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(<Bytes>value));
    }
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value!.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }

  get endowments(): string | null {
    let value = this.get("endowments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set endowments(value: string | null) {
    if (!value) {
      this.unset("endowments");
    } else {
      this.set("endowments", Value.fromString(<string>value));
    }
  }

  get confirmation(): Array<string> | null {
    let value = this.get("confirmation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set confirmation(value: Array<string> | null) {
    if (!value) {
      this.unset("confirmation");
    } else {
      this.set("confirmation", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Confirmation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Confirmation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Confirmation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Confirmation", id.toString(), this);
    }
  }

  static load(id: string): Confirmation | null {
    return changetype<Confirmation | null>(store.get("Confirmation", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get confirmations(): Array<Bytes> | null {
    let value = this.get("confirmations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set confirmations(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("confirmations");
    } else {
      this.set("confirmations", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get transaction(): string | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transaction(value: string | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromString(<string>value));
    }
  }
}

export class CharityConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CharityConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CharityConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CharityConfig", id.toString(), this);
    }
  }

  static load(id: string): CharityConfig | null {
    return changetype<CharityConfig | null>(store.get("CharityConfig", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalExpiry(): BigInt | null {
    let value = this.get("proposalExpiry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalExpiry(value: BigInt | null) {
    if (!value) {
      this.unset("proposalExpiry");
    } else {
      this.set("proposalExpiry", Value.fromBigInt(<BigInt>value));
    }
  }

  get applicationMultisig(): Bytes | null {
    let value = this.get("applicationMultisig");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set applicationMultisig(value: Bytes | null) {
    if (!value) {
      this.unset("applicationMultisig");
    } else {
      this.set("applicationMultisig", Value.fromBytes(<Bytes>value));
    }
  }

  get accountsContract(): Bytes | null {
    let value = this.get("accountsContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accountsContract(value: Bytes | null) {
    if (!value) {
      this.unset("accountsContract");
    } else {
      this.set("accountsContract", Value.fromBytes(<Bytes>value));
    }
  }

  get seedSplitToLiquid(): BigInt | null {
    let value = this.get("seedSplitToLiquid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set seedSplitToLiquid(value: BigInt | null) {
    if (!value) {
      this.unset("seedSplitToLiquid");
    } else {
      this.set("seedSplitToLiquid", Value.fromBigInt(<BigInt>value));
    }
  }

  get newEndowGasMoney(): boolean {
    let value = this.get("newEndowGasMoney");
    return value!.toBoolean();
  }

  set newEndowGasMoney(value: boolean) {
    this.set("newEndowGasMoney", Value.fromBoolean(value));
  }

  get gasAmount(): BigInt | null {
    let value = this.get("gasAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasAmount(value: BigInt | null) {
    if (!value) {
      this.unset("gasAmount");
    } else {
      this.set("gasAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get fundSeedAsset(): boolean {
    let value = this.get("fundSeedAsset");
    return value!.toBoolean();
  }

  set fundSeedAsset(value: boolean) {
    this.set("fundSeedAsset", Value.fromBoolean(value));
  }

  get seedAsset(): Bytes | null {
    let value = this.get("seedAsset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set seedAsset(value: Bytes | null) {
    if (!value) {
      this.unset("seedAsset");
    } else {
      this.set("seedAsset", Value.fromBytes(<Bytes>value));
    }
  }

  get seedAssetAmount(): BigInt | null {
    let value = this.get("seedAssetAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set seedAssetAmount(value: BigInt | null) {
    if (!value) {
      this.unset("seedAssetAmount");
    } else {
      this.set("seedAssetAmount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class GasDispatched extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GasDispatched entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GasDispatched must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GasDispatched", id.toString(), this);
    }
  }

  static load(id: string): GasDispatched | null {
    return changetype<GasDispatched | null>(store.get("GasDispatched", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gassent_address(): Bytes | null {
    let value = this.get("gassent_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set gassent_address(value: Bytes | null) {
    if (!value) {
      this.unset("gassent_address");
    } else {
      this.set("gassent_address", Value.fromBytes(<Bytes>value));
    }
  }

  get gasAmount(): BigInt | null {
    let value = this.get("gasAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasAmount(value: BigInt | null) {
    if (!value) {
      this.unset("gasAmount");
    } else {
      this.set("gasAmount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class SeedFunded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SeedFunded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SeedFunded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SeedFunded", id.toString(), this);
    }
  }

  static load(id: string): SeedFunded | null {
    return changetype<SeedFunded | null>(store.get("SeedFunded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seedAsset(): Bytes | null {
    let value = this.get("seedAsset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set seedAsset(value: Bytes | null) {
    if (!value) {
      this.unset("seedAsset");
    } else {
      this.set("seedAsset", Value.fromBytes(<Bytes>value));
    }
  }

  get seedAssetAmount(): BigInt | null {
    let value = this.get("seedAssetAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set seedAssetAmount(value: BigInt | null) {
    if (!value) {
      this.unset("seedAssetAmount");
    } else {
      this.set("seedAssetAmount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DepositCharity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositCharity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DepositCharity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DepositCharity", id.toString(), this);
    }
  }

  static load(id: string): DepositCharity | null {
    return changetype<DepositCharity | null>(store.get("DepositCharity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get charity_sender(): Bytes | null {
    let value = this.get("charity_sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set charity_sender(value: Bytes | null) {
    if (!value) {
      this.unset("charity_sender");
    } else {
      this.set("charity_sender", Value.fromBytes(<Bytes>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class CharityApplicationProposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CharityApplicationProposal entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CharityApplicationProposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CharityApplicationProposal", id.toString(), this);
    }
  }

  static load(id: string): CharityApplicationProposal | null {
    return changetype<CharityApplicationProposal | null>(
      store.get("CharityApplicationProposal", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalId(): BigInt | null {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalId(value: BigInt | null) {
    if (!value) {
      this.unset("proposalId");
    } else {
      this.set("proposalId", Value.fromBigInt(<BigInt>value));
    }
  }

  get proposer(): Bytes | null {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proposer(value: Bytes | null) {
    if (!value) {
      this.unset("proposer");
    } else {
      this.set("proposer", Value.fromBytes(<Bytes>value));
    }
  }

  get charityApplication(): string | null {
    let value = this.get("charityApplication");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set charityApplication(value: string | null) {
    if (!value) {
      this.unset("charityApplication");
    } else {
      this.set("charityApplication", Value.fromString(<string>value));
    }
  }

  get meta(): string | null {
    let value = this.get("meta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set meta(value: string | null) {
    if (!value) {
      this.unset("meta");
    } else {
      this.set("meta", Value.fromString(<string>value));
    }
  }

  get expiry(): BigInt | null {
    let value = this.get("expiry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiry(value: BigInt | null) {
    if (!value) {
      this.unset("expiry");
    } else {
      this.set("expiry", Value.fromBigInt(<BigInt>value));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }
}

export class IndexfundConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IndexfundConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IndexfundConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IndexfundConfig", id.toString(), this);
    }
  }

  static load(id: string): IndexfundConfig | null {
    return changetype<IndexfundConfig | null>(store.get("IndexfundConfig", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get registrar_contract(): Bytes | null {
    let value = this.get("registrar_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set registrar_contract(value: Bytes | null) {
    if (!value) {
      this.unset("registrar_contract");
    } else {
      this.set("registrar_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get fund_rotation(): BigInt | null {
    let value = this.get("fund_rotation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fund_rotation(value: BigInt | null) {
    if (!value) {
      this.unset("fund_rotation");
    } else {
      this.set("fund_rotation", Value.fromBigInt(<BigInt>value));
    }
  }

  get fund_member_limit(): BigInt | null {
    let value = this.get("fund_member_limit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fund_member_limit(value: BigInt | null) {
    if (!value) {
      this.unset("fund_member_limit");
    } else {
      this.set("fund_member_limit", Value.fromBigInt(<BigInt>value));
    }
  }

  get funding_goal(): BigInt | null {
    let value = this.get("funding_goal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set funding_goal(value: BigInt | null) {
    if (!value) {
      this.unset("funding_goal");
    } else {
      this.set("funding_goal", Value.fromBigInt(<BigInt>value));
    }
  }

  get alliance_members(): Array<Bytes> | null {
    let value = this.get("alliance_members");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set alliance_members(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("alliance_members");
    } else {
      this.set("alliance_members", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class IndexfundState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IndexfundState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IndexfundState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IndexfundState", id.toString(), this);
    }
  }

  static load(id: string): IndexfundState | null {
    return changetype<IndexfundState | null>(store.get("IndexfundState", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get total_funds(): BigInt | null {
    let value = this.get("total_funds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total_funds(value: BigInt | null) {
    if (!value) {
      this.unset("total_funds");
    } else {
      this.set("total_funds", Value.fromBigInt(<BigInt>value));
    }
  }

  get active_fund(): BigInt | null {
    let value = this.get("active_fund");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set active_fund(value: BigInt | null) {
    if (!value) {
      this.unset("active_fund");
    } else {
      this.set("active_fund", Value.fromBigInt(<BigInt>value));
    }
  }

  get round_donations(): BigInt | null {
    let value = this.get("round_donations");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set round_donations(value: BigInt | null) {
    if (!value) {
      this.unset("round_donations");
    } else {
      this.set("round_donations", Value.fromBigInt(<BigInt>value));
    }
  }

  get next_rotation_block(): BigInt | null {
    let value = this.get("next_rotation_block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set next_rotation_block(value: BigInt | null) {
    if (!value) {
      this.unset("next_rotation_block");
    } else {
      this.set("next_rotation_block", Value.fromBigInt(<BigInt>value));
    }
  }

  get next_fund_id(): BigInt | null {
    let value = this.get("next_fund_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set next_fund_id(value: BigInt | null) {
    if (!value) {
      this.unset("next_fund_id");
    } else {
      this.set("next_fund_id", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class IndexFund extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IndexFund entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IndexFund must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IndexFund", id.toString(), this);
    }
  }

  static load(id: string): IndexFund | null {
    return changetype<IndexFund | null>(store.get("IndexFund", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get members(): Array<BigInt> | null {
    let value = this.get("members");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set members(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("members");
    } else {
      this.set("members", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get rotating_fund(): boolean {
    let value = this.get("rotating_fund");
    return value!.toBoolean();
  }

  set rotating_fund(value: boolean) {
    this.set("rotating_fund", Value.fromBoolean(value));
  }

  get split_to_liquid(): BigInt | null {
    let value = this.get("split_to_liquid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set split_to_liquid(value: BigInt | null) {
    if (!value) {
      this.unset("split_to_liquid");
    } else {
      this.set("split_to_liquid", Value.fromBigInt(<BigInt>value));
    }
  }

  get expiry_time(): BigInt | null {
    let value = this.get("expiry_time");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiry_time(value: BigInt | null) {
    if (!value) {
      this.unset("expiry_time");
    } else {
      this.set("expiry_time", Value.fromBigInt(<BigInt>value));
    }
  }

  get expiry_height(): BigInt | null {
    let value = this.get("expiry_height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiry_height(value: BigInt | null) {
    if (!value) {
      this.unset("expiry_height");
    } else {
      this.set("expiry_height", Value.fromBigInt(<BigInt>value));
    }
  }

  get endowment(): Array<string> | null {
    let value = this.get("endowment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set endowment(value: Array<string> | null) {
    if (!value) {
      this.unset("endowment");
    } else {
      this.set("endowment", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class FundEndowment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FundEndowment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FundEndowment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FundEndowment", id.toString(), this);
    }
  }

  static load(id: string): FundEndowment | null {
    return changetype<FundEndowment | null>(store.get("FundEndowment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get members(): string | null {
    let value = this.get("members");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set members(value: string | null) {
    if (!value) {
      this.unset("members");
    } else {
      this.set("members", Value.fromString(<string>value));
    }
  }

  get endowment(): string | null {
    let value = this.get("endowment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set endowment(value: string | null) {
    if (!value) {
      this.unset("endowment");
    } else {
      this.set("endowment", Value.fromString(<string>value));
    }
  }
}

export class AcceptedTokens extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AcceptedTokens entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AcceptedTokens must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AcceptedTokens", id.toString(), this);
    }
  }

  static load(id: string): AcceptedTokens | null {
    return changetype<AcceptedTokens | null>(store.get("AcceptedTokens", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cw20(): Array<Bytes> | null {
    let value = this.get("cw20");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set cw20(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("cw20");
    } else {
      this.set("cw20", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class RegistrarConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RegistrarConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RegistrarConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RegistrarConfig", id.toString(), this);
    }
  }

  static load(id: string): RegistrarConfig | null {
    return changetype<RegistrarConfig | null>(store.get("RegistrarConfig", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get applications_review(): Bytes | null {
    let value = this.get("applications_review");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set applications_review(value: Bytes | null) {
    if (!value) {
      this.unset("applications_review");
    } else {
      this.set("applications_review", Value.fromBytes(<Bytes>value));
    }
  }

  get index_fund_contract(): Bytes | null {
    let value = this.get("index_fund_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set index_fund_contract(value: Bytes | null) {
    if (!value) {
      this.unset("index_fund_contract");
    } else {
      this.set("index_fund_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get accounts_contract(): Bytes | null {
    let value = this.get("accounts_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accounts_contract(value: Bytes | null) {
    if (!value) {
      this.unset("accounts_contract");
    } else {
      this.set("accounts_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get treasury(): Bytes | null {
    let value = this.get("treasury");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set treasury(value: Bytes | null) {
    if (!value) {
      this.unset("treasury");
    } else {
      this.set("treasury", Value.fromBytes(<Bytes>value));
    }
  }

  get subdao_gov_code(): Bytes | null {
    let value = this.get("subdao_gov_code");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set subdao_gov_code(value: Bytes | null) {
    if (!value) {
      this.unset("subdao_gov_code");
    } else {
      this.set("subdao_gov_code", Value.fromBytes(<Bytes>value));
    }
  }

  get subdao_cw20_token_code(): Bytes | null {
    let value = this.get("subdao_cw20_token_code");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set subdao_cw20_token_code(value: Bytes | null) {
    if (!value) {
      this.unset("subdao_cw20_token_code");
    } else {
      this.set("subdao_cw20_token_code", Value.fromBytes(<Bytes>value));
    }
  }

  get subdao_bonding_token_code(): Bytes | null {
    let value = this.get("subdao_bonding_token_code");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set subdao_bonding_token_code(value: Bytes | null) {
    if (!value) {
      this.unset("subdao_bonding_token_code");
    } else {
      this.set("subdao_bonding_token_code", Value.fromBytes(<Bytes>value));
    }
  }

  get subdao_cw900_code(): Bytes | null {
    let value = this.get("subdao_cw900_code");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set subdao_cw900_code(value: Bytes | null) {
    if (!value) {
      this.unset("subdao_cw900_code");
    } else {
      this.set("subdao_cw900_code", Value.fromBytes(<Bytes>value));
    }
  }

  get subdao_distributor_code(): Bytes | null {
    let value = this.get("subdao_distributor_code");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set subdao_distributor_code(value: Bytes | null) {
    if (!value) {
      this.unset("subdao_distributor_code");
    } else {
      this.set("subdao_distributor_code", Value.fromBytes(<Bytes>value));
    }
  }

  get subdao_emitter(): Bytes | null {
    let value = this.get("subdao_emitter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set subdao_emitter(value: Bytes | null) {
    if (!value) {
      this.unset("subdao_emitter");
    } else {
      this.set("subdao_emitter", Value.fromBytes(<Bytes>value));
    }
  }

  get donation_match_code(): Bytes | null {
    let value = this.get("donation_match_code");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set donation_match_code(value: Bytes | null) {
    if (!value) {
      this.unset("donation_match_code");
    } else {
      this.set("donation_match_code", Value.fromBytes(<Bytes>value));
    }
  }

  get donation_match_charites_contract(): Bytes | null {
    let value = this.get("donation_match_charites_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set donation_match_charites_contract(value: Bytes | null) {
    if (!value) {
      this.unset("donation_match_charites_contract");
    } else {
      this.set(
        "donation_match_charites_contract",
        Value.fromBytes(<Bytes>value)
      );
    }
  }

  get donation_match_emitter(): Bytes | null {
    let value = this.get("donation_match_emitter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set donation_match_emitter(value: Bytes | null) {
    if (!value) {
      this.unset("donation_match_emitter");
    } else {
      this.set("donation_match_emitter", Value.fromBytes(<Bytes>value));
    }
  }

  get accepted_tokens(): string | null {
    let value = this.get("accepted_tokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set accepted_tokens(value: string | null) {
    if (!value) {
      this.unset("accepted_tokens");
    } else {
      this.set("accepted_tokens", Value.fromString(<string>value));
    }
  }

  get split_to_liquid(): string | null {
    let value = this.get("split_to_liquid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set split_to_liquid(value: string | null) {
    if (!value) {
      this.unset("split_to_liquid");
    } else {
      this.set("split_to_liquid", Value.fromString(<string>value));
    }
  }

  get halo_token(): Bytes | null {
    let value = this.get("halo_token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set halo_token(value: Bytes | null) {
    if (!value) {
      this.unset("halo_token");
    } else {
      this.set("halo_token", Value.fromBytes(<Bytes>value));
    }
  }

  get halo_token_lp_contract(): Bytes | null {
    let value = this.get("halo_token_lp_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set halo_token_lp_contract(value: Bytes | null) {
    if (!value) {
      this.unset("halo_token_lp_contract");
    } else {
      this.set("halo_token_lp_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get gov_contract(): Bytes | null {
    let value = this.get("gov_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set gov_contract(value: Bytes | null) {
    if (!value) {
      this.unset("gov_contract");
    } else {
      this.set("gov_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get collector_addr(): Bytes | null {
    let value = this.get("collector_addr");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collector_addr(value: Bytes | null) {
    if (!value) {
      this.unset("collector_addr");
    } else {
      this.set("collector_addr", Value.fromBytes(<Bytes>value));
    }
  }

  get collector_share(): i32 {
    let value = this.get("collector_share");
    return value!.toI32();
  }

  set collector_share(value: i32) {
    this.set("collector_share", Value.fromI32(value));
  }

  get charity_shares_contract(): Bytes | null {
    let value = this.get("charity_shares_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set charity_shares_contract(value: Bytes | null) {
    if (!value) {
      this.unset("charity_shares_contract");
    } else {
      this.set("charity_shares_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get fundraising_contract(): Bytes | null {
    let value = this.get("fundraising_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fundraising_contract(value: Bytes | null) {
    if (!value) {
      this.unset("fundraising_contract");
    } else {
      this.set("fundraising_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get rebalance(): string | null {
    let value = this.get("rebalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rebalance(value: string | null) {
    if (!value) {
      this.unset("rebalance");
    } else {
      this.set("rebalance", Value.fromString(<string>value));
    }
  }

  get swaps_router(): Bytes | null {
    let value = this.get("swaps_router");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set swaps_router(value: Bytes | null) {
    if (!value) {
      this.unset("swaps_router");
    } else {
      this.set("swaps_router", Value.fromBytes(<Bytes>value));
    }
  }

  get multisig_factory(): Bytes | null {
    let value = this.get("multisig_factory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set multisig_factory(value: Bytes | null) {
    if (!value) {
      this.unset("multisig_factory");
    } else {
      this.set("multisig_factory", Value.fromBytes(<Bytes>value));
    }
  }

  get multisig_emitter(): Bytes | null {
    let value = this.get("multisig_emitter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set multisig_emitter(value: Bytes | null) {
    if (!value) {
      this.unset("multisig_emitter");
    } else {
      this.set("multisig_emitter", Value.fromBytes(<Bytes>value));
    }
  }

  get charity_proposal(): Bytes | null {
    let value = this.get("charity_proposal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set charity_proposal(value: Bytes | null) {
    if (!value) {
      this.unset("charity_proposal");
    } else {
      this.set("charity_proposal", Value.fromBytes(<Bytes>value));
    }
  }

  get locked_withdrawal(): Bytes | null {
    let value = this.get("locked_withdrawal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set locked_withdrawal(value: Bytes | null) {
    if (!value) {
      this.unset("locked_withdrawal");
    } else {
      this.set("locked_withdrawal", Value.fromBytes(<Bytes>value));
    }
  }

  get proxy_admin(): Bytes | null {
    let value = this.get("proxy_admin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proxy_admin(value: Bytes | null) {
    if (!value) {
      this.unset("proxy_admin");
    } else {
      this.set("proxy_admin", Value.fromBytes(<Bytes>value));
    }
  }

  get USDC_address(): Bytes | null {
    let value = this.get("USDC_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set USDC_address(value: Bytes | null) {
    if (!value) {
      this.unset("USDC_address");
    } else {
      this.set("USDC_address", Value.fromBytes(<Bytes>value));
    }
  }

  get Weth_address(): Bytes | null {
    let value = this.get("Weth_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set Weth_address(value: Bytes | null) {
    if (!value) {
      this.unset("Weth_address");
    } else {
      this.set("Weth_address", Value.fromBytes(<Bytes>value));
    }
  }

  get cw900lv_address(): Bytes | null {
    let value = this.get("cw900lv_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cw900lv_address(value: Bytes | null) {
    if (!value) {
      this.unset("cw900lv_address");
    } else {
      this.set("cw900lv_address", Value.fromBytes(<Bytes>value));
    }
  }
}

export class YieldVault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save YieldVault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type YieldVault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("YieldVault", id.toString(), this);
    }
  }

  static load(id: string): YieldVault | null {
    return changetype<YieldVault | null>(store.get("YieldVault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get addr(): string | null {
    let value = this.get("addr");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set addr(value: string | null) {
    if (!value) {
      this.unset("addr");
    } else {
      this.set("addr", Value.fromString(<string>value));
    }
  }

  get network(): i32 {
    let value = this.get("network");
    return value!.toI32();
  }

  set network(value: i32) {
    this.set("network", Value.fromI32(value));
  }

  get input_denom(): Bytes | null {
    let value = this.get("input_denom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set input_denom(value: Bytes | null) {
    if (!value) {
      this.unset("input_denom");
    } else {
      this.set("input_denom", Value.fromBytes(<Bytes>value));
    }
  }

  get yield_token(): Bytes | null {
    let value = this.get("yield_token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set yield_token(value: Bytes | null) {
    if (!value) {
      this.unset("yield_token");
    } else {
      this.set("yield_token", Value.fromBytes(<Bytes>value));
    }
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }

  get restricted_from(): string | null {
    let value = this.get("restricted_from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set restricted_from(value: string | null) {
    if (!value) {
      this.unset("restricted_from");
    } else {
      this.set("restricted_from", Value.fromString(<string>value));
    }
  }

  get acct_type(): string | null {
    let value = this.get("acct_type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set acct_type(value: string | null) {
    if (!value) {
      this.unset("acct_type");
    } else {
      this.set("acct_type", Value.fromString(<string>value));
    }
  }

  get vault_type(): string | null {
    let value = this.get("vault_type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vault_type(value: string | null) {
    if (!value) {
      this.unset("vault_type");
    } else {
      this.set("vault_type", Value.fromString(<string>value));
    }
  }

  get network_connect(): Array<string> | null {
    let value = this.get("network_connect");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set network_connect(value: Array<string> | null) {
    if (!value) {
      this.unset("network_connect");
    } else {
      this.set("network_connect", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class NetworkInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NetworkInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NetworkInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NetworkInfo", id.toString(), this);
    }
  }

  static load(id: string): NetworkInfo | null {
    return changetype<NetworkInfo | null>(store.get("NetworkInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get chain_id(): i32 {
    let value = this.get("chain_id");
    return value!.toI32();
  }

  set chain_id(value: i32) {
    this.set("chain_id", Value.fromI32(value));
  }

  get router(): Bytes | null {
    let value = this.get("router");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set router(value: Bytes | null) {
    if (!value) {
      this.unset("router");
    } else {
      this.set("router", Value.fromBytes(<Bytes>value));
    }
  }

  get axelerGateway(): Bytes | null {
    let value = this.get("axelerGateway");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set axelerGateway(value: Bytes | null) {
    if (!value) {
      this.unset("axelerGateway");
    } else {
      this.set("axelerGateway", Value.fromBytes(<Bytes>value));
    }
  }

  get ibc_channe(): string | null {
    let value = this.get("ibc_channe");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ibc_channe(value: string | null) {
    if (!value) {
      this.unset("ibc_channe");
    } else {
      this.set("ibc_channe", Value.fromString(<string>value));
    }
  }

  get transfer_channel(): string | null {
    let value = this.get("transfer_channel");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transfer_channel(value: string | null) {
    if (!value) {
      this.unset("transfer_channel");
    } else {
      this.set("transfer_channel", Value.fromString(<string>value));
    }
  }

  get ibc_host_contract(): Bytes | null {
    let value = this.get("ibc_host_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set ibc_host_contract(value: Bytes | null) {
    if (!value) {
      this.unset("ibc_host_contract");
    } else {
      this.set("ibc_host_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get gas_limit(): i32 {
    let value = this.get("gas_limit");
    return value!.toI32();
  }

  set gas_limit(value: i32) {
    this.set("gas_limit", Value.fromI32(value));
  }
}

export class Network_Connection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Network_Connection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Network_Connection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Network_Connection", id.toString(), this);
    }
  }

  static load(id: string): Network_Connection | null {
    return changetype<Network_Connection | null>(
      store.get("Network_Connection", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaults(): string | null {
    let value = this.get("vaults");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vaults(value: string | null) {
    if (!value) {
      this.unset("vaults");
    } else {
      this.set("vaults", Value.fromString(<string>value));
    }
  }

  get network_connect(): string | null {
    let value = this.get("network_connect");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set network_connect(value: string | null) {
    if (!value) {
      this.unset("network_connect");
    } else {
      this.set("network_connect", Value.fromString(<string>value));
    }
  }

  get vaultType(): string | null {
    let value = this.get("vaultType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vaultType(value: string | null) {
    if (!value) {
      this.unset("vaultType");
    } else {
      this.set("vaultType", Value.fromString(<string>value));
    }
  }
}

export class Fee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Fee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Fee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Fee", id.toString(), this);
    }
  }

  static load(id: string): Fee | null {
    return changetype<Fee | null>(store.get("Fee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fees(): Array<i32> | null {
    let value = this.get("fees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toI32Array();
    }
  }

  set fees(value: Array<i32> | null) {
    if (!value) {
      this.unset("fees");
    } else {
      this.set("fees", Value.fromI32Array(<Array<i32>>value));
    }
  }
}

export class Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdrawal", id.toString(), this);
    }
  }

  static load(id: string): Withdrawal | null {
    return changetype<Withdrawal | null>(store.get("Withdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pending(): Bytes | null {
    let value = this.get("pending");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set pending(value: Bytes | null) {
    if (!value) {
      this.unset("pending");
    } else {
      this.set("pending", Value.fromBytes(<Bytes>value));
    }
  }

  get beneficiary(): Bytes | null {
    let value = this.get("beneficiary");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set beneficiary(value: Bytes | null) {
    if (!value) {
      this.unset("beneficiary");
    } else {
      this.set("beneficiary", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenAddress(): Array<Bytes> | null {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set tokenAddress(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get amount(): Array<BigInt> | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set amount(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get endowment(): Array<string> | null {
    let value = this.get("endowment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set endowment(value: Array<string> | null) {
    if (!value) {
      this.unset("endowment");
    } else {
      this.set("endowment", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class LockedWihtdrawalConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LockedWihtdrawalConfig entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LockedWihtdrawalConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LockedWihtdrawalConfig", id.toString(), this);
    }
  }

  static load(id: string): LockedWihtdrawalConfig | null {
    return changetype<LockedWihtdrawalConfig | null>(
      store.get("LockedWihtdrawalConfig", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registrar(): Bytes | null {
    let value = this.get("registrar");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set registrar(value: Bytes | null) {
    if (!value) {
      this.unset("registrar");
    } else {
      this.set("registrar", Value.fromBytes(<Bytes>value));
    }
  }

  get accounts(): Bytes | null {
    let value = this.get("accounts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accounts(value: Bytes | null) {
    if (!value) {
      this.unset("accounts");
    } else {
      this.set("accounts", Value.fromBytes(<Bytes>value));
    }
  }

  get apTeamMultisig(): Bytes | null {
    let value = this.get("apTeamMultisig");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set apTeamMultisig(value: Bytes | null) {
    if (!value) {
      this.unset("apTeamMultisig");
    } else {
      this.set("apTeamMultisig", Value.fromBytes(<Bytes>value));
    }
  }

  get endowFactory(): Bytes | null {
    let value = this.get("endowFactory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set endowFactory(value: Bytes | null) {
    if (!value) {
      this.unset("endowFactory");
    } else {
      this.set("endowFactory", Value.fromBytes(<Bytes>value));
    }
  }
}

export class DonationMatchCharity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchCharity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DonationMatchCharity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchCharity", id.toString(), this);
    }
  }

  static load(id: string): DonationMatchCharity | null {
    return changetype<DonationMatchCharity | null>(
      store.get("DonationMatchCharity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get version(): i32 {
    let value = this.get("version");
    return value!.toI32();
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }
}

export class DonationMatchConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DonationMatchConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchConfig", id.toString(), this);
    }
  }

  static load(id: string): DonationMatchConfig | null {
    return changetype<DonationMatchConfig | null>(
      store.get("DonationMatchConfig", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get donation_match(): Bytes | null {
    let value = this.get("donation_match");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set donation_match(value: Bytes | null) {
    if (!value) {
      this.unset("donation_match");
    } else {
      this.set("donation_match", Value.fromBytes(<Bytes>value));
    }
  }

  get reserve_token(): Bytes | null {
    let value = this.get("reserve_token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set reserve_token(value: Bytes | null) {
    if (!value) {
      this.unset("reserve_token");
    } else {
      this.set("reserve_token", Value.fromBytes(<Bytes>value));
    }
  }

  get uniswap_factory(): Bytes | null {
    let value = this.get("uniswap_factory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set uniswap_factory(value: Bytes | null) {
    if (!value) {
      this.unset("uniswap_factory");
    } else {
      this.set("uniswap_factory", Value.fromBytes(<Bytes>value));
    }
  }

  get USDC_address(): Bytes | null {
    let value = this.get("USDC_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set USDC_address(value: Bytes | null) {
    if (!value) {
      this.unset("USDC_address");
    } else {
      this.set("USDC_address", Value.fromBytes(<Bytes>value));
    }
  }

  get registrar_contract(): Bytes | null {
    let value = this.get("registrar_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set registrar_contract(value: Bytes | null) {
    if (!value) {
      this.unset("registrar_contract");
    } else {
      this.set("registrar_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get pool_fee(): i32 {
    let value = this.get("pool_fee");
    return value!.toI32();
  }

  set pool_fee(value: i32) {
    this.set("pool_fee", Value.fromI32(value));
  }
}

export class DonationMatchExecute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DonationMatchExecute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DonationMatchExecute must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DonationMatchExecute", id.toString(), this);
    }
  }

  static load(id: string): DonationMatchExecute | null {
    return changetype<DonationMatchExecute | null>(
      store.get("DonationMatchExecute", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get accounts_contract(): Bytes | null {
    let value = this.get("accounts_contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set accounts_contract(value: Bytes | null) {
    if (!value) {
      this.unset("accounts_contract");
    } else {
      this.set("accounts_contract", Value.fromBytes(<Bytes>value));
    }
  }

  get donation_match(): Bytes | null {
    let value = this.get("donation_match");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set donation_match(value: Bytes | null) {
    if (!value) {
      this.unset("donation_match");
    } else {
      this.set("donation_match", Value.fromBytes(<Bytes>value));
    }
  }

  get donor(): Bytes | null {
    let value = this.get("donor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set donor(value: Bytes | null) {
    if (!value) {
      this.unset("donor");
    } else {
      this.set("donor", Value.fromBytes(<Bytes>value));
    }
  }
}

export class erc20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save erc20 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type erc20 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("erc20", id.toString(), this);
    }
  }

  static load(id: string): erc20 | null {
    return changetype<erc20 | null>(store.get("erc20", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get recipient(): Bytes | null {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes | null) {
    if (!value) {
      this.unset("recipient");
    } else {
      this.set("recipient", Value.fromBytes(<Bytes>value));
    }
  }

  get spender(): Bytes | null {
    let value = this.get("spender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set spender(value: Bytes | null) {
    if (!value) {
      this.unset("spender");
    } else {
      this.set("spender", Value.fromBytes(<Bytes>value));
    }
  }
}
