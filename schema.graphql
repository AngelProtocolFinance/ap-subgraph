type RouterDeposit @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FallbackRefund @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Harvest @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RouterInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogError @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  message: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogErrorBytes @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RouterOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Redemption @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensSent @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
