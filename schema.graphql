type CharityApproved @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt! # uint256
  endowmentId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityProposed @entity(immutable: true) {
  id: Bytes!
  proposer: Bytes! # address
  proposalId: BigInt! # uint256
  meta: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CharityRejected @entity(immutable: true) {
  id: Bytes!
  proposalId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GasSent @entity(immutable: true) {
  id: Bytes!
  endowmentId: BigInt! # uint256
  member: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type InitilizedCharityApplication @entity(immutable: true) {
  id: Bytes!
  updatedConfig_proposalExpiry: BigInt! # uint256
  updatedConfig_applicationMultisig: Bytes! # address
  updatedConfig_accountsContract: Bytes! # address
  updatedConfig_seedSplitToLiquid: BigInt! # uint256
  updatedConfig_newEndowGasMoney: Boolean! # bool
  updatedConfig_gasAmount: BigInt! # uint256
  updatedConfig_fundSeedAsset: Boolean! # bool
  updatedConfig_seedAsset: Bytes! # address
  updatedConfig_seedAssetAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SeedAssetSent @entity(immutable: true) {
  id: Bytes!
  endowmentId: BigInt! # uint256
  asset: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ConfigUpdated @entity(immutable: true) {
  id: Bytes!
  config_owner: Bytes! # address
  config_registrarContract: Bytes! # address
  config_fundRotation: BigInt! # uint256
  config_fundMemberLimit: BigInt! # uint256
  config_fundingGoal: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DonationMessagesUpdated @entity(immutable: true) {
  id: Bytes!
  messages_member_ids: [BigInt!]! # uint32[]
  messages_locked_donation_amount: [BigInt!]! # uint256[]
  messages_liquid_donation_amount: [BigInt!]! # uint256[]
  messages_lockedSplit: [BigInt!]! # uint256[]
  messages_liquidSplit: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IndexFundCreated @entity(immutable: true) {
  id: Bytes!
  IndexFund_id: BigInt! # uint256
  fund_id: BigInt! # uint256
  fund_name: String! # string
  fund_description: String! # string
  fund_members: [BigInt!]! # uint32[]
  fund_splitToLiquid: BigInt! # uint256
  fund_expiryTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IndexFundRemoved @entity(immutable: true) {
  id: Bytes!
  IndexFund_id: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MemberAdded @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  memberId: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MemberRemoved @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  memberId: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerUpdated @entity(immutable: true) {
  id: Bytes!
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RegistrarUpdated @entity(immutable: true) {
  id: Bytes!
  newRegistrar: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateActiveFund @entity(immutable: true) {
  id: Bytes!
  fundId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateIndexFundState @entity(immutable: true) {
  id: Bytes!
  state_totalFunds: BigInt! # uint256
  state_activeFund: BigInt! # uint256
  state_roundDonations: BigInt! # uint256
  state_nextRotationBlock: BigInt! # uint256
  state_nextFundId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Confirmation @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApplicationsMultiSigDeposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Execution @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecutionFailure @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecutionRequiredChange @entity(immutable: true) {
  id: Bytes!
  requireExecution: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApplicationsMultiSigInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerAddition @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerRemoval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequirementChange @entity(immutable: true) {
  id: Bytes!
  required: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Revocation @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Submission @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  transaction_title: String! # string
  transaction_description: String! # string
  transaction_destination: Bytes! # address
  transaction_value: BigInt! # uint256
  transaction_data: Bytes! # bytes
  transaction_executed: Boolean! # bool
  transaction_metadata: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ContractInstantiation @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  instantiation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type EndowmentMultiSigConfirmation @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigDeposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigExecution @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigExecutionFailure @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigExecutionRequiredChange @entity(immutable: true) {
  id: Bytes!
  requireExecution: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigOwnerAddition @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigOwnerRemoval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigRequirementChange @entity(immutable: true) {
  id: Bytes!
  required: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigRevocation @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EndowmentMultiSigSubmission @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  transaction_title: String! # string
  transaction_description: String! # string
  transaction_destination: Bytes! # address
  transaction_value: BigInt! # uint256
  transaction_data: Bytes! # bytes
  transaction_executed: Boolean! # bool
  transaction_metadata: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type APTeamMultiSigConfirmation @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigDeposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigExecution @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigExecutionFailure @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigExecutionRequiredChange @entity(immutable: true) {
  id: Bytes!
  requireExecution: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigOwnerAddition @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigOwnerRemoval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigRequirementChange @entity(immutable: true) {
  id: Bytes!
  required: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigRevocation @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  transactionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type APTeamMultiSigSubmission @entity(immutable: true) {
  id: Bytes!
  transactionId: BigInt! # uint256
  transaction_title: String! # string
  transaction_description: String! # string
  transaction_destination: Bytes! # address
  transaction_value: BigInt! # uint256
  transaction_data: Bytes! # bytes
  transaction_executed: Boolean! # bool
  transaction_metadata: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AccountsContractStorageChanged @entity(immutable: true) {
  id: Bytes!
  _chainName: String! # string
  _accountsContractAddress: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AngelProtocolParamsChanged @entity(immutable: true) {
  id: Bytes!
  _newAngelProtocolParams_routerAddr: Bytes! # address
  _newAngelProtocolParams_refundAddr: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DeleteNetworkConnection @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeUpdated @entity(immutable: true) {
  id: Bytes!
  _fee: Int! # uint8
  _rate: BigInt! # uint256
  _payout: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GasFeeUpdated @entity(immutable: true) {
  id: Bytes!
  _tokenAddr: Bytes! # address
  _gasFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RegistrarInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RegistrarOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PostNetworkConnection @entity(immutable: true) {
  id: Bytes!
  chainId: BigInt! # uint256
  networkInfo_name: String! # string
  networkInfo_chainId: BigInt! # uint256
  networkInfo_router: Bytes! # address
  networkInfo_axelarGateway: Bytes! # address
  networkInfo_ibcChannel: String! # string
  networkInfo_transferChannel: String! # string
  networkInfo_gasReceiver: Bytes! # address
  networkInfo_gasLimit: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RebalanceParamsChanged @entity(immutable: true) {
  id: Bytes!
  _newRebalanceParams_rebalanceLiquidProfits: Boolean! # bool
  _newRebalanceParams_lockedRebalanceToLiquid: BigInt! # uint32
  _newRebalanceParams_interestDistribution: BigInt! # uint32
  _newRebalanceParams_lockedPrincipleToLiquid: Boolean! # bool
  _newRebalanceParams_principleDistribution: BigInt! # uint32
  _newRebalanceParams_basis: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyApprovalChanged @entity(immutable: true) {
  id: Bytes!
  _strategyId: Bytes! # bytes4
  _approvalState: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyParamsChanged @entity(immutable: true) {
  id: Bytes!
  _strategyId: Bytes! # bytes4
  _lockAddr: Bytes! # address
  _liqAddr: Bytes! # address
  _approvalState: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenAcceptanceChanged @entity(immutable: true) {
  id: Bytes!
  _tokenAddr: Bytes! # address
  _isAccepted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdateRegistrarConfig @entity(immutable: true) {
  id: Bytes!
  details_applicationsReview: Bytes! # address
  details_indexFundContract: Bytes! # address
  details_accountsContract: Bytes! # address
  details_treasury: Bytes! # address
  details_subdaoGovContract: Bytes! # address
  details_subdaoTokenContract: Bytes! # address
  details_subdaoBondingTokenContract: Bytes! # address
  details_subdaoCw900Contract: Bytes! # address
  details_subdaoDistributorContract: Bytes! # address
  details_subdaoEmitter: Bytes! # address
  details_donationMatchContract: Bytes! # address
  details_donationMatchCharitesContract: Bytes! # address
  details_donationMatchEmitter: Bytes! # address
  details_splitToLiquid_max: BigInt! # uint256
  details_splitToLiquid_min: BigInt! # uint256
  details_splitToLiquid_defaultSplit: BigInt! # uint256
  details_haloToken: Bytes! # address
  details_haloTokenLpContract: Bytes! # address
  details_govContract: Bytes! # address
  details_collectorShare: BigInt! # uint256
  details_charitySharesContract: Bytes! # address
  details_fundraisingContract: Bytes! # address
  details_uniswapSwapRouter: Bytes! # address
  details_multisigFactory: Bytes! # address
  details_multisigEmitter: Bytes! # address
  details_charityProposal: Bytes! # address
  details_lockedWithdrawal: Bytes! # address
  details_proxyAdmin: Bytes! # address
  details_usdcAddress: Bytes! # address
  details_wMaticAddress: Bytes! # address
  details_cw900lvAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type RouterDeposit @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FallbackRefund @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Harvest @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RouterInitialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogError @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  message: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LogErrorBytes @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  data: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RouterOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Redemption @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensSent @entity(immutable: true) {
  id: Bytes!
  action_destinationChain: String! # string
  action_strategyId: Bytes! # bytes4
  action_selector: Bytes! # bytes4
  action_accountIds: [BigInt!]! # uint32[]
  action_token: Bytes! # address
  action_lockAmt: BigInt! # uint256
  action_liqAmt: BigInt! # uint256
  action_status: Int! # uint8
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
