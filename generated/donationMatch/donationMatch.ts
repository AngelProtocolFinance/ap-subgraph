// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class donationMatchExecuted extends ethereum.Event {
  get params(): donationMatchExecuted__Params {
    return new donationMatchExecuted__Params(this);
  }
}

export class donationMatchExecuted__Params {
  _event: donationMatchExecuted;

  constructor(event: donationMatchExecuted) {
    this._event = event;
  }

  get donationMatch(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get accounts_contract(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get endowment_id(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get donor(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class donationMatchInitialized extends ethereum.Event {
  get params(): donationMatchInitialized__Params {
    return new donationMatchInitialized__Params(this);
  }
}

export class donationMatchInitialized__Params {
  _event: donationMatchInitialized;

  constructor(event: donationMatchInitialized) {
    this._event = event;
  }

  get endowment_id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get donationMatch(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get config(): donationMatchInitializedConfigStruct {
    return changetype<donationMatchInitializedConfigStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class donationMatchInitializedConfigStruct extends ethereum.Tuple {
  get reserve_token(): Address {
    return this[0].toAddress();
  }

  get uniswap_factory(): Address {
    return this[1].toAddress();
  }

  get USDC_address(): Address {
    return this[2].toAddress();
  }

  get registrar_contract(): Address {
    return this[3].toAddress();
  }

  get pool_fee(): i32 {
    return this[4].toI32();
  }
}

export class erc20ApprovalGiven extends ethereum.Event {
  get params(): erc20ApprovalGiven__Params {
    return new erc20ApprovalGiven__Params(this);
  }
}

export class erc20ApprovalGiven__Params {
  _event: erc20ApprovalGiven;

  constructor(event: erc20ApprovalGiven) {
    this._event = event;
  }

  get endowment_id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class erc20Burned extends ethereum.Event {
  get params(): erc20Burned__Params {
    return new erc20Burned__Params(this);
  }
}

export class erc20Burned__Params {
  _event: erc20Burned;

  constructor(event: erc20Burned) {
    this._event = event;
  }

  get endowment_id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class erc20Transfer extends ethereum.Event {
  get params(): erc20Transfer__Params {
    return new erc20Transfer__Params(this);
  }
}

export class erc20Transfer__Params {
  _event: erc20Transfer;

  constructor(event: erc20Transfer) {
    this._event = event;
  }

  get endowment_id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class donationMatch extends ethereum.SmartContract {
  static bind(address: Address): donationMatch {
    return new donationMatch("donationMatch", address);
  }

  isDonationMatch(param0: Address): boolean {
    let result = super.call(
      "isDonationMatch",
      "isDonationMatch(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isDonationMatch(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDonationMatch",
      "isDonationMatch(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class BurnERC20Call extends ethereum.Call {
  get inputs(): BurnERC20Call__Inputs {
    return new BurnERC20Call__Inputs(this);
  }

  get outputs(): BurnERC20Call__Outputs {
    return new BurnERC20Call__Outputs(this);
  }
}

export class BurnERC20Call__Inputs {
  _call: BurnERC20Call;

  constructor(call: BurnERC20Call) {
    this._call = call;
  }

  get endowment_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnERC20Call__Outputs {
  _call: BurnERC20Call;

  constructor(call: BurnERC20Call) {
    this._call = call;
  }
}

export class ExecuteDonorMatchCall extends ethereum.Call {
  get inputs(): ExecuteDonorMatchCall__Inputs {
    return new ExecuteDonorMatchCall__Inputs(this);
  }

  get outputs(): ExecuteDonorMatchCall__Outputs {
    return new ExecuteDonorMatchCall__Outputs(this);
  }
}

export class ExecuteDonorMatchCall__Inputs {
  _call: ExecuteDonorMatchCall;

  constructor(call: ExecuteDonorMatchCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get accounts_contract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get endowment_id(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get donor(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ExecuteDonorMatchCall__Outputs {
  _call: ExecuteDonorMatchCall;

  constructor(call: ExecuteDonorMatchCall) {
    this._call = call;
  }
}

export class GiveApprovalERC20Call extends ethereum.Call {
  get inputs(): GiveApprovalERC20Call__Inputs {
    return new GiveApprovalERC20Call__Inputs(this);
  }

  get outputs(): GiveApprovalERC20Call__Outputs {
    return new GiveApprovalERC20Call__Outputs(this);
  }
}

export class GiveApprovalERC20Call__Inputs {
  _call: GiveApprovalERC20Call;

  constructor(call: GiveApprovalERC20Call) {
    this._call = call;
  }

  get endowment_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class GiveApprovalERC20Call__Outputs {
  _call: GiveApprovalERC20Call;

  constructor(call: GiveApprovalERC20Call) {
    this._call = call;
  }
}

export class InitDonationMatchEmiiterCall extends ethereum.Call {
  get inputs(): InitDonationMatchEmiiterCall__Inputs {
    return new InitDonationMatchEmiiterCall__Inputs(this);
  }

  get outputs(): InitDonationMatchEmiiterCall__Outputs {
    return new InitDonationMatchEmiiterCall__Outputs(this);
  }
}

export class InitDonationMatchEmiiterCall__Inputs {
  _call: InitDonationMatchEmiiterCall;

  constructor(call: InitDonationMatchEmiiterCall) {
    this._call = call;
  }

  get _accountsContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitDonationMatchEmiiterCall__Outputs {
  _call: InitDonationMatchEmiiterCall;

  constructor(call: InitDonationMatchEmiiterCall) {
    this._call = call;
  }
}

export class InitializeDonationMatchCall extends ethereum.Call {
  get inputs(): InitializeDonationMatchCall__Inputs {
    return new InitializeDonationMatchCall__Inputs(this);
  }

  get outputs(): InitializeDonationMatchCall__Outputs {
    return new InitializeDonationMatchCall__Outputs(this);
  }
}

export class InitializeDonationMatchCall__Inputs {
  _call: InitializeDonationMatchCall;

  constructor(call: InitializeDonationMatchCall) {
    this._call = call;
  }

  get endowment_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get donationMatch(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get config(): InitializeDonationMatchCallConfigStruct {
    return changetype<InitializeDonationMatchCallConfigStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class InitializeDonationMatchCall__Outputs {
  _call: InitializeDonationMatchCall;

  constructor(call: InitializeDonationMatchCall) {
    this._call = call;
  }
}

export class InitializeDonationMatchCallConfigStruct extends ethereum.Tuple {
  get reserve_token(): Address {
    return this[0].toAddress();
  }

  get uniswap_factory(): Address {
    return this[1].toAddress();
  }

  get USDC_address(): Address {
    return this[2].toAddress();
  }

  get registrar_contract(): Address {
    return this[3].toAddress();
  }

  get pool_fee(): i32 {
    return this[4].toI32();
  }
}

export class TransferERC20Call extends ethereum.Call {
  get inputs(): TransferERC20Call__Inputs {
    return new TransferERC20Call__Inputs(this);
  }

  get outputs(): TransferERC20Call__Outputs {
    return new TransferERC20Call__Outputs(this);
  }
}

export class TransferERC20Call__Inputs {
  _call: TransferERC20Call;

  constructor(call: TransferERC20Call) {
    this._call = call;
  }

  get endowment_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferERC20Call__Outputs {
  _call: TransferERC20Call;

  constructor(call: TransferERC20Call) {
    this._call = call;
  }
}
