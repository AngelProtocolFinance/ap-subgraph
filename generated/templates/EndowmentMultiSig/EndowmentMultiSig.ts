// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalsRequiredChanged extends ethereum.Event {
  get params(): ApprovalsRequiredChanged__Params {
    return new ApprovalsRequiredChanged__Params(this);
  }
}

export class ApprovalsRequiredChanged__Params {
  _event: ApprovalsRequiredChanged;

  constructor(event: ApprovalsRequiredChanged) {
    this._event = event;
  }

  get approvalsRequired(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ExpiryChanged extends ethereum.Event {
  get params(): ExpiryChanged__Params {
    return new ExpiryChanged__Params(this);
  }
}

export class ExpiryChanged__Params {
  _event: ExpiryChanged;

  constructor(event: ExpiryChanged) {
    this._event = event;
  }

  get transactionExpiry(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Initialized1 extends ethereum.Event {
  get params(): Initialized1__Params {
    return new Initialized1__Params(this);
  }
}

export class Initialized1__Params {
  _event: Initialized1;

  constructor(event: Initialized1) {
    this._event = event;
  }

  get owners(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get approvalsRequired(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get requireExecution(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get transactionExpiry(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnerAdded extends ethereum.Event {
  get params(): OwnerAdded__Params {
    return new OwnerAdded__Params(this);
  }
}

export class OwnerAdded__Params {
  _event: OwnerAdded;

  constructor(event: OwnerAdded) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnerRemoved extends ethereum.Event {
  get params(): OwnerRemoved__Params {
    return new OwnerRemoved__Params(this);
  }
}

export class OwnerRemoved__Params {
  _event: OwnerRemoved;

  constructor(event: OwnerRemoved) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RequireExecutionChanged extends ethereum.Event {
  get params(): RequireExecutionChanged__Params {
    return new RequireExecutionChanged__Params(this);
  }
}

export class RequireExecutionChanged__Params {
  _event: RequireExecutionChanged;

  constructor(event: RequireExecutionChanged) {
    this._event = event;
  }

  get requireExecution(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class TransactionConfirmationRevoked extends ethereum.Event {
  get params(): TransactionConfirmationRevoked__Params {
    return new TransactionConfirmationRevoked__Params(this);
  }
}

export class TransactionConfirmationRevoked__Params {
  _event: TransactionConfirmationRevoked;

  constructor(event: TransactionConfirmationRevoked) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transactionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransactionConfirmed extends ethereum.Event {
  get params(): TransactionConfirmed__Params {
    return new TransactionConfirmed__Params(this);
  }
}

export class TransactionConfirmed__Params {
  _event: TransactionConfirmed;

  constructor(event: TransactionConfirmed) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transactionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransactionExecuted extends ethereum.Event {
  get params(): TransactionExecuted__Params {
    return new TransactionExecuted__Params(this);
  }
}

export class TransactionExecuted__Params {
  _event: TransactionExecuted;

  constructor(event: TransactionExecuted) {
    this._event = event;
  }

  get transactionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TransactionSubmitted extends ethereum.Event {
  get params(): TransactionSubmitted__Params {
    return new TransactionSubmitted__Params(this);
  }
}

export class TransactionSubmitted__Params {
  _event: TransactionSubmitted;

  constructor(event: TransactionSubmitted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get transactionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class EndowmentMultiSig__transactionsResult {
  value0: Address;
  value1: BigInt;
  value2: Bytes;
  value3: boolean;
  value4: BigInt;
  value5: Bytes;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Bytes,
    value3: boolean,
    value4: BigInt,
    value5: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBytes(this.value5));
    return map;
  }

  getDestination(): Address {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }

  getData(): Bytes {
    return this.value2;
  }

  getExecuted(): boolean {
    return this.value3;
  }

  getExpiry(): BigInt {
    return this.value4;
  }

  getMetadata(): Bytes {
    return this.value5;
  }
}

export class EndowmentMultiSig extends ethereum.SmartContract {
  static bind(address: Address): EndowmentMultiSig {
    return new EndowmentMultiSig("EndowmentMultiSig", address);
  }

  EMITTER_ADDRESS(): Address {
    let result = super.call(
      "EMITTER_ADDRESS",
      "EMITTER_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_EMITTER_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "EMITTER_ADDRESS",
      "EMITTER_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ENDOWMENT_ID(): BigInt {
    let result = super.call("ENDOWMENT_ID", "ENDOWMENT_ID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ENDOWMENT_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ENDOWMENT_ID", "ENDOWMENT_ID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activeOwnersCount(): BigInt {
    let result = super.call(
      "activeOwnersCount",
      "activeOwnersCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_activeOwnersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeOwnersCount",
      "activeOwnersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvalsRequired(): BigInt {
    let result = super.call(
      "approvalsRequired",
      "approvalsRequired():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_approvalsRequired(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "approvalsRequired",
      "approvalsRequired():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  confirmations(param0: BigInt): BigInt {
    let result = super.call(
      "confirmations",
      "confirmations(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_confirmations(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "confirmations",
      "confirmations(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConfirmationCount(transactionId: BigInt): BigInt {
    let result = super.call(
      "getConfirmationCount",
      "getConfirmationCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(transactionId)]
    );

    return result[0].toBigInt();
  }

  try_getConfirmationCount(transactionId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getConfirmationCount",
      "getConfirmationCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(transactionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getConfirmationStatus(transactionId: BigInt, ownerAddr: Address): boolean {
    let result = super.call(
      "getConfirmationStatus",
      "getConfirmationStatus(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(transactionId),
        ethereum.Value.fromAddress(ownerAddr)
      ]
    );

    return result[0].toBoolean();
  }

  try_getConfirmationStatus(
    transactionId: BigInt,
    ownerAddr: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getConfirmationStatus",
      "getConfirmationStatus(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(transactionId),
        ethereum.Value.fromAddress(ownerAddr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getOwnerStatus(ownerAddr: Address): boolean {
    let result = super.call(
      "getOwnerStatus",
      "getOwnerStatus(address):(bool)",
      [ethereum.Value.fromAddress(ownerAddr)]
    );

    return result[0].toBoolean();
  }

  try_getOwnerStatus(ownerAddr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getOwnerStatus",
      "getOwnerStatus(address):(bool)",
      [ethereum.Value.fromAddress(ownerAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isConfirmed(transactionId: BigInt): boolean {
    let result = super.call("isConfirmed", "isConfirmed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(transactionId)
    ]);

    return result[0].toBoolean();
  }

  try_isConfirmed(transactionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isConfirmed", "isConfirmed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(transactionId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(param0: Address): boolean {
    let result = super.call("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isOwner(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requireExecution(): boolean {
    let result = super.call(
      "requireExecution",
      "requireExecution():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_requireExecution(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "requireExecution",
      "requireExecution():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  submitTransaction(
    destination: Address,
    value: BigInt,
    data: Bytes,
    metadata: Bytes
  ): BigInt {
    let result = super.call(
      "submitTransaction",
      "submitTransaction(address,uint256,bytes,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(destination),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytes(metadata)
      ]
    );

    return result[0].toBigInt();
  }

  try_submitTransaction(
    destination: Address,
    value: BigInt,
    data: Bytes,
    metadata: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submitTransaction",
      "submitTransaction(address,uint256,bytes,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(destination),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromBytes(metadata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transactionCount(): BigInt {
    let result = super.call(
      "transactionCount",
      "transactionCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_transactionCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transactionCount",
      "transactionCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transactionExpiry(): BigInt {
    let result = super.call(
      "transactionExpiry",
      "transactionExpiry():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_transactionExpiry(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transactionExpiry",
      "transactionExpiry():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transactions(param0: BigInt): EndowmentMultiSig__transactionsResult {
    let result = super.call(
      "transactions",
      "transactions(uint256):(address,uint256,bytes,bool,uint256,bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new EndowmentMultiSig__transactionsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toBytes()
    );
  }

  try_transactions(
    param0: BigInt
  ): ethereum.CallResult<EndowmentMultiSig__transactionsResult> {
    let result = super.tryCall(
      "transactions",
      "transactions(uint256):(address,uint256,bytes,bool,uint256,bytes)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EndowmentMultiSig__transactionsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toBytes()
      )
    );
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddOwnersCall extends ethereum.Call {
  get inputs(): AddOwnersCall__Inputs {
    return new AddOwnersCall__Inputs(this);
  }

  get outputs(): AddOwnersCall__Outputs {
    return new AddOwnersCall__Outputs(this);
  }
}

export class AddOwnersCall__Inputs {
  _call: AddOwnersCall;

  constructor(call: AddOwnersCall) {
    this._call = call;
  }

  get owners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddOwnersCall__Outputs {
  _call: AddOwnersCall;

  constructor(call: AddOwnersCall) {
    this._call = call;
  }
}

export class ChangeApprovalsRequirementCall extends ethereum.Call {
  get inputs(): ChangeApprovalsRequirementCall__Inputs {
    return new ChangeApprovalsRequirementCall__Inputs(this);
  }

  get outputs(): ChangeApprovalsRequirementCall__Outputs {
    return new ChangeApprovalsRequirementCall__Outputs(this);
  }
}

export class ChangeApprovalsRequirementCall__Inputs {
  _call: ChangeApprovalsRequirementCall;

  constructor(call: ChangeApprovalsRequirementCall) {
    this._call = call;
  }

  get _approvalsRequired(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeApprovalsRequirementCall__Outputs {
  _call: ChangeApprovalsRequirementCall;

  constructor(call: ChangeApprovalsRequirementCall) {
    this._call = call;
  }
}

export class ChangeRequireExecutionCall extends ethereum.Call {
  get inputs(): ChangeRequireExecutionCall__Inputs {
    return new ChangeRequireExecutionCall__Inputs(this);
  }

  get outputs(): ChangeRequireExecutionCall__Outputs {
    return new ChangeRequireExecutionCall__Outputs(this);
  }
}

export class ChangeRequireExecutionCall__Inputs {
  _call: ChangeRequireExecutionCall;

  constructor(call: ChangeRequireExecutionCall) {
    this._call = call;
  }

  get _requireExecution(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ChangeRequireExecutionCall__Outputs {
  _call: ChangeRequireExecutionCall;

  constructor(call: ChangeRequireExecutionCall) {
    this._call = call;
  }
}

export class ChangeTransactionExpiryCall extends ethereum.Call {
  get inputs(): ChangeTransactionExpiryCall__Inputs {
    return new ChangeTransactionExpiryCall__Inputs(this);
  }

  get outputs(): ChangeTransactionExpiryCall__Outputs {
    return new ChangeTransactionExpiryCall__Outputs(this);
  }
}

export class ChangeTransactionExpiryCall__Inputs {
  _call: ChangeTransactionExpiryCall;

  constructor(call: ChangeTransactionExpiryCall) {
    this._call = call;
  }

  get _transactionExpiry(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeTransactionExpiryCall__Outputs {
  _call: ChangeTransactionExpiryCall;

  constructor(call: ChangeTransactionExpiryCall) {
    this._call = call;
  }
}

export class ConfirmTransactionCall extends ethereum.Call {
  get inputs(): ConfirmTransactionCall__Inputs {
    return new ConfirmTransactionCall__Inputs(this);
  }

  get outputs(): ConfirmTransactionCall__Outputs {
    return new ConfirmTransactionCall__Outputs(this);
  }
}

export class ConfirmTransactionCall__Inputs {
  _call: ConfirmTransactionCall;

  constructor(call: ConfirmTransactionCall) {
    this._call = call;
  }

  get transactionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConfirmTransactionCall__Outputs {
  _call: ConfirmTransactionCall;

  constructor(call: ConfirmTransactionCall) {
    this._call = call;
  }
}

export class ExecuteTransactionCall extends ethereum.Call {
  get inputs(): ExecuteTransactionCall__Inputs {
    return new ExecuteTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteTransactionCall__Outputs {
    return new ExecuteTransactionCall__Outputs(this);
  }
}

export class ExecuteTransactionCall__Inputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get transactionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteTransactionCall__Outputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _endowmentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _emitter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _owners(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _required(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _requireExecution(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _transactionExpiry(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class RemoveOwnersCall extends ethereum.Call {
  get inputs(): RemoveOwnersCall__Inputs {
    return new RemoveOwnersCall__Inputs(this);
  }

  get outputs(): RemoveOwnersCall__Outputs {
    return new RemoveOwnersCall__Outputs(this);
  }
}

export class RemoveOwnersCall__Inputs {
  _call: RemoveOwnersCall;

  constructor(call: RemoveOwnersCall) {
    this._call = call;
  }

  get owners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveOwnersCall__Outputs {
  _call: RemoveOwnersCall;

  constructor(call: RemoveOwnersCall) {
    this._call = call;
  }
}

export class ReplaceOwnerCall extends ethereum.Call {
  get inputs(): ReplaceOwnerCall__Inputs {
    return new ReplaceOwnerCall__Inputs(this);
  }

  get outputs(): ReplaceOwnerCall__Outputs {
    return new ReplaceOwnerCall__Outputs(this);
  }
}

export class ReplaceOwnerCall__Inputs {
  _call: ReplaceOwnerCall;

  constructor(call: ReplaceOwnerCall) {
    this._call = call;
  }

  get currOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ReplaceOwnerCall__Outputs {
  _call: ReplaceOwnerCall;

  constructor(call: ReplaceOwnerCall) {
    this._call = call;
  }
}

export class RevokeConfirmationCall extends ethereum.Call {
  get inputs(): RevokeConfirmationCall__Inputs {
    return new RevokeConfirmationCall__Inputs(this);
  }

  get outputs(): RevokeConfirmationCall__Outputs {
    return new RevokeConfirmationCall__Outputs(this);
  }
}

export class RevokeConfirmationCall__Inputs {
  _call: RevokeConfirmationCall;

  constructor(call: RevokeConfirmationCall) {
    this._call = call;
  }

  get transactionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevokeConfirmationCall__Outputs {
  _call: RevokeConfirmationCall;

  constructor(call: RevokeConfirmationCall) {
    this._call = call;
  }
}

export class RevokeConfirmationOfFormerOwnerCall extends ethereum.Call {
  get inputs(): RevokeConfirmationOfFormerOwnerCall__Inputs {
    return new RevokeConfirmationOfFormerOwnerCall__Inputs(this);
  }

  get outputs(): RevokeConfirmationOfFormerOwnerCall__Outputs {
    return new RevokeConfirmationOfFormerOwnerCall__Outputs(this);
  }
}

export class RevokeConfirmationOfFormerOwnerCall__Inputs {
  _call: RevokeConfirmationOfFormerOwnerCall;

  constructor(call: RevokeConfirmationOfFormerOwnerCall) {
    this._call = call;
  }

  get transactionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get formerOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeConfirmationOfFormerOwnerCall__Outputs {
  _call: RevokeConfirmationOfFormerOwnerCall;

  constructor(call: RevokeConfirmationOfFormerOwnerCall) {
    this._call = call;
  }
}

export class SubmitTransactionCall extends ethereum.Call {
  get inputs(): SubmitTransactionCall__Inputs {
    return new SubmitTransactionCall__Inputs(this);
  }

  get outputs(): SubmitTransactionCall__Outputs {
    return new SubmitTransactionCall__Outputs(this);
  }
}

export class SubmitTransactionCall__Inputs {
  _call: SubmitTransactionCall;

  constructor(call: SubmitTransactionCall) {
    this._call = call;
  }

  get destination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get metadata(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SubmitTransactionCall__Outputs {
  _call: SubmitTransactionCall;

  constructor(call: SubmitTransactionCall) {
    this._call = call;
  }

  get transactionId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
